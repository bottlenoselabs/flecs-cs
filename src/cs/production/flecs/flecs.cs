
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/bottlenoselabs/c2cs (v2.3.1.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
#nullable enable
#pragma warning disable 1591
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static bottlenoselabs.flecs.Runtime;

namespace bottlenoselabs
{
    public static unsafe partial class flecs
    {
        private const string LibraryName = "flecs";

        // Function @ log.h:42:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_deprecated(CString file, int line, CString msg);

        // Function @ log.h:54:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_log_push(int level);

        // Function @ log.h:63:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_log_pop(int level);

        // Function @ log.h:73:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_should_log(int level);

        // Function @ log.h:81:13 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_strerror(int error_code);

        // Function @ log.h:110:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_log(int level, CString file, int line, CString fmt);

        // Function @ log.h:118:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_logv(int level, CString file, int line, CString fmt, nint args);

        // Function @ log.h:126:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_abort(int error_code, CString file, int line, CString fmt);

        // Function @ log.h:134:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool _ecs_assert(CBool condition, int error_code, CString condition_str, CString file, int line, CString fmt);

        // Function @ log.h:144:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_parser_error(CString name, CString expr, long column, CString fmt);

        // Function @ log.h:152:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_parser_errorv(CString name, CString expr, long column, CString fmt, nint args);

        // Function @ log.h:409:5 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_log_set_level(int level);

        // Function @ log.h:419:6 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_log_enable_colors(CBool enabled);

        // Function @ log.h:428:5 (flecs/addons/log.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_log_last_error();

        // Function @ vector.h:96:15 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_vector_t* _ecs_vector_new(ecs_size_t elem_size, short offset, int elem_count);

        // Function @ vector.h:109:15 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_vector_t* _ecs_vector_from_array(ecs_size_t elem_size, short offset, int elem_count, void* array);

        // Function @ vector.h:120:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_vector_zero(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

        // Function @ vector.h:130:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vector_free(ecs_vector_t* vector);

        // Function @ vector.h:135:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vector_clear(ecs_vector_t* vector);

        // Function @ vector.h:140:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vector_assert_size(ecs_vector_t* vector_inout, ecs_size_t elem_size);

        // Function @ vector.h:146:7 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_vector_add(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset);

        // Function @ vector.h:159:7 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_vector_insert_at(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int index);

        // Function @ vector.h:173:7 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_vector_addn(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

        // Function @ vector.h:187:7 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_vector_get(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

        // Function @ vector.h:201:7 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_vector_last(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

        // Function @ vector.h:215:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecs_vector_set_min_size(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

        // Function @ vector.h:227:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecs_vector_set_min_count(ecs_vector_t** vector_inout, ecs_size_t elem_size, short offset, int elem_count);

        // Function @ vector.h:241:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_vector_remove_last(ecs_vector_t* vector);

        // Function @ vector.h:246:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool _ecs_vector_pop(ecs_vector_t* vector, ecs_size_t elem_size, short offset, void* value);

        // Function @ vector.h:257:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecs_vector_move_index(ecs_vector_t** dst, ecs_vector_t* src, ecs_size_t elem_size, short offset, int index);

        // Function @ vector.h:272:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecs_vector_remove(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

        // Function @ vector.h:286:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_vector_reclaim(ecs_vector_t** vector, ecs_size_t elem_size, short offset);

        // Function @ vector.h:296:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecs_vector_grow(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

        // Function @ vector.h:307:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecs_vector_set_size(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

        // Function @ vector.h:322:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecs_vector_set_count(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

        // Function @ vector.h:336:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_vector_count(ecs_vector_t* vector);

        // Function @ vector.h:341:9 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_vector_size(ecs_vector_t* vector);

        // Function @ vector.h:346:7 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_vector_first(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

        // Function @ vector.h:359:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_vector_sort(ecs_vector_t* vector, ecs_size_t elem_size, short offset, ecs_comparator_t compare_action);

        // Function @ vector.h:370:6 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ecs_vector_memory(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int* allocd, int* used);

        // Function @ vector.h:385:15 (flecs/private/vector.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_vector_t* _ecs_vector_copy(ecs_vector_t* src, ecs_size_t elem_size, short offset);

        // Function @ map.h:49:12 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_map_t* _ecs_map_new(ecs_size_t elem_size, int elem_count);

        // Function @ map.h:58:7 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_map_get(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

        // Function @ map.h:71:7 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_map_get_ptr(ecs_map_t* map, ecs_map_key_t key);

        // Function @ map.h:80:6 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_map_has(ecs_map_t* map, ecs_map_key_t key);

        // Function @ map.h:86:7 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_map_ensure(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

        // Function @ map.h:96:7 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_map_set(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key, void* payload);

        // Function @ map.h:110:6 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_free(ecs_map_t* map);

        // Function @ map.h:117:9 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_map_remove(ecs_map_t* map, ecs_map_key_t key);

        // Function @ map.h:123:6 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_clear(ecs_map_t* map);

        // Function @ map.h:128:9 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_map_count(ecs_map_t* map);

        // Function @ map.h:133:9 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_map_bucket_count(ecs_map_t* map);

        // Function @ map.h:138:16 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_map_iter_t ecs_map_iter(ecs_map_t* map);

        // Function @ map.h:143:7 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_map_next(ecs_map_iter_t* iter, ecs_size_t elem_size, ecs_map_key_t* key);

        // Function @ map.h:153:7 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_map_next_ptr(ecs_map_iter_t* iter, ecs_map_key_t* key);

        // Function @ map.h:162:6 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_grow(ecs_map_t* map, int elem_count);

        // Function @ map.h:168:6 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_set_size(ecs_map_t* map, int elem_count);

        // Function @ map.h:174:12 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_map_t* ecs_map_copy(ecs_map_t* map);

        // Function @ map.h:179:6 (flecs/private/map.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_map_memory(ecs_map_t* map, int* allocd, int* used);

        // Function @ strbuf.h:86:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_append(ecs_strbuf_t* buffer, CString fmt);

        // Function @ strbuf.h:94:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_vappend(ecs_strbuf_t* buffer, CString fmt, nint args);

        // Function @ strbuf.h:102:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr(ecs_strbuf_t* buffer, CString str);

        // Function @ strbuf.h:109:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendch(ecs_strbuf_t* buffer, CChar ch);

        // Function @ strbuf.h:116:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendflt(ecs_strbuf_t* buffer, double v, CChar nan_delim);

        // Function @ strbuf.h:124:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_mergebuff(ecs_strbuf_t* dst_buffer, ecs_strbuf_t* src_buffer);

        // Function @ strbuf.h:131:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr_zerocpy(ecs_strbuf_t* buffer, CString str);

        // Function @ strbuf.h:138:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstr_zerocpy_const(ecs_strbuf_t* buffer, CString str);

        // Function @ strbuf.h:145:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_appendstrn(ecs_strbuf_t* buffer, CString str, int n);

        // Function @ strbuf.h:152:7 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_strbuf_get(ecs_strbuf_t* buffer);

        // Function @ strbuf.h:157:7 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_strbuf_get_small(ecs_strbuf_t* buffer);

        // Function @ strbuf.h:162:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_reset(ecs_strbuf_t* buffer);

        // Function @ strbuf.h:167:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_list_push(ecs_strbuf_t* buffer, CString list_open, CString separator);

        // Function @ strbuf.h:174:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_list_pop(ecs_strbuf_t* buffer, CString list_close);

        // Function @ strbuf.h:180:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_strbuf_list_next(ecs_strbuf_t* buffer);

        // Function @ strbuf.h:185:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_list_append(ecs_strbuf_t* buffer, CString fmt);

        // Function @ strbuf.h:192:6 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_strbuf_list_appendstr(ecs_strbuf_t* buffer, CString str);

        // Function @ strbuf.h:197:9 (flecs/private/strbuf.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_strbuf_written(ecs_strbuf_t* buffer);

        // Function @ os_api.h:273:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_init();

        // Function @ os_api.h:276:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_fini();

        // Function @ os_api.h:279:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_set_api(ecs_os_api_t* os_api);

        // Function @ os_api.h:283:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_set_api_defaults();

        // Function @ os_api.h:407:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_enable_high_timer_resolution(CBool enable);

        // Function @ os_api.h:411:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_dbg(CString file, int line, CString msg);

        // Function @ os_api.h:414:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_trace(CString file, int line, CString msg);

        // Function @ os_api.h:417:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_warn(CString file, int line, CString msg);

        // Function @ os_api.h:420:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_err(CString file, int line, CString msg);

        // Function @ os_api.h:423:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_os_fatal(CString file, int line, CString msg);

        // Function @ os_api.h:426:13 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_os_strerror(int err);

        // Function @ os_api.h:442:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_sleepf(double t);

        // Function @ os_api.h:447:8 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double ecs_time_measure(ecs_time_t* start);

        // Function @ os_api.h:452:12 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_time_t ecs_time_sub(ecs_time_t t1, ecs_time_t t2);

        // Function @ os_api.h:458:8 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double ecs_time_to_double(ecs_time_t t);

        // Function @ os_api.h:462:7 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_os_memdup(void* src, ecs_size_t size);

        // Function @ os_api.h:468:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_heap();

        // Function @ os_api.h:472:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_threading();

        // Function @ os_api.h:476:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_time();

        // Function @ os_api.h:480:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_logging();

        // Function @ os_api.h:484:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_dl();

        // Function @ os_api.h:488:6 (flecs/os_api.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_os_has_modules();

        // Function @ api_support.h:45:7 (flecs/private/api_support.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_module_path_from_c(CString c_name);

        // Function @ api_support.h:49:6 (flecs/private/api_support.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_component_has_actions(ecs_world_t* world, ecs_entity_t component);

        // Function @ api_support.h:57:6 (flecs/private/api_support.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_identifier_is_0(CString id);

        // Function @ api_support.h:60:13 (flecs/private/api_support.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_identifier_is_var(CString id);

        // Function @ api_support.h:67:6 (flecs/private/api_support.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_default_ctor(ecs_world_t* world, ecs_entity_t component, ecs_entity_t* entity_ptr, void* ptr, ulong size, int count, void* ctx);

        // Function @ sparse.h:47:15 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_sparse_t* _flecs_sparse_new(ecs_size_t elem_size);

        // Function @ sparse.h:56:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_set_id_source(ecs_sparse_t* sparse, ulong* id_source);

        // Function @ sparse.h:62:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_free(ecs_sparse_t* sparse);

        // Function @ sparse.h:67:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_clear(ecs_sparse_t* sparse);

        // Function @ sparse.h:72:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_sparse_add(ecs_sparse_t* sparse, ecs_size_t elem_size);

        // Function @ sparse.h:81:10 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong flecs_sparse_last_id(ecs_sparse_t* sparse);

        // Function @ sparse.h:86:10 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong flecs_sparse_new_id(ecs_sparse_t* sparse);

        // Function @ sparse.h:93:17 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong* flecs_sparse_new_ids(ecs_sparse_t* sparse, int count);

        // Function @ sparse.h:99:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_remove(ecs_sparse_t* sparse, ulong id);

        // Function @ sparse.h:105:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_sparse_remove_get(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        // Function @ sparse.h:115:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool flecs_sparse_exists(ecs_sparse_t* sparse, ulong id);

        // Function @ sparse.h:121:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool flecs_sparse_is_alive(ecs_sparse_t* sparse, ulong id);

        // Function @ sparse.h:127:10 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong flecs_sparse_get_alive(ecs_sparse_t* sparse, ulong id);

        // Function @ sparse.h:134:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_sparse_get_dense(ecs_sparse_t* sparse, ecs_size_t elem_size, int index);

        // Function @ sparse.h:144:9 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int flecs_sparse_count(ecs_sparse_t* sparse);

        // Function @ sparse.h:149:9 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int flecs_sparse_size(ecs_sparse_t* sparse);

        // Function @ sparse.h:155:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_sparse_get(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        // Function @ sparse.h:165:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_sparse_get_any(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        // Function @ sparse.h:175:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_sparse_ensure(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        // Function @ sparse.h:185:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_sparse_set(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id, void* value);

        // Function @ sparse.h:196:17 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong* flecs_sparse_ids(ecs_sparse_t* sparse);

        // Function @ sparse.h:201:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_set_size(ecs_sparse_t* sparse, int elem_count);

        // Function @ sparse.h:207:15 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_sparse_t* flecs_sparse_copy(ecs_sparse_t* src);

        // Function @ sparse.h:212:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_restore(ecs_sparse_t* dst, ecs_sparse_t* src);

        // Function @ sparse.h:218:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_memory(ecs_sparse_t* sparse, int* allocd, int* used);

        // Function @ sparse.h:224:19 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_sparse_iter_t _flecs_sparse_iter(ecs_sparse_t* sparse, ecs_size_t elem_size);

        // Function @ sparse.h:247:15 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_sparse_t* _ecs_sparse_new(ecs_size_t elem_size);

        // Function @ sparse.h:254:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_sparse_add(ecs_sparse_t* sparse, ecs_size_t elem_size);

        // Function @ sparse.h:262:10 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong ecs_sparse_last_id(ecs_sparse_t* sparse);

        // Function @ sparse.h:266:9 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_sparse_count(ecs_sparse_t* sparse);

        // Function @ sparse.h:271:6 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_sparse_set_generation(ecs_sparse_t* sparse, ulong id);

        // Function @ sparse.h:276:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_sparse_get_dense(ecs_sparse_t* sparse, ecs_size_t elem_size, int index);

        // Function @ sparse.h:285:7 (flecs/private/sparse.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _ecs_sparse_get(ecs_sparse_t* sparse, ecs_size_t elem_size, ulong id);

        // Function @ hashmap.h:39:15 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_hashmap_t _flecs_hashmap_new(ecs_size_t key_size, ecs_size_t value_size, ecs_hash_value_action_t hash, ecs_compare_action_t compare);

        // Function @ hashmap.h:49:6 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void flecs_hashmap_free(ecs_hashmap_t map);

        // Function @ hashmap.h:53:7 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_hashmap_get(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size);

        // Function @ hashmap.h:63:24 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern flecs_hashmap_result_t _flecs_hashmap_ensure(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size);

        // Function @ hashmap.h:73:6 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _flecs_hashmap_set(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size, void* value);

        // Function @ hashmap.h:84:6 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _flecs_hashmap_remove(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size);

        // Function @ hashmap.h:94:6 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _flecs_hashmap_remove_w_hash(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size, ulong hash);

        // Function @ hashmap.h:105:15 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_hashmap_t flecs_hashmap_copy(ecs_hashmap_t src);

        // Function @ hashmap.h:109:22 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern flecs_hashmap_iter_t flecs_hashmap_iter(ecs_hashmap_t map);

        // Function @ hashmap.h:113:7 (flecs/private/hashmap.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _flecs_hashmap_next(flecs_hashmap_iter_t* it, ecs_size_t key_size, void* key_out, ecs_size_t value_size);

        // Function @ flecs.h:1172:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_init();

        // Function @ flecs.h:1179:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_mini();

        // Function @ flecs.h:1189:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_init_w_args(int argc, CString* argv);

        // Function @ flecs.h:1200:5
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_fini(ecs_world_t* world);

        // Function @ flecs.h:1209:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_fini(ecs_world_t* world);

        // Function @ flecs.h:1220:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_atfini(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

        // Function @ flecs.h:1233:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_run_post_frame(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

        // Function @ flecs.h:1245:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_quit(ecs_world_t* world);

        // Function @ flecs.h:1253:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_should_quit(ecs_world_t* world);

        // Function @ flecs.h:1263:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_component_actions_w_id(ecs_world_t* world, ecs_id_t id, EcsComponentLifecycle* actions);

        // Function @ flecs.h:1276:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_context(ecs_world_t* world, void* ctx);

        // Function @ flecs.h:1288:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_context(ecs_world_t* world);

        // Function @ flecs.h:1298:25
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_info_t* ecs_get_world_info(ecs_world_t* world);

        // Function @ flecs.h:1310:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_dim(ecs_world_t* world, int entity_count);

        // Function @ flecs.h:1330:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_entity_range(ecs_world_t* world, ecs_entity_t id_start, ecs_entity_t id_end);

        // Function @ flecs.h:1342:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_entity_generation(ecs_world_t* world, ecs_entity_t entity_with_generation);

        // Function @ flecs.h:1357:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_enable_range_check(ecs_world_t* world, CBool enable);

        // Function @ flecs.h:1378:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_enable_locking(ecs_world_t* world, CBool enable);

        // Function @ flecs.h:1388:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_lock(ecs_world_t* world);

        // Function @ flecs.h:1397:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_unlock(ecs_world_t* world);

        // Function @ flecs.h:1411:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_begin_wait(ecs_world_t* world);

        // Function @ flecs.h:1421:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_end_wait(ecs_world_t* world);

        // Function @ flecs.h:1435:16
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_measure_frame_time(ecs_world_t* world, CBool enable);

        // Function @ flecs.h:1449:16
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_measure_system_time(ecs_world_t* world, CBool enable);

        // Function @ flecs.h:1469:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_target_fps(ecs_world_t* world, float fps);

        // Function @ flecs.h:1475:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_get_threads(ecs_world_t* world);

        // Function @ flecs.h:1489:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_force_aperiodic(ecs_world_t* world);

        // Function @ flecs.h:1506:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_id(ecs_world_t* world);

        // Function @ flecs.h:1524:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_low_id(ecs_world_t* world);

        // Function @ flecs.h:1536:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_w_id(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:1559:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_entity_init(ecs_world_t* world, ecs_entity_desc_t* desc);

        // Function @ flecs.h:1590:21
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_bulk_init(ecs_world_t* world, ecs_bulk_desc_t* desc);

        // Function @ flecs.h:1608:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_component_init(ecs_world_t* world, ecs_component_desc_t* desc);

        // Function @ flecs.h:1631:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_type_init(ecs_world_t* world, ecs_type_desc_t* desc);

        // Function @ flecs.h:1645:21
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_bulk_new_w_id(ecs_world_t* world, ecs_id_t id, int count);

        // Function @ flecs.h:1662:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_clone(ecs_world_t* world, ecs_entity_t dst, ecs_entity_t src, CBool copy_value);

        // Function @ flecs.h:1685:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_add_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:1700:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_remove_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:1727:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_enable_component_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool enable);

        // Function @ flecs.h:1744:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_component_enabled_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:1765:10
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t ecs_make_pair(ecs_entity_t relation, ecs_entity_t @object);

        // Function @ flecs.h:1786:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_clear(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:1800:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_delete(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:1812:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_delete_with(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:1824:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_remove_all(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:1846:13
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:1864:13
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_ref_id(ecs_world_t* world, ecs_ref_t* @ref, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:1880:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_case(ecs_world_t* world, ecs_entity_t e, ecs_entity_t sw);

        // Function @ flecs.h:1908:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_mut_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool* is_added);

        // Function @ flecs.h:1928:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_emplace_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:1944:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_modified_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:1963:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, ulong size, void* ptr);

        // Function @ flecs.h:1998:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_valid(ecs_world_t* world, ecs_entity_t e);

        // Function @ flecs.h:2011:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_alive(ecs_world_t* world, ecs_entity_t e);

        // Function @ flecs.h:2021:10
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t ecs_strip_generation(ecs_entity_t e);

        // Function @ flecs.h:2041:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_alive(ecs_world_t* world, ecs_entity_t e);

        // Function @ flecs.h:2066:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_ensure(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:2089:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_ensure_id(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:2101:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_exists(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:2112:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_type_t ecs_get_type(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:2123:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_get_table(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:2136:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_get_storage_table(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:2160:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_typeid(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:2165:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_id_is_tag(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:2177:13
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_get_name(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:2189:13
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_get_symbol(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:2205:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_name(ecs_world_t* world, ecs_entity_t entity, CString name);

        // Function @ flecs.h:2222:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_symbol(ecs_world_t* world, ecs_entity_t entity, CString symbol);

        // Function @ flecs.h:2234:13
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_role_str(ecs_id_t role);

        // Function @ flecs.h:2245:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_id_str(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:2257:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_id_str_buf(ecs_world_t* world, ecs_id_t id, ecs_strbuf_t* buf);

        // Function @ flecs.h:2270:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_type_str(ecs_world_t* world, ecs_type_t type);

        // Function @ flecs.h:2284:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_has_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

        // Function @ flecs.h:2304:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_object(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, int index);

        // Function @ flecs.h:2329:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_object_for_id(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, ecs_id_t id);

        // Function @ flecs.h:2345:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_enable(ecs_world_t* world, ecs_entity_t entity, CBool enabled);

        // Function @ flecs.h:2358:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_count_id(ecs_world_t* world, ecs_id_t entity);

        // Function @ flecs.h:2379:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup(ecs_world_t* world, CString name);

        // Function @ flecs.h:2393:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup_child(ecs_world_t* world, ecs_entity_t parent, CString name);

        // Function @ flecs.h:2417:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString path, CString sep, CString prefix, CBool recursive);

        // Function @ flecs.h:2433:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_lookup_symbol(ecs_world_t* world, CString symbol, CBool lookup_as_path);

        // Function @ flecs.h:2440:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_use(ecs_world_t* world, ecs_entity_t entity, CString name);

        // Function @ flecs.h:2473:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_get_path_w_sep(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t child, CString sep, CString prefix);

        // Function @ flecs.h:2490:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_get_path_w_sep_buf(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t child, CString sep, CString prefix, ecs_strbuf_t* buf);

        // Function @ flecs.h:2514:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_new_from_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString path, CString sep, CString prefix);

        // Function @ flecs.h:2536:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_add_path_w_sep(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t parent, CString path, CString sep, CString prefix);

        // Function @ flecs.h:2564:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_scope(ecs_world_t* world, ecs_entity_t scope);

        // Function @ flecs.h:2576:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_scope(ecs_world_t* world);

        // Function @ flecs.h:2587:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_with(ecs_world_t* world, ecs_id_t id);

        // Function @ flecs.h:2598:10
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_id_t ecs_get_with(ecs_world_t* world);

        // Function @ flecs.h:2611:13
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_set_name_prefix(ecs_world_t* world, CString prefix);

        // Function @ flecs.h:2640:15
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_set_lookup_path(ecs_world_t* world, ecs_entity_t* lookup_path);

        // Function @ flecs.h:2651:15
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t* ecs_get_lookup_path(ecs_world_t* world);

        // Function @ flecs.h:2675:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_term_iter(ecs_world_t* world, ecs_term_t* term);

        // Function @ flecs.h:2688:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_term_chain_iter(ecs_iter_t* it, ecs_term_t* term);

        // Function @ flecs.h:2702:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_next(ecs_iter_t* it);

        // Function @ flecs.h:2711:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_id_is_set(ecs_term_id_t* id);

        // Function @ flecs.h:2726:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_is_initialized(ecs_term_t* term);

        // Function @ flecs.h:2753:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_is_trivial(ecs_term_t* term);

        // Function @ flecs.h:2776:5
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_term_finalize(ecs_world_t* world, CString name, ecs_term_t* term);

        // Function @ flecs.h:2790:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_term_t ecs_term_copy(ecs_term_t* src);

        // Function @ flecs.h:2804:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_term_t ecs_term_move(ecs_term_t* src);

        // Function @ flecs.h:2814:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_term_fini(ecs_term_t* term);

        // Function @ flecs.h:2825:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_match(ecs_id_t id, ecs_id_t pattern);

        // Function @ flecs.h:2835:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_is_pair(ecs_id_t id);

        // Function @ flecs.h:2844:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_id_is_wildcard(ecs_id_t id);

        // Function @ flecs.h:2888:5
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_filter_init(ecs_world_t* world, ecs_filter_t* filter_out, ecs_filter_desc_t* desc);

        // Function @ flecs.h:2899:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_filter_fini(ecs_filter_t* filter);

        // Function @ flecs.h:2916:5
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_filter_finalize(ecs_world_t* world, ecs_filter_t* filter);

        // Function @ flecs.h:2925:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_term_str(ecs_world_t* world, ecs_term_t* term);

        // Function @ flecs.h:2934:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_filter_str(ecs_world_t* world, ecs_filter_t* filter);

        // Function @ flecs.h:2948:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_filter_iter(ecs_world_t* world, ecs_filter_t* filter);

        // Function @ flecs.h:2961:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_filter_chain_iter(ecs_iter_t* it, ecs_filter_t* filter);

        // Function @ flecs.h:2985:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_filter_pivot_term(ecs_world_t* world, ecs_filter_t* filter);

        // Function @ flecs.h:2999:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_filter_next(ecs_iter_t* it);

        // Function @ flecs.h:3006:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_filter_next_instanced(ecs_iter_t* it);

        // Function @ flecs.h:3011:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_filter_move(ecs_filter_t* dst, ecs_filter_t* src);

        // Function @ flecs.h:3017:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_filter_copy(ecs_filter_t* dst, ecs_filter_t* src);

        // Function @ flecs.h:3063:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_query_t* ecs_query_init(ecs_world_t* world, ecs_query_desc_t* desc);

        // Function @ flecs.h:3075:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_fini(ecs_query_t* query);

        // Function @ flecs.h:3085:21
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_filter_t* ecs_query_get_filter(ecs_query_t* query);

        // Function @ flecs.h:3116:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_query_iter(ecs_world_t* world, ecs_query_t* query);

        // Function @ flecs.h:3130:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_next(ecs_iter_t* iter);

        // Function @ flecs.h:3137:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_next_instanced(ecs_iter_t* iter);

        // Function @ flecs.h:3170:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_changed(ecs_query_t* query, ecs_iter_t* it);

        // Function @ flecs.h:3185:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_query_skip(ecs_iter_t* it);

        // Function @ flecs.h:3197:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_query_orphaned(ecs_query_t* query);

        // Function @ flecs.h:3222:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_trigger_init(ecs_world_t* world, ecs_trigger_desc_t* desc);

        // Function @ flecs.h:3235:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_trigger_ctx(ecs_world_t* world, ecs_entity_t trigger);

        // Function @ flecs.h:3249:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_trigger_binding_ctx(ecs_world_t* world, ecs_entity_t trigger);

        // Function @ flecs.h:3321:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_emit(ecs_world_t* world, ecs_event_desc_t* desc);

        // Function @ flecs.h:3342:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_observer_init(ecs_world_t* world, ecs_observer_desc_t* desc);

        // Function @ flecs.h:3356:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_observer_default_run_action(ecs_iter_t* it);

        // Function @ flecs.h:3360:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_observer_ctx(ecs_world_t* world, ecs_entity_t observer);

        // Function @ flecs.h:3365:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_observer_binding_ctx(ecs_world_t* world, ecs_entity_t observer);

        // Function @ flecs.h:3399:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_iter_poly(ecs_world_t* world, ecs_poly_t* poly, ecs_iter_t* iter, ecs_term_t* filter);

        // Function @ flecs.h:3419:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_iter_next(ecs_iter_t* it);

        // Function @ flecs.h:3435:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_iter_fini(ecs_iter_t* it);

        // Function @ flecs.h:3450:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_iter_count(ecs_iter_t* it);

        // Function @ flecs.h:3466:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_iter_is_true(ecs_iter_t* it);

        // Function @ flecs.h:3485:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_page_iter(ecs_iter_t* it, int offset, int limit);

        // Function @ flecs.h:3497:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_page_next(ecs_iter_t* it);

        // Function @ flecs.h:3521:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_worker_iter(ecs_iter_t* it, int index, int count);

        // Function @ flecs.h:3533:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_worker_next(ecs_iter_t* it);

        // Function @ flecs.h:3560:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_term_w_size(ecs_iter_t* it, ulong size, int index);

        // Function @ flecs.h:3574:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_is_readonly(ecs_iter_t* it, int index);

        // Function @ flecs.h:3589:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_is_writeonly(ecs_iter_t* it, int index);

        // Function @ flecs.h:3600:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_is_set(ecs_iter_t* it, int index);

        // Function @ flecs.h:3614:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_term_is_owned(ecs_iter_t* it, int index);

        // Function @ flecs.h:3630:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_iter_str(ecs_iter_t* it);

        // Function @ flecs.h:3652:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_iter_find_column(ecs_iter_t* it, ecs_id_t id);

        // Function @ flecs.h:3684:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_iter_column_w_size(ecs_iter_t* it, ulong size, int index);

        // Function @ flecs.h:3698:8
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong ecs_iter_column_size(ecs_iter_t* it, int index);

        // Function @ flecs.h:3729:13
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float ecs_frame_begin(ecs_world_t* world, float delta_time);

        // Function @ flecs.h:3740:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_frame_end(ecs_world_t* world);

        // Function @ flecs.h:3763:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_staging_begin(ecs_world_t* world);

        // Function @ flecs.h:3776:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_staging_end(ecs_world_t* world);

        // Function @ flecs.h:3790:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_merge(ecs_world_t* world);

        // Function @ flecs.h:3803:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_defer_begin(ecs_world_t* world);

        // Function @ flecs.h:3812:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_is_deferred(ecs_world_t* world);

        // Function @ flecs.h:3824:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_defer_end(ecs_world_t* world);

        // Function @ flecs.h:3844:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_automerge(ecs_world_t* world, CBool automerge);

        // Function @ flecs.h:3862:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_stages(ecs_world_t* world, int stages);

        // Function @ flecs.h:3873:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_get_stage_count(ecs_world_t* world);

        // Function @ flecs.h:3884:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_get_stage_id(ecs_world_t* world);

        // Function @ flecs.h:3903:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_get_stage(ecs_world_t* world, int stage_id);

        // Function @ flecs.h:3913:20
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_get_world(ecs_poly_t* world);

        // Function @ flecs.h:3924:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_stage_is_readonly(ecs_world_t* world);

        // Function @ flecs.h:3946:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_world_t* ecs_async_stage_new(ecs_world_t* world);

        // Function @ flecs.h:3956:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_async_stage_free(ecs_world_t* stage);

        // Function @ flecs.h:3966:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_stage_is_async(ecs_world_t* stage);

        // Function @ flecs.h:3993:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_search(ecs_world_t* world, ecs_table_t* table, ecs_id_t id, ecs_id_t* id_out);

        // Function @ flecs.h:4030:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_search_offset(ecs_world_t* world, ecs_table_t* table, int offset, ecs_id_t id, ecs_id_t* id_out);

        // Function @ flecs.h:4075:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_search_relation(ecs_world_t* world, ecs_table_t* table, int offset, ecs_id_t id, ecs_entity_t rel, int min_depth, int max_depth, ecs_entity_t* subject_out, ecs_id_t* id_out, ecs_table_record_t** tr_out);

        // Function @ flecs.h:4104:12
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_type_t ecs_table_get_type(ecs_table_t* table);

        // Function @ flecs.h:4113:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_table_get_storage_table(ecs_table_t* table);

        // Function @ flecs.h:4122:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_storage_count(ecs_table_t* table);

        // Function @ flecs.h:4126:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_type_to_storage_index(ecs_table_t* table, int index);

        // Function @ flecs.h:4131:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_storage_to_type_index(ecs_table_t* table, int index);

        // Function @ flecs.h:4144:9
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_table_count(ecs_table_t* table);

        // Function @ flecs.h:4157:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_table_add_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

        // Function @ flecs.h:4172:14
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_table_t* ecs_table_remove_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

        // Function @ flecs.h:4193:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_table_lock(ecs_world_t* world, ecs_table_t* table);

        // Function @ flecs.h:4204:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_table_unlock(ecs_world_t* world, ecs_table_t* table);

        // Function @ flecs.h:4216:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_table_has_module(ecs_table_t* table);

        // Function @ flecs.h:4242:6
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_commit(ecs_world_t* world, ecs_entity_t entity, ecs_record_t* @record, ecs_table_t* table, ecs_ids_t* added, ecs_ids_t* removed);

        // Function @ flecs.h:4252:15
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_record_t* ecs_record_find(ecs_world_t* world, ecs_entity_t entity);

        // Function @ flecs.h:4258:7
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_record_get_column(ecs_record_t* r, int column, ulong c_size);

        // Function @ app.h:63:5 (flecs/addons/app.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_run(ecs_world_t* world, ecs_app_desc_t* desc);

        // Function @ app.h:76:5 (flecs/addons/app.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_run_frame(ecs_world_t* world, ecs_app_desc_t* desc);

        // Function @ app.h:86:5 (flecs/addons/app.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_set_run_action(ecs_app_run_action_t callback);

        // Function @ app.h:95:5 (flecs/addons/app.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_app_set_frame_action(ecs_app_frame_action_t callback);

        // Function @ rest.h:160:6 (flecs/addons/rest.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsRestImport(ecs_world_t* world);

        // Function @ timer.h:72:14 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_timeout(ecs_world_t* world, ecs_entity_t tick_source, float timeout);

        // Function @ timer.h:97:13 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float ecs_get_timeout(ecs_world_t* world, ecs_entity_t tick_source);

        // Function @ timer.h:119:14 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_interval(ecs_world_t* world, ecs_entity_t tick_source, float interval);

        // Function @ timer.h:133:13 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float ecs_get_interval(ecs_world_t* world, ecs_entity_t tick_source);

        // Function @ timer.h:147:6 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_start_timer(ecs_world_t* world, ecs_entity_t tick_source);

        // Function @ timer.h:159:6 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_stop_timer(ecs_world_t* world, ecs_entity_t tick_source);

        // Function @ timer.h:194:14 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_set_rate(ecs_world_t* world, ecs_entity_t tick_source, int rate, ecs_entity_t source);

        // Function @ timer.h:223:6 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_tick_source(ecs_world_t* world, ecs_entity_t system, ecs_entity_t tick_source);

        // Function @ timer.h:234:6 (flecs/addons/timer.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsTimerImport(ecs_world_t* world);

        // Function @ pipeline.h:62:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_pipeline(ecs_world_t* world, ecs_entity_t pipeline);

        // Function @ pipeline.h:73:14 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_get_pipeline(ecs_world_t* world);

        // Function @ pipeline.h:95:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_progress(ecs_world_t* world, float delta_time);

        // Function @ pipeline.h:106:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_time_scale(ecs_world_t* world, float scale);

        // Function @ pipeline.h:116:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_reset_clock(ecs_world_t* world);

        // Function @ pipeline.h:138:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_run_pipeline(ecs_world_t* world, ecs_entity_t pipeline, float delta_time);

        // Function @ pipeline.h:154:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_deactivate_systems(ecs_world_t* world);

        // Function @ pipeline.h:168:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_threads(ecs_world_t* world, int threads);

        // Function @ pipeline.h:177:6 (flecs/addons/pipeline.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsPipelineImport(ecs_world_t* world);

        // Function @ system.h:142:14 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_system_init(ecs_world_t* world, ecs_system_desc_t* desc);

        // Function @ system.h:193:14 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_run(ecs_world_t* world, ecs_entity_t system, float delta_time, void* param);

        // Function @ system.h:210:14 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_run_worker(ecs_world_t* world, ecs_entity_t system, int stage_current, int stage_count, float delta_time, void* param);

        // Function @ system.h:239:14 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_run_w_filter(ecs_world_t* world, ecs_entity_t system, float delta_time, int offset, int limit, void* param);

        // Function @ system.h:257:14 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_query_t* ecs_system_get_query(ecs_world_t* world, ecs_entity_t system);

        // Function @ system.h:270:7 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_system_ctx(ecs_world_t* world, ecs_entity_t system);

        // Function @ system.h:284:7 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_get_system_binding_ctx(ecs_world_t* world, ecs_entity_t system);

        // Function @ system.h:294:6 (flecs/addons/system.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsSystemImport(ecs_world_t* world);

        // Function @ coredoc.h:29:6 (flecs/addons/coredoc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsCoreDocImport(ecs_world_t* world);

        // Function @ doc.h:42:6 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_name(ecs_world_t* world, ecs_entity_t entity, CString name);

        // Function @ doc.h:54:6 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_brief(ecs_world_t* world, ecs_entity_t entity, CString description);

        // Function @ doc.h:66:6 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_detail(ecs_world_t* world, ecs_entity_t entity, CString description);

        // Function @ doc.h:78:6 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_doc_set_link(ecs_world_t* world, ecs_entity_t entity, CString link);

        // Function @ doc.h:97:13 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_name(ecs_world_t* world, ecs_entity_t entity);

        // Function @ doc.h:108:13 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_brief(ecs_world_t* world, ecs_entity_t entity);

        // Function @ doc.h:119:13 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_detail(ecs_world_t* world, ecs_entity_t entity);

        // Function @ doc.h:130:13 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_doc_get_link(ecs_world_t* world, ecs_entity_t entity);

        // Function @ doc.h:136:6 (flecs/addons/doc.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsDocImport(ecs_world_t* world);

        // Function @ json.h:40:13 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_json(ecs_world_t* world, CString ptr, ecs_entity_t type, void* data_out, ecs_parse_json_desc_t* desc);

        // Function @ json.h:62:7 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_array_to_json(ecs_world_t* world, ecs_entity_t type, void* data, int count);

        // Function @ json.h:79:5 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_array_to_json_buf(ecs_world_t* world, ecs_entity_t type, void* data, int count, ecs_strbuf_t* buf_out);

        // Function @ json.h:95:7 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_ptr_to_json(ecs_world_t* world, ecs_entity_t type, void* data);

        // Function @ json.h:110:5 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_ptr_to_json_buf(ecs_world_t* world, ecs_entity_t type, void* data, ecs_strbuf_t* buf_out);

        // Function @ json.h:127:7 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_type_info_to_json(ecs_world_t* world, ecs_entity_t type);

        // Function @ json.h:140:5 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_type_info_to_json_buf(ecs_world_t* world, ecs_entity_t type, ecs_strbuf_t* buf_out);

        // Function @ json.h:171:7 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_entity_to_json(ecs_world_t* world, ecs_entity_t entity, ecs_entity_to_json_desc_t* desc);

        // Function @ json.h:185:5 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_entity_to_json_buf(ecs_world_t* world, ecs_entity_t entity, ecs_strbuf_t* buf_out, ecs_entity_to_json_desc_t* desc);

        // Function @ json.h:218:7 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_iter_to_json(ecs_world_t* world, ecs_iter_t* iter, ecs_iter_to_json_desc_t* desc);

        // Function @ json.h:232:5 (flecs/addons/json.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_iter_to_json_buf(ecs_world_t* world, ecs_iter_t* iter, ecs_strbuf_t* buf_out, ecs_iter_to_json_desc_t* desc);

        // Function @ units.h:169:6 (flecs/addons/units.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsUnitsImport(ecs_world_t* world);

        // Function @ meta.h:354:19 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_meta_cursor_t ecs_meta_cursor(ecs_world_t* world, ecs_entity_t type, void* ptr);

        // Function @ meta.h:361:7 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ecs_meta_get_ptr(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:366:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_next(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:371:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_move(ecs_meta_cursor_t* cursor, int pos);

        // Function @ meta.h:377:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_member(ecs_meta_cursor_t* cursor, CString name);

        // Function @ meta.h:383:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_push(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:388:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_pop(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:393:6 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_meta_is_collection(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:398:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_meta_get_type(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:403:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_meta_get_unit(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:408:13 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_meta_get_member(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:417:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_bool(ecs_meta_cursor_t* cursor, CBool value);

        // Function @ meta.h:423:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_char(ecs_meta_cursor_t* cursor, CChar value);

        // Function @ meta.h:429:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_int(ecs_meta_cursor_t* cursor, long value);

        // Function @ meta.h:435:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_uint(ecs_meta_cursor_t* cursor, ulong value);

        // Function @ meta.h:441:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_float(ecs_meta_cursor_t* cursor, double value);

        // Function @ meta.h:447:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_string(ecs_meta_cursor_t* cursor, CString value);

        // Function @ meta.h:453:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_string_literal(ecs_meta_cursor_t* cursor, CString value);

        // Function @ meta.h:459:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_entity(ecs_meta_cursor_t* cursor, ecs_entity_t value);

        // Function @ meta.h:465:5 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_set_null(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:473:6 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_meta_get_bool(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:478:6 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CChar ecs_meta_get_char(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:483:9 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long ecs_meta_get_int(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:488:10 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong ecs_meta_get_uint(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:493:8 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double ecs_meta_get_float(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:501:13 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_meta_get_string(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:507:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_meta_get_entity(ecs_meta_cursor_t* cursor);

        // Function @ meta.h:521:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_primitive_init(ecs_world_t* world, ecs_primitive_desc_t* desc);

        // Function @ meta.h:533:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_enum_init(ecs_world_t* world, ecs_enum_desc_t* desc);

        // Function @ meta.h:546:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_bitmask_init(ecs_world_t* world, ecs_bitmask_desc_t* desc);

        // Function @ meta.h:560:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_array_init(ecs_world_t* world, ecs_array_desc_t* desc);

        // Function @ meta.h:573:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_vector_init(ecs_world_t* world, ecs_vector_desc_t* desc);

        // Function @ meta.h:586:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_struct_init(ecs_world_t* world, ecs_struct_desc_t* desc);

        // Function @ meta.h:620:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_unit_init(ecs_world_t* world, ecs_unit_desc_t* desc);

        // Function @ meta.h:637:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_unit_prefix_init(ecs_world_t* world, ecs_unit_prefix_desc_t* desc);

        // Function @ meta.h:643:14 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_quantity_init(ecs_world_t* world, ecs_entity_desc_t* desc);

        // Function @ meta.h:649:6 (flecs/addons/meta.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlecsMetaImport(ecs_world_t* world);

        // Function @ expr.h:57:7 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_chresc(CString @out, CChar @in, CChar delimiter);

        // Function @ expr.h:69:13 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_chrparse(CString @in, CString @out);

        // Function @ expr.h:86:12 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_size_t ecs_stresc(CString @out, ecs_size_t size, CChar delimiter, CString @in);

        // Function @ expr.h:101:7 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_astresc(CChar delimiter, CString @in);

        // Function @ expr.h:128:13 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_expr(ecs_world_t* world, CString ptr, ecs_entity_t type, void* data_out, ecs_parse_expr_desc_t* desc);

        // Function @ expr.h:145:7 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_ptr_to_expr(ecs_world_t* world, ecs_entity_t type, void* data);

        // Function @ expr.h:160:5 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_ptr_to_expr_buf(ecs_world_t* world, ecs_entity_t type, void* data, ecs_strbuf_t* buf);

        // Function @ expr.h:178:5 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_primitive_to_expr_buf(ecs_world_t* world, ecs_primitive_kind_t kind, void* data, ecs_strbuf_t* buf);

        // Function @ expr.h:195:13 (flecs/addons/expr.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_expr_token(CString name, CString expr, CString ptr, CString token);

        // Function @ meta_c.h:67:5 (flecs/addons/meta_c.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_meta_from_desc(ecs_world_t* world, ecs_entity_t component, ecs_type_kind_t kind, CString desc);

        // Function @ plecs.h:57:5 (flecs/addons/plecs.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_plecs_from_str(ecs_world_t* world, CString name, CString str);

        // Function @ plecs.h:72:5 (flecs/addons/plecs.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_plecs_from_file(ecs_world_t* world, CString filename);

        // Function @ rules.h:75:13 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_rule_t* ecs_rule_init(ecs_world_t* world, ecs_filter_desc_t* desc);

        // Function @ rules.h:84:6 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_rule_fini(ecs_rule_t* rule);

        // Function @ rules.h:94:21 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_filter_t* ecs_rule_get_filter(ecs_rule_t* rule);

        // Function @ rules.h:103:9 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_rule_var_count(ecs_rule_t* rule);

        // Function @ rules.h:115:9 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_rule_find_var(ecs_rule_t* rule, CString name);

        // Function @ rules.h:126:13 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_rule_var_name(ecs_rule_t* rule, int var_id);

        // Function @ rules.h:162:6 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_rule_set_var(ecs_iter_t* it, int var_id, ecs_entity_t value);

        // Function @ rules.h:179:14 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_rule_get_var(ecs_iter_t* it, int var_id);

        // Function @ rules.h:193:6 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_rule_var_is_entity(ecs_rule_t* rule, int var_id);

        // Function @ rules.h:208:12 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_rule_iter(ecs_world_t* world, ecs_rule_t* rule);

        // Function @ rules.h:217:6 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_rule_next(ecs_iter_t* it);

        // Function @ rules.h:226:6 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_rule_next_instanced(ecs_iter_t* it);

        // Function @ rules.h:239:7 (flecs/addons/rules.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_rule_str(ecs_rule_t* rule);

        // Function @ snapshot.h:33:17 (flecs/addons/snapshot.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_snapshot_t* ecs_snapshot_take(ecs_world_t* world);

        // Function @ snapshot.h:44:17 (flecs/addons/snapshot.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_snapshot_t* ecs_snapshot_take_w_iter(ecs_iter_t* iter);

        // Function @ snapshot.h:62:6 (flecs/addons/snapshot.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_snapshot_restore(ecs_world_t* world, ecs_snapshot_t* snapshot);

        // Function @ snapshot.h:71:12 (flecs/addons/snapshot.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_iter_t ecs_snapshot_iter(ecs_snapshot_t* snapshot);

        // Function @ snapshot.h:80:6 (flecs/addons/snapshot.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_snapshot_next(ecs_iter_t* iter);

        // Function @ snapshot.h:89:6 (flecs/addons/snapshot.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_snapshot_free(ecs_snapshot_t* snapshot);

        // Function @ stats.h:122:6 (flecs/addons/stats.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_get_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

        // Function @ stats.h:134:6 (flecs/addons/stats.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_dump_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

        // Function @ stats.h:146:6 (flecs/addons/stats.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_get_query_stats(ecs_world_t* world, ecs_query_t* query, ecs_query_stats_t* stats);

        // Function @ stats.h:161:6 (flecs/addons/stats.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_get_system_stats(ecs_world_t* world, ecs_entity_t system, ecs_system_stats_t* stats);

        // Function @ stats.h:177:6 (flecs/addons/stats.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CBool ecs_get_pipeline_stats(ecs_world_t* world, ecs_entity_t pipeline, ecs_pipeline_stats_t* stats);

        // Function @ stats.h:187:6 (flecs/addons/stats.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_pipeline_stats_fini(ecs_pipeline_stats_t* stats);

        // Function @ stats.h:193:6 (flecs/addons/stats.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_gauge_reduce(ecs_gauge_t* dst, int t_dst, ecs_gauge_t* src, int t_src);

        // Function @ parser.h:25:13 (flecs/addons/parser.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_whitespace(CString ptr);

        // Function @ parser.h:35:13 (flecs/addons/parser.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_eol_and_whitespace(CString ptr);

        // Function @ parser.h:47:13 (flecs/addons/parser.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_digit(CString ptr, CString token);

        // Function @ parser.h:58:13 (flecs/addons/parser.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_fluff(CString ptr, CString* last_comment);

        // Function @ parser.h:72:13 (flecs/addons/parser.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_token(CString name, CString expr, CString ptr, CString token_out);

        // Function @ parser.h:106:7 (flecs/addons/parser.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_parse_term(ecs_world_t* world, CString name, CString expr, CString ptr, ecs_term_t* term_out);

        // Function @ http.h:118:20 (flecs/addons/http.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_http_server_t* ecs_http_server_init(ecs_http_server_desc_t* desc);

        // Function @ http.h:127:6 (flecs/addons/http.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_http_server_fini(ecs_http_server_t* server);

        // Function @ http.h:137:5 (flecs/addons/http.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_http_server_start(ecs_http_server_t* server);

        // Function @ http.h:147:6 (flecs/addons/http.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_http_server_dequeue(ecs_http_server_t* server, float delta_time);

        // Function @ http.h:157:6 (flecs/addons/http.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_http_server_stop(ecs_http_server_t* server);

        // Function @ http.h:167:13 (flecs/addons/http.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_http_get_header(ecs_http_request_t* req, CString name);

        // Function @ http.h:178:13 (flecs/addons/http.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_http_get_param(ecs_http_request_t* req, CString name);

        // Function @ os_api_impl.h:16:6 (flecs/addons/os_api_impl.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_set_os_api_impl();

        // Function @ module.h:39:14 (flecs/addons/module.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_import(ecs_world_t* world, ecs_module_action_t module, CString module_name);

        // Function @ module.h:63:14 (flecs/addons/module.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_import_from_library(ecs_world_t* world, CString library_name, CString module_name);

        // Function @ module.h:71:14 (flecs/addons/module.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_module_init(ecs_world_t* world, ecs_component_desc_t* desc);

        // Function @ flecs_cpp.h:39:7 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_get_type_name(CString type_name, CString func_name, ulong len);

        // Function @ flecs_cpp.h:45:7 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_get_symbol_name(CString symbol_name, CString type_name, ulong len);

        // Function @ flecs_cpp.h:51:7 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_get_constant_name(CString constant_name, CString func_name, ulong len);

        // Function @ flecs_cpp.h:57:13 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CString ecs_cpp_trim_module(ecs_world_t* world, CString type_name);

        // Function @ flecs_cpp.h:62:6 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ecs_cpp_component_validate(ecs_world_t* world, ecs_entity_t id, CString name, ulong size, ulong alignment, CBool implicit_name);

        // Function @ flecs_cpp.h:71:14 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_cpp_component_register(ecs_world_t* world, ecs_entity_t id, CString name, CString symbol, ecs_size_t size, ecs_size_t alignment);

        // Function @ flecs_cpp.h:80:14 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_cpp_component_register_explicit(ecs_world_t* world, ecs_entity_t s_id, ecs_entity_t id, CString name, CString type_name, CString symbol, ulong size, ulong alignment, CBool is_component);

        // Function @ flecs_cpp.h:92:14 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ecs_entity_t ecs_cpp_enum_constant_register(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t id, CString name, int value);

        // Function @ flecs_cpp.h:100:9 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_cpp_reset_count_get();

        // Function @ flecs_cpp.h:103:9 (flecs/addons/flecs_cpp.h)
        [DllImport(LibraryName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ecs_cpp_reset_count_inc();

        // FunctionPointer @ vector.h:90:15 (flecs/private/vector.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_comparator_t
        {
            public delegate* unmanaged<void*, void*, int> Pointer;
        }

        // FunctionPointer @ flecs.h:275:20
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_hash_value_action_t
        {
            public delegate* unmanaged<void*, ulong> Pointer;
        }

        // FunctionPointer @ flecs.h:270:15
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_compare_action_t
        {
            public delegate* unmanaged<void*, void*, int> Pointer;
        }

        // FunctionPointer @ flecs.h:261:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_fini_action_t
        {
            public delegate* unmanaged<ecs_world_t*, void*, void> Pointer;
        }

        // FunctionPointer @ app.h:42:14 (flecs/addons/app.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_app_run_action_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_app_desc_t*, int> Pointer;
        }

        // FunctionPointer @ app.h:47:14 (flecs/addons/app.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_app_frame_action_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_app_desc_t*, int> Pointer;
        }

        // FunctionPointer @ flecs.h:257:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_module_action_t
        {
            public delegate* unmanaged<ecs_world_t*, void> Pointer;
        }

        // FunctionPointer @ os_api.h:54:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_init_t
        {
            public delegate* unmanaged<void> Pointer;
        }

        // FunctionPointer @ os_api.h:58:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_fini_t
        {
            public delegate* unmanaged<void> Pointer;
        }

        // FunctionPointer @ os_api.h:62:9 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_malloc_t
        {
            public delegate* unmanaged<ecs_size_t, void*> Pointer;
        }

        // FunctionPointer @ os_api.h:70:9 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_realloc_t
        {
            public delegate* unmanaged<void*, ecs_size_t, void*> Pointer;
        }

        // FunctionPointer @ os_api.h:75:9 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_calloc_t
        {
            public delegate* unmanaged<ecs_size_t, void*> Pointer;
        }

        // FunctionPointer @ os_api.h:66:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_free_t
        {
            public delegate* unmanaged<void*, void> Pointer;
        }

        // FunctionPointer @ os_api.h:79:9 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_strdup_t
        {
            public delegate* unmanaged<CString, CString> Pointer;
        }

        // FunctionPointer @ os_api.h:88:19 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_thread_new_t
        {
            public delegate* unmanaged<ecs_os_thread_callback_t, void*, ecs_os_thread_t> Pointer;
        }

        // FunctionPointer @ os_api.h:93:9 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_thread_join_t
        {
            public delegate* unmanaged<ecs_os_thread_t, void*> Pointer;
        }

        // FunctionPointer @ os_api.h:98:7 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_ainc_t
        {
            public delegate* unmanaged<int*, int> Pointer;
        }

        // FunctionPointer @ os_api.h:104:18 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_mutex_new_t
        {
            public delegate* unmanaged<ecs_os_mutex_t> Pointer;
        }

        // FunctionPointer @ os_api.h:116:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_mutex_free_t
        {
            public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
        }

        // FunctionPointer @ os_api.h:108:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_mutex_lock_t
        {
            public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
        }

        // FunctionPointer @ os_api.h:121:17 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_cond_new_t
        {
            public delegate* unmanaged<ecs_os_cond_t> Pointer;
        }

        // FunctionPointer @ os_api.h:125:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_cond_free_t
        {
            public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
        }

        // FunctionPointer @ os_api.h:129:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_cond_signal_t
        {
            public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
        }

        // FunctionPointer @ os_api.h:133:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_cond_broadcast_t
        {
            public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
        }

        // FunctionPointer @ os_api.h:137:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_cond_wait_t
        {
            public delegate* unmanaged<ecs_os_cond_t, ecs_os_mutex_t, void> Pointer;
        }

        // FunctionPointer @ os_api.h:142:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_sleep_t
        {
            public delegate* unmanaged<int, int, void> Pointer;
        }

        // FunctionPointer @ os_api.h:155:12 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_now_t
        {
            public delegate* unmanaged<ulong> Pointer;
        }

        // FunctionPointer @ os_api.h:151:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_get_time_t
        {
            public delegate* unmanaged<ecs_time_t*, void> Pointer;
        }

        // FunctionPointer @ os_api.h:147:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_enable_high_timer_resolution_t
        {
            public delegate* unmanaged<CBool, void> Pointer;
        }

        // FunctionPointer @ os_api.h:159:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_log_t
        {
            public delegate* unmanaged<int, CString, int, CString, void> Pointer;
        }

        // FunctionPointer @ os_api.h:167:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_abort_t
        {
            public delegate* unmanaged<void> Pointer;
        }

        // FunctionPointer @ os_api.h:172:15 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_dlopen_t
        {
            public delegate* unmanaged<CString, ecs_os_dl_t> Pointer;
        }

        // FunctionPointer @ os_api.h:176:17 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_dlproc_t
        {
            public delegate* unmanaged<ecs_os_dl_t, CString, ecs_os_proc_t> Pointer;
        }

        // FunctionPointer @ os_api.h:181:8 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_dlclose_t
        {
            public delegate* unmanaged<ecs_os_dl_t, void> Pointer;
        }

        // FunctionPointer @ os_api.h:185:9 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_api_module_to_path_t
        {
            public delegate* unmanaged<CString, CString> Pointer;
        }

        // FunctionPointer @ api_types.h:297:16 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_xtor_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, void*, ulong, int, void*, void> Pointer;
        }

        // FunctionPointer @ api_types.h:307:16 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_copy_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
        }

        // FunctionPointer @ api_types.h:319:16 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_move_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
        }

        // FunctionPointer @ api_types.h:331:16 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_copy_ctor_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_entity_t, EcsComponentLifecycle*, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
        }

        // FunctionPointer @ api_types.h:344:16 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_move_ctor_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_entity_t, EcsComponentLifecycle*, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
        }

        // FunctionPointer @ flecs.h:204:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_iter_action_t
        {
            public delegate* unmanaged<ecs_iter_t*, void> Pointer;
        }

        // FunctionPointer @ flecs.h:231:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_iter_next_action_t
        {
            public delegate* unmanaged<ecs_iter_t*, CBool> Pointer;
        }

        // FunctionPointer @ flecs.h:239:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_iter_fini_action_t
        {
            public delegate* unmanaged<ecs_iter_t*, void> Pointer;
        }

        // FunctionPointer @ flecs.h:243:15
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_order_by_action_t
        {
            public delegate* unmanaged<ecs_entity_t, void*, ecs_entity_t, void*, int> Pointer;
        }

        // FunctionPointer @ flecs.h:250:20
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_group_by_action_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_type_t, ecs_id_t, void*, ulong> Pointer;
        }

        // FunctionPointer @ flecs.h:266:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_ctx_free_t
        {
            public delegate* unmanaged<void*, void> Pointer;
        }

        // FunctionPointer @ flecs.h:195:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_run_action_t
        {
            public delegate* unmanaged<ecs_iter_t*, void> Pointer;
        }

        // FunctionPointer @ app.h:25:14 (flecs/addons/app.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_app_init_action_t
        {
            public delegate* unmanaged<ecs_world_t*, int> Pointer;
        }

        // FunctionPointer @ system.h:66:16 (flecs/addons/system.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_system_status_action_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_system_status_t, void*, void> Pointer;
        }

        // FunctionPointer @ meta.h:349:20 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct FnPtr_Ecs_world_tPtr_CString_VoidPtr_Ecs_entity_t
        {
            public delegate* unmanaged<ecs_world_t*, CString, void*, ecs_entity_t> Pointer;
        }

        // FunctionPointer @ http.h:98:16 (flecs/addons/http.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_http_reply_action_t
        {
            public delegate* unmanaged<ecs_http_request_t*, ecs_http_reply_t*, void*, CBool> Pointer;
        }

        // FunctionPointer @ os_api.h:84:9 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_thread_callback_t
        {
            public delegate* unmanaged<void*, void*> Pointer;
        }

        // FunctionPointer @ os_api.h:50:16 (flecs/os_api.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_os_proc_t
        {
            public delegate* unmanaged<void> Pointer;
        }

        // FunctionPointer @ flecs.h:218:16
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_iter_init_action_t
        {
            public delegate* unmanaged<ecs_world_t*, ecs_poly_t*, ecs_iter_t*, ecs_term_t*, void> Pointer;
        }

        // Struct @ map.h:45:3 (flecs/private/map.h)
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_map_iter_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_map_t* map;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_bucket_t* bucket;

            [FieldOffset(16)] // size = 4, padding = 0
            public int bucket_index;

            [FieldOffset(20)] // size = 4, padding = 0
            public int element_index;

            [FieldOffset(24)] // size = 8, padding = 0
            public void* payload;
        }

        // Struct @ strbuf.h:81:3 (flecs/private/strbuf.h)
        [StructLayout(LayoutKind.Explicit, Size = 1104, Pack = 8)]
        public struct ecs_strbuf_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString buf;

            [FieldOffset(8)] // size = 4, padding = 0
            public int max;

            [FieldOffset(12)] // size = 4, padding = 0
            public int size;

            [FieldOffset(16)] // size = 4, padding = 4
            public int elementCount;

            [FieldOffset(24)] // size = 536, padding = 0
            public ecs_strbuf_element_embedded firstElement;

            [FieldOffset(560)] // size = 8, padding = 0
            public ecs_strbuf_element* current;

            [FieldOffset(568)] // size = 512, padding = 0
            public fixed ulong _list_stack[512 / 8]; // ecs_strbuf_list_elem[32]

            public Span<ecs_strbuf_list_elem> list_stack
            {
                get
                {
                    fixed (ecs_strbuf_t* @this = &this)
                    {
                        var pointer = &@this->_list_stack[0];
                        var span = new Span<ecs_strbuf_list_elem>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(1080)] // size = 4, padding = 4
            public int list_sp;

            [FieldOffset(1088)] // size = 8, padding = 0
            public CString content;

            [FieldOffset(1096)] // size = 4, padding = 4
            public int length;
        }

        // Struct @ os_api.h:267:3 (flecs/os_api.h)
        [StructLayout(LayoutKind.Explicit, Size = 264, Pack = 8)]
        public struct ecs_os_api_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_os_api_init_t init_;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_os_api_fini_t fini_;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_os_api_malloc_t malloc_;

            [FieldOffset(24)] // size = 8, padding = 0
            public ecs_os_api_realloc_t realloc_;

            [FieldOffset(32)] // size = 8, padding = 0
            public ecs_os_api_calloc_t calloc_;

            [FieldOffset(40)] // size = 8, padding = 0
            public ecs_os_api_free_t free_;

            [FieldOffset(48)] // size = 8, padding = 0
            public ecs_os_api_strdup_t strdup_;

            [FieldOffset(56)] // size = 8, padding = 0
            public ecs_os_api_thread_new_t thread_new_;

            [FieldOffset(64)] // size = 8, padding = 0
            public ecs_os_api_thread_join_t thread_join_;

            [FieldOffset(72)] // size = 8, padding = 0
            public ecs_os_api_ainc_t ainc_;

            [FieldOffset(80)] // size = 8, padding = 0
            public ecs_os_api_ainc_t adec_;

            [FieldOffset(88)] // size = 8, padding = 0
            public ecs_os_api_mutex_new_t mutex_new_;

            [FieldOffset(96)] // size = 8, padding = 0
            public ecs_os_api_mutex_free_t mutex_free_;

            [FieldOffset(104)] // size = 8, padding = 0
            public ecs_os_api_mutex_lock_t mutex_lock_;

            [FieldOffset(112)] // size = 8, padding = 0
            public ecs_os_api_mutex_lock_t mutex_unlock_;

            [FieldOffset(120)] // size = 8, padding = 0
            public ecs_os_api_cond_new_t cond_new_;

            [FieldOffset(128)] // size = 8, padding = 0
            public ecs_os_api_cond_free_t cond_free_;

            [FieldOffset(136)] // size = 8, padding = 0
            public ecs_os_api_cond_signal_t cond_signal_;

            [FieldOffset(144)] // size = 8, padding = 0
            public ecs_os_api_cond_broadcast_t cond_broadcast_;

            [FieldOffset(152)] // size = 8, padding = 0
            public ecs_os_api_cond_wait_t cond_wait_;

            [FieldOffset(160)] // size = 8, padding = 0
            public ecs_os_api_sleep_t sleep_;

            [FieldOffset(168)] // size = 8, padding = 0
            public ecs_os_api_now_t now_;

            [FieldOffset(176)] // size = 8, padding = 0
            public ecs_os_api_get_time_t get_time_;

            [FieldOffset(184)] // size = 8, padding = 0
            public ecs_os_api_enable_high_timer_resolution_t enable_high_timer_resolution_;

            [FieldOffset(192)] // size = 8, padding = 0
            public ecs_os_api_log_t log_;

            [FieldOffset(200)] // size = 8, padding = 0
            public ecs_os_api_abort_t abort_;

            [FieldOffset(208)] // size = 8, padding = 0
            public ecs_os_api_dlopen_t dlopen_;

            [FieldOffset(216)] // size = 8, padding = 0
            public ecs_os_api_dlproc_t dlproc_;

            [FieldOffset(224)] // size = 8, padding = 0
            public ecs_os_api_dlclose_t dlclose_;

            [FieldOffset(232)] // size = 8, padding = 0
            public ecs_os_api_module_to_path_t module_to_dl_;

            [FieldOffset(240)] // size = 8, padding = 0
            public ecs_os_api_module_to_path_t module_to_etc_;

            [FieldOffset(248)] // size = 4, padding = 0
            public int log_level_;

            [FieldOffset(252)] // size = 4, padding = 0
            public int log_indent_;

            [FieldOffset(256)] // size = 4, padding = 0
            public int log_last_error_;

            [FieldOffset(260)] // size = 1, padding = 3
            public CBool log_with_color_;
        }

        // Struct @ os_api.h:34:3 (flecs/os_api.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ecs_time_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint sec;

            [FieldOffset(4)] // size = 4, padding = 0
            public uint nanosec;
        }

        // Struct @ api_types.h:168:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_sparse_iter_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_sparse_t* sparse;

            [FieldOffset(8)] // size = 8, padding = 0
            public ulong* ids;

            [FieldOffset(16)] // size = 4, padding = 0
            public ecs_size_t size;

            [FieldOffset(20)] // size = 4, padding = 0
            public int i;

            [FieldOffset(24)] // size = 4, padding = 4
            public int count;
        }

        // Struct @ hashmap.h:24:3 (flecs/private/hashmap.h)
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_hashmap_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_hash_value_action_t hash;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_compare_action_t compare;

            [FieldOffset(16)] // size = 4, padding = 0
            public ecs_size_t key_size;

            [FieldOffset(20)] // size = 4, padding = 0
            public ecs_size_t value_size;

            [FieldOffset(24)] // size = 8, padding = 0
            public ecs_map_t* impl;
        }

        // Struct @ hashmap.h:36:3 (flecs/private/hashmap.h)
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct flecs_hashmap_result_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public void* key;

            [FieldOffset(8)] // size = 8, padding = 0
            public void* value;

            [FieldOffset(16)] // size = 8, padding = 0
            public ulong hash;
        }

        // Struct @ hashmap.h:30:3 (flecs/private/hashmap.h)
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct flecs_hashmap_iter_t
        {
            [FieldOffset(0)] // size = 32, padding = 0
            public ecs_map_iter_t it;

            [FieldOffset(32)] // size = 8, padding = 0
            public ecs_hm_bucket_t* bucket;

            [FieldOffset(40)] // size = 4, padding = 4
            public int index;
        }

        // Struct @ api_types.h:294:38 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
        public struct EcsComponentLifecycle
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_xtor_t ctor;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_xtor_t dtor;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_copy_t copy;

            [FieldOffset(24)] // size = 8, padding = 0
            public ecs_move_t move;

            [FieldOffset(32)] // size = 8, padding = 0
            public void* ctx;

            [FieldOffset(40)] // size = 8, padding = 0
            public ecs_copy_ctor_t copy_ctor;

            [FieldOffset(48)] // size = 8, padding = 0
            public ecs_move_ctor_t move_ctor;

            [FieldOffset(56)] // size = 8, padding = 0
            public ecs_move_ctor_t ctor_move_dtor;

            [FieldOffset(64)] // size = 8, padding = 0
            public ecs_move_ctor_t move_dtor;

            [FieldOffset(72)] // size = 8, padding = 0
            public ecs_iter_action_t on_set;
        }

        // Struct @ flecs.h:866:3
        [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
        public struct ecs_world_info_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t last_component_id;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_entity_t last_id;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_entity_t min_id;

            [FieldOffset(24)] // size = 8, padding = 0
            public ecs_entity_t max_id;

            [FieldOffset(32)] // size = 4, padding = 0
            public float delta_time_raw;

            [FieldOffset(36)] // size = 4, padding = 0
            public float delta_time;

            [FieldOffset(40)] // size = 4, padding = 0
            public float time_scale;

            [FieldOffset(44)] // size = 4, padding = 0
            public float target_fps;

            [FieldOffset(48)] // size = 4, padding = 0
            public float frame_time_total;

            [FieldOffset(52)] // size = 4, padding = 0
            public float system_time_total;

            [FieldOffset(56)] // size = 4, padding = 0
            public float merge_time_total;

            [FieldOffset(60)] // size = 4, padding = 0
            public float world_time_total;

            [FieldOffset(64)] // size = 4, padding = 0
            public float world_time_total_raw;

            [FieldOffset(68)] // size = 4, padding = 0
            public int frame_count_total;

            [FieldOffset(72)] // size = 4, padding = 0
            public int merge_count_total;

            [FieldOffset(76)] // size = 4, padding = 0
            public int pipeline_build_count_total;

            [FieldOffset(80)] // size = 4, padding = 4
            public int systems_ran_frame;
        }

        // Struct @ flecs.h:521:3
        [StructLayout(LayoutKind.Explicit, Size = 320, Pack = 8)]
        public struct ecs_entity_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_entity_t entity;

            [FieldOffset(16)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(24)] // size = 8, padding = 0
            public CString sep;

            [FieldOffset(32)] // size = 8, padding = 0
            public CString root_sep;

            [FieldOffset(40)] // size = 8, padding = 0
            public CString symbol;

            [FieldOffset(48)] // size = 1, padding = 7
            public CBool use_low_id;

            [FieldOffset(56)] // size = 256, padding = 0
            public fixed ulong _add[256 / 8]; // ecs_id_t[32]

            public Span<ecs_id_t> add
            {
                get
                {
                    fixed (ecs_entity_desc_t* @this = &this)
                    {
                        var pointer = &@this->_add[0];
                        var span = new Span<ecs_id_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(312)] // size = 8, padding = 0
            public CString add_expr;
        }

        // Struct @ flecs.h:548:3
        [StructLayout(LayoutKind.Explicit, Size = 296, Pack = 8)]
        public struct ecs_bulk_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_entity_t* entities;

            [FieldOffset(16)] // size = 4, padding = 4
            public int count;

            [FieldOffset(24)] // size = 256, padding = 0
            public fixed ulong _ids[256 / 8]; // ecs_id_t[32]

            public Span<ecs_id_t> ids
            {
                get
                {
                    fixed (ecs_bulk_desc_t* @this = &this)
                    {
                        var pointer = &@this->_ids[0];
                        var span = new Span<ecs_id_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(280)] // size = 8, padding = 0
            public void** data;

            [FieldOffset(288)] // size = 8, padding = 0
            public ecs_table_t* table;
        }

        // Struct @ flecs.h:558:3
        [StructLayout(LayoutKind.Explicit, Size = 344, Pack = 8)]
        public struct ecs_component_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(328)] // size = 8, padding = 0
            public ulong size;

            [FieldOffset(336)] // size = 8, padding = 0
            public ulong alignment;
        }

        // Struct @ flecs.h:568:3
        [StructLayout(LayoutKind.Explicit, Size = 592, Pack = 8)]
        public struct ecs_type_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(328)] // size = 256, padding = 0
            public fixed ulong _ids[256 / 8]; // ecs_id_t[32]

            public Span<ecs_id_t> ids
            {
                get
                {
                    fixed (ecs_type_desc_t* @this = &this)
                    {
                        var pointer = &@this->_ids[0];
                        var span = new Span<ecs_id_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(584)] // size = 8, padding = 0
            public CString ids_expr;
        }

        // Struct @ flecs.h:153:26
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_ref_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_entity_t component;

            [FieldOffset(16)] // size = 8, padding = 0
            public void* table;

            [FieldOffset(24)] // size = 4, padding = 0
            public uint row;

            [FieldOffset(28)] // size = 4, padding = 0
            public int alloc_count;

            [FieldOffset(32)] // size = 8, padding = 0
            public ecs_record_t* @record;

            [FieldOffset(40)] // size = 8, padding = 0
            public void* ptr;
        }

        // Struct @ flecs.h:150:27
        [StructLayout(LayoutKind.Explicit, Size = 1584, Pack = 8)]
        public struct ecs_iter_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_world_t* world;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_world_t* real_world;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_entity_t* entities;

            [FieldOffset(24)] // size = 8, padding = 0
            public void** ptrs;

            [FieldOffset(32)] // size = 8, padding = 0
            public ecs_size_t* sizes;

            [FieldOffset(40)] // size = 8, padding = 0
            public ecs_table_t* table;

            [FieldOffset(48)] // size = 8, padding = 0
            public ecs_type_t type;

            [FieldOffset(56)] // size = 8, padding = 0
            public ecs_table_t* other_table;

            [FieldOffset(64)] // size = 8, padding = 0
            public ecs_id_t* ids;

            [FieldOffset(72)] // size = 8, padding = 0
            public ecs_entity_t* variables;

            [FieldOffset(80)] // size = 8, padding = 0
            public int* columns;

            [FieldOffset(88)] // size = 8, padding = 0
            public ecs_entity_t* subjects;

            [FieldOffset(96)] // size = 8, padding = 0
            public int* match_indices;

            [FieldOffset(104)] // size = 8, padding = 0
            public ecs_ref_t* references;

            [FieldOffset(112)] // size = 8, padding = 0
            public ecs_entity_t system;

            [FieldOffset(120)] // size = 8, padding = 0
            public ecs_entity_t @event;

            [FieldOffset(128)] // size = 8, padding = 0
            public ecs_id_t event_id;

            [FieldOffset(136)] // size = 8, padding = 0
            public ecs_entity_t self;

            [FieldOffset(144)] // size = 8, padding = 0
            public ecs_term_t* terms;

            [FieldOffset(152)] // size = 4, padding = 0
            public int table_count;

            [FieldOffset(156)] // size = 4, padding = 0
            public int term_count;

            [FieldOffset(160)] // size = 4, padding = 0
            public int term_index;

            [FieldOffset(164)] // size = 4, padding = 0
            public int variable_count;

            [FieldOffset(168)] // size = 8, padding = 0
            public CString* variable_names;

            [FieldOffset(176)] // size = 8, padding = 0
            public void* param;

            [FieldOffset(184)] // size = 8, padding = 0
            public void* ctx;

            [FieldOffset(192)] // size = 8, padding = 0
            public void* binding_ctx;

            [FieldOffset(200)] // size = 4, padding = 0
            public float delta_time;

            [FieldOffset(204)] // size = 4, padding = 0
            public float delta_system_time;

            [FieldOffset(208)] // size = 4, padding = 0
            public int frame_offset;

            [FieldOffset(212)] // size = 4, padding = 0
            public int offset;

            [FieldOffset(216)] // size = 4, padding = 0
            public int count;

            [FieldOffset(220)] // size = 4, padding = 0
            public int instance_count;

            [FieldOffset(224)] // size = 1, padding = 0
            public CBool is_valid;

            [FieldOffset(225)] // size = 1, padding = 0
            public CBool is_filter;

            [FieldOffset(226)] // size = 1, padding = 0
            public CBool is_instanced;

            [FieldOffset(227)] // size = 1, padding = 0
            public CBool has_shared;

            [FieldOffset(228)] // size = 1, padding = 3
            public CBool table_only;

            [FieldOffset(232)] // size = 8, padding = 0
            public ecs_entity_t interrupted_by;

            [FieldOffset(240)] // size = 1312, padding = 0
            public ecs_iter_private_t priv;

            [FieldOffset(1552)] // size = 8, padding = 0
            public ecs_iter_next_action_t next;

            [FieldOffset(1560)] // size = 8, padding = 0
            public ecs_iter_action_t callback;

            [FieldOffset(1568)] // size = 8, padding = 0
            public ecs_iter_fini_action_t fini;

            [FieldOffset(1576)] // size = 8, padding = 0
            public ecs_iter_t* chain_it;
        }

        // Struct @ flecs.h:129:27
        [StructLayout(LayoutKind.Explicit, Size = 192, Pack = 8)]
        public struct ecs_term_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_id_t id;

            [FieldOffset(8)] // size = 4, padding = 4
            public ecs_inout_kind_t inout;

            [FieldOffset(16)] // size = 48, padding = 0
            public ecs_term_id_t pred;

            [FieldOffset(64)] // size = 48, padding = 0
            public ecs_term_id_t subj;

            [FieldOffset(112)] // size = 48, padding = 0
            public ecs_term_id_t obj;

            [FieldOffset(160)] // size = 4, padding = 4
            public ecs_oper_kind_t oper;

            [FieldOffset(168)] // size = 8, padding = 0
            public ecs_id_t role;

            [FieldOffset(176)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(184)] // size = 4, padding = 0
            public int index;

            [FieldOffset(188)] // size = 1, padding = 3
            public CBool move;
        }

        // Struct @ flecs.h:360:3
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_term_id_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t entity;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(16)] // size = 4, padding = 4
            public ecs_var_kind_t var;

            [FieldOffset(24)] // size = 24, padding = 0
            public ecs_term_set_t set;
        }

        // Struct @ flecs.h:135:29
        [StructLayout(LayoutKind.Explicit, Size = 840, Pack = 8)]
        public struct ecs_filter_t
        {
            [FieldOffset(0)] // size = 16, padding = 0
            public ecs_header_t hdr;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_term_t* terms;

            [FieldOffset(24)] // size = 4, padding = 0
            public int term_count;

            [FieldOffset(28)] // size = 4, padding = 0
            public int term_count_actual;

            [FieldOffset(32)] // size = 768, padding = 0
            public fixed ulong _term_cache[768 / 8]; // ecs_term_t[4]

            public Span<ecs_term_t> term_cache
            {
                get
                {
                    fixed (ecs_filter_t* @this = &this)
                    {
                        var pointer = &@this->_term_cache[0];
                        var span = new Span<ecs_term_t>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(800)] // size = 1, padding = 0
            public CBool term_cache_used;

            [FieldOffset(801)] // size = 1, padding = 0
            public CBool match_this;

            [FieldOffset(802)] // size = 1, padding = 0
            public CBool match_only_this;

            [FieldOffset(803)] // size = 1, padding = 0
            public CBool match_prefab;

            [FieldOffset(804)] // size = 1, padding = 0
            public CBool match_disabled;

            [FieldOffset(805)] // size = 1, padding = 0
            public CBool match_anything;

            [FieldOffset(806)] // size = 1, padding = 0
            public CBool filter;

            [FieldOffset(807)] // size = 1, padding = 0
            public CBool instanced;

            [FieldOffset(808)] // size = 1, padding = 7
            public CBool match_empty_tables;

            [FieldOffset(816)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(824)] // size = 8, padding = 0
            public CString expr;

            [FieldOffset(832)] // size = 8, padding = 0
            public ecs_iterable_t iterable;
        }

        // Struct @ flecs.h:604:3
        [StructLayout(LayoutKind.Explicit, Size = 3112, Pack = 8)]
        public struct ecs_filter_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 3072, padding = 0
            public fixed ulong _terms[3072 / 8]; // ecs_term_t[16]

            public Span<ecs_term_t> terms
            {
                get
                {
                    fixed (ecs_filter_desc_t* @this = &this)
                    {
                        var pointer = &@this->_terms[0];
                        var span = new Span<ecs_term_t>(pointer, 16);
                        return span;
                    }
                }
            }

            [FieldOffset(3080)] // size = 8, padding = 0
            public ecs_term_t* terms_buffer;

            [FieldOffset(3088)] // size = 4, padding = 0
            public int terms_buffer_count;

            [FieldOffset(3092)] // size = 1, padding = 0
            public CBool filter;

            [FieldOffset(3093)] // size = 1, padding = 0
            public CBool instanced;

            [FieldOffset(3094)] // size = 1, padding = 1
            public CBool match_empty_tables;

            [FieldOffset(3096)] // size = 8, padding = 0
            public CString expr;

            [FieldOffset(3104)] // size = 8, padding = 0
            public CString name;
        }

        // Struct @ flecs.h:651:3
        [StructLayout(LayoutKind.Explicit, Size = 3184, Pack = 8)]
        public struct ecs_query_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 3112, padding = 0
            public ecs_filter_desc_t filter;

            [FieldOffset(3120)] // size = 8, padding = 0
            public ecs_entity_t order_by_component;

            [FieldOffset(3128)] // size = 8, padding = 0
            public ecs_order_by_action_t order_by;

            [FieldOffset(3136)] // size = 8, padding = 0
            public ecs_id_t group_by_id;

            [FieldOffset(3144)] // size = 8, padding = 0
            public ecs_group_by_action_t group_by;

            [FieldOffset(3152)] // size = 8, padding = 0
            public void* group_by_ctx;

            [FieldOffset(3160)] // size = 8, padding = 0
            public ecs_ctx_free_t group_by_ctx_free;

            [FieldOffset(3168)] // size = 8, padding = 0
            public ecs_query_t* parent;

            [FieldOffset(3176)] // size = 8, padding = 0
            public ecs_entity_t system;
        }

        // Struct @ flecs.h:708:3
        [StructLayout(LayoutKind.Explicit, Size = 664, Pack = 8)]
        public struct ecs_trigger_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(328)] // size = 192, padding = 0
            public ecs_term_t term;

            [FieldOffset(520)] // size = 8, padding = 0
            public CString expr;

            [FieldOffset(528)] // size = 64, padding = 0
            public fixed ulong _events[64 / 8]; // ecs_entity_t[8]

            public Span<ecs_entity_t> events
            {
                get
                {
                    fixed (ecs_trigger_desc_t* @this = &this)
                    {
                        var pointer = &@this->_events[0];
                        var span = new Span<ecs_entity_t>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(592)] // size = 1, padding = 0
            public CBool match_prefab;

            [FieldOffset(593)] // size = 1, padding = 0
            public CBool match_disabled;

            [FieldOffset(594)] // size = 1, padding = 0
            public CBool instanced;

            [FieldOffset(595)] // size = 1, padding = 4
            public CBool yield_existing;

            [FieldOffset(600)] // size = 8, padding = 0
            public ecs_iter_action_t callback;

            [FieldOffset(608)] // size = 8, padding = 0
            public ecs_entity_t self;

            [FieldOffset(616)] // size = 8, padding = 0
            public void* ctx;

            [FieldOffset(624)] // size = 8, padding = 0
            public void* binding_ctx;

            [FieldOffset(632)] // size = 8, padding = 0
            public ecs_ctx_free_t ctx_free;

            [FieldOffset(640)] // size = 8, padding = 0
            public ecs_ctx_free_t binding_ctx_free;

            [FieldOffset(648)] // size = 8, padding = 0
            public ecs_poly_t* observable;

            [FieldOffset(656)] // size = 8, padding = 0
            public int* last_event_id;
        }

        // Struct @ flecs.h:3289:3
        [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
        public struct ecs_event_desc_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t @event;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_ids_t* ids;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_table_t* table;

            [FieldOffset(24)] // size = 8, padding = 0
            public ecs_table_t* other_table;

            [FieldOffset(32)] // size = 4, padding = 0
            public int offset;

            [FieldOffset(36)] // size = 4, padding = 0
            public int count;

            [FieldOffset(40)] // size = 8, padding = 0
            public void* param;

            [FieldOffset(48)] // size = 8, padding = 0
            public ecs_poly_t* observable;

            [FieldOffset(56)] // size = 1, padding = 7
            public CBool table_event;

            [FieldOffset(64)] // size = 8, padding = 0
            public ecs_entity_t relation;
        }

        // Struct @ flecs.h:755:3
        [StructLayout(LayoutKind.Explicit, Size = 3576, Pack = 8)]
        public struct ecs_observer_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(328)] // size = 3112, padding = 0
            public ecs_filter_desc_t filter;

            [FieldOffset(3440)] // size = 64, padding = 0
            public fixed ulong _events[64 / 8]; // ecs_entity_t[8]

            public Span<ecs_entity_t> events
            {
                get
                {
                    fixed (ecs_observer_desc_t* @this = &this)
                    {
                        var pointer = &@this->_events[0];
                        var span = new Span<ecs_entity_t>(pointer, 8);
                        return span;
                    }
                }
            }

            [FieldOffset(3504)] // size = 1, padding = 7
            public CBool yield_existing;

            [FieldOffset(3512)] // size = 8, padding = 0
            public ecs_iter_action_t callback;

            [FieldOffset(3520)] // size = 8, padding = 0
            public ecs_run_action_t run;

            [FieldOffset(3528)] // size = 8, padding = 0
            public ecs_entity_t self;

            [FieldOffset(3536)] // size = 8, padding = 0
            public void* ctx;

            [FieldOffset(3544)] // size = 8, padding = 0
            public void* binding_ctx;

            [FieldOffset(3552)] // size = 8, padding = 0
            public ecs_ctx_free_t ctx_free;

            [FieldOffset(3560)] // size = 8, padding = 0
            public ecs_ctx_free_t binding_ctx_free;

            [FieldOffset(3568)] // size = 8, padding = 0
            public ecs_poly_t* observable;
        }

        // Struct @ api_types.h:31:29 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_record_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_table_t* table;

            [FieldOffset(8)] // size = 4, padding = 4
            public uint row;
        }

        // Struct @ api_types.h:84:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_ids_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_id_t* array;

            [FieldOffset(8)] // size = 4, padding = 0
            public int count;

            [FieldOffset(12)] // size = 4, padding = 0
            public int size;
        }

        // Struct @ app.h:39:3 (flecs/addons/app.h)
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_app_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public float target_fps;

            [FieldOffset(4)] // size = 4, padding = 0
            public float delta_time;

            [FieldOffset(8)] // size = 4, padding = 0
            public int threads;

            [FieldOffset(12)] // size = 1, padding = 3
            public CBool enable_rest;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_app_init_action_t init;

            [FieldOffset(24)] // size = 8, padding = 0
            public void* ctx;
        }

        // Struct @ system.h:138:3 (flecs/addons/system.h)
        [StructLayout(LayoutKind.Explicit, Size = 3616, Pack = 8)]
        public struct ecs_system_desc_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int _canary;

            [FieldOffset(8)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(328)] // size = 3184, padding = 0
            public ecs_query_desc_t query;

            [FieldOffset(3512)] // size = 8, padding = 0
            public ecs_run_action_t run;

            [FieldOffset(3520)] // size = 8, padding = 0
            public ecs_iter_action_t callback;

            [FieldOffset(3528)] // size = 8, padding = 0
            public ecs_system_status_action_t status_callback;

            [FieldOffset(3536)] // size = 8, padding = 0
            public ecs_entity_t self;

            [FieldOffset(3544)] // size = 8, padding = 0
            public void* ctx;

            [FieldOffset(3552)] // size = 8, padding = 0
            public void* status_ctx;

            [FieldOffset(3560)] // size = 8, padding = 0
            public void* binding_ctx;

            [FieldOffset(3568)] // size = 8, padding = 0
            public ecs_ctx_free_t ctx_free;

            [FieldOffset(3576)] // size = 8, padding = 0
            public ecs_ctx_free_t status_ctx_free;

            [FieldOffset(3584)] // size = 8, padding = 0
            public ecs_ctx_free_t binding_ctx_free;

            [FieldOffset(3592)] // size = 4, padding = 0
            public float interval;

            [FieldOffset(3596)] // size = 4, padding = 0
            public int rate;

            [FieldOffset(3600)] // size = 8, padding = 0
            public ecs_entity_t tick_source;

            [FieldOffset(3608)] // size = 1, padding = 0
            public CBool multi_threaded;

            [FieldOffset(3609)] // size = 1, padding = 6
            public CBool no_staging;
        }

        // Struct @ json.h:26:3 (flecs/addons/json.h)
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_parse_json_desc_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString expr;
        }

        // Struct @ json.h:155:3 (flecs/addons/json.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 1)]
        public struct ecs_entity_to_json_desc_t
        {
            [FieldOffset(0)] // size = 1, padding = 0
            public CBool serialize_path;

            [FieldOffset(1)] // size = 1, padding = 0
            public CBool serialize_label;

            [FieldOffset(2)] // size = 1, padding = 0
            public CBool serialize_id_labels;

            [FieldOffset(3)] // size = 1, padding = 0
            public CBool serialize_base;

            [FieldOffset(4)] // size = 1, padding = 0
            public CBool serialize_private;

            [FieldOffset(5)] // size = 1, padding = 0
            public CBool serialize_hidden;

            [FieldOffset(6)] // size = 1, padding = 0
            public CBool serialize_values;

            [FieldOffset(7)] // size = 1, padding = 0
            public CBool serialize_type_info;
        }

        // Struct @ json.h:204:3 (flecs/addons/json.h)
        [StructLayout(LayoutKind.Explicit, Size = 11, Pack = 1)]
        public struct ecs_iter_to_json_desc_t
        {
            [FieldOffset(0)] // size = 1, padding = 0
            public CBool serialize_term_ids;

            [FieldOffset(1)] // size = 1, padding = 0
            public CBool serialize_ids;

            [FieldOffset(2)] // size = 1, padding = 0
            public CBool serialize_subjects;

            [FieldOffset(3)] // size = 1, padding = 0
            public CBool serialize_variables;

            [FieldOffset(4)] // size = 1, padding = 0
            public CBool serialize_is_set;

            [FieldOffset(5)] // size = 1, padding = 0
            public CBool serialize_values;

            [FieldOffset(6)] // size = 1, padding = 0
            public CBool serialize_entities;

            [FieldOffset(7)] // size = 1, padding = 0
            public CBool serialize_entity_labels;

            [FieldOffset(8)] // size = 1, padding = 0
            public CBool serialize_variable_labels;

            [FieldOffset(9)] // size = 1, padding = 0
            public CBool measure_eval_duration;

            [FieldOffset(10)] // size = 1, padding = 0
            public CBool serialize_type_info;
        }

        // Struct @ meta.h:351:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 2080, Pack = 8)]
        public struct ecs_meta_cursor_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_world_t* world;

            [FieldOffset(8)] // size = 2048, padding = 0
            public fixed ulong _scope[2048 / 8]; // ecs_meta_scope_t[32]

            public Span<ecs_meta_scope_t> scope
            {
                get
                {
                    fixed (ecs_meta_cursor_t* @this = &this)
                    {
                        var pointer = &@this->_scope[0];
                        var span = new Span<ecs_meta_scope_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(2056)] // size = 4, padding = 0
            public int depth;

            [FieldOffset(2060)] // size = 1, padding = 0
            public CBool valid;

            [FieldOffset(2061)] // size = 1, padding = 2
            public CBool is_primitive_scope;

            [FieldOffset(2064)] // size = 8, padding = 0
            public FnPtr_Ecs_world_tPtr_CString_VoidPtr_Ecs_entity_t lookup_action;

            [FieldOffset(2072)] // size = 8, padding = 0
            public void* lookup_ctx;
        }

        // Struct @ meta.h:517:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 328, Pack = 8)]
        public struct ecs_primitive_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 4, padding = 4
            public ecs_primitive_kind_t kind;
        }

        // Struct @ meta.h:529:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 1088, Pack = 8)]
        public struct ecs_enum_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 768, padding = 0
            public fixed ulong _constants[768 / 8]; // ecs_enum_constant_t[32]

            public Span<ecs_enum_constant_t> constants
            {
                get
                {
                    fixed (ecs_enum_desc_t* @this = &this)
                    {
                        var pointer = &@this->_constants[0];
                        var span = new Span<ecs_enum_constant_t>(pointer, 32);
                        return span;
                    }
                }
            }
        }

        // Struct @ meta.h:542:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 1088, Pack = 8)]
        public struct ecs_bitmask_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 768, padding = 0
            public fixed ulong _constants[768 / 8]; // ecs_bitmask_constant_t[32]

            public Span<ecs_bitmask_constant_t> constants
            {
                get
                {
                    fixed (ecs_bitmask_desc_t* @this = &this)
                    {
                        var pointer = &@this->_constants[0];
                        var span = new Span<ecs_bitmask_constant_t>(pointer, 32);
                        return span;
                    }
                }
            }
        }

        // Struct @ meta.h:556:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 336, Pack = 8)]
        public struct ecs_array_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 8, padding = 0
            public ecs_entity_t type;

            [FieldOffset(328)] // size = 4, padding = 4
            public int count;
        }

        // Struct @ meta.h:569:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 328, Pack = 8)]
        public struct ecs_vector_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 8, padding = 0
            public ecs_entity_t type;
        }

        // Struct @ meta.h:582:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 1856, Pack = 8)]
        public struct ecs_struct_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 1536, padding = 0
            public fixed ulong _members[1536 / 8]; // ecs_member_t[32]

            public Span<ecs_member_t> members
            {
                get
                {
                    fixed (ecs_struct_desc_t* @this = &this)
                    {
                        var pointer = &@this->_members[0];
                        var span = new Span<ecs_member_t>(pointer, 32);
                        return span;
                    }
                }
            }
        }

        // Struct @ meta.h:616:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 368, Pack = 8)]
        public struct ecs_unit_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 8, padding = 0
            public CString symbol;

            [FieldOffset(328)] // size = 8, padding = 0
            public ecs_entity_t quantity;

            [FieldOffset(336)] // size = 8, padding = 0
            public ecs_entity_t @base;

            [FieldOffset(344)] // size = 8, padding = 0
            public ecs_entity_t over;

            [FieldOffset(352)] // size = 8, padding = 0
            public ecs_unit_translation_t translation;

            [FieldOffset(360)] // size = 8, padding = 0
            public ecs_entity_t prefix;
        }

        // Struct @ meta.h:633:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 336, Pack = 8)]
        public struct ecs_unit_prefix_desc_t
        {
            [FieldOffset(0)] // size = 320, padding = 0
            public ecs_entity_desc_t entity;

            [FieldOffset(320)] // size = 8, padding = 0
            public CString symbol;

            [FieldOffset(328)] // size = 8, padding = 0
            public ecs_unit_translation_t translation;
        }

        // Struct @ expr.h:114:3 (flecs/addons/expr.h)
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_parse_expr_desc_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString expr;

            [FieldOffset(16)] // size = 8, padding = 0
            public FnPtr_Ecs_world_tPtr_CString_VoidPtr_Ecs_entity_t lookup_action;

            [FieldOffset(24)] // size = 8, padding = 0
            public void* lookup_ctx;
        }

        // Struct @ stats.h:74:3 (flecs/addons/stats.h)
        [StructLayout(LayoutKind.Explicit, Size = 24248, Pack = 4)]
        public struct ecs_world_stats_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int dummy_;

            [FieldOffset(4)] // size = 720, padding = 0
            public ecs_gauge_t entity_count;

            [FieldOffset(724)] // size = 720, padding = 0
            public ecs_gauge_t component_count;

            [FieldOffset(1444)] // size = 720, padding = 0
            public ecs_gauge_t query_count;

            [FieldOffset(2164)] // size = 720, padding = 0
            public ecs_gauge_t system_count;

            [FieldOffset(2884)] // size = 720, padding = 0
            public ecs_gauge_t table_count;

            [FieldOffset(3604)] // size = 720, padding = 0
            public ecs_gauge_t empty_table_count;

            [FieldOffset(4324)] // size = 720, padding = 0
            public ecs_gauge_t singleton_table_count;

            [FieldOffset(5044)] // size = 720, padding = 0
            public ecs_gauge_t matched_entity_count;

            [FieldOffset(5764)] // size = 720, padding = 0
            public ecs_gauge_t matched_table_count;

            [FieldOffset(6484)] // size = 960, padding = 0
            public ecs_counter_t new_count;

            [FieldOffset(7444)] // size = 960, padding = 0
            public ecs_counter_t bulk_new_count;

            [FieldOffset(8404)] // size = 960, padding = 0
            public ecs_counter_t delete_count;

            [FieldOffset(9364)] // size = 960, padding = 0
            public ecs_counter_t clear_count;

            [FieldOffset(10324)] // size = 960, padding = 0
            public ecs_counter_t add_count;

            [FieldOffset(11284)] // size = 960, padding = 0
            public ecs_counter_t remove_count;

            [FieldOffset(12244)] // size = 960, padding = 0
            public ecs_counter_t set_count;

            [FieldOffset(13204)] // size = 960, padding = 0
            public ecs_counter_t discard_count;

            [FieldOffset(14164)] // size = 960, padding = 0
            public ecs_counter_t world_time_total_raw;

            [FieldOffset(15124)] // size = 960, padding = 0
            public ecs_counter_t world_time_total;

            [FieldOffset(16084)] // size = 960, padding = 0
            public ecs_counter_t frame_time_total;

            [FieldOffset(17044)] // size = 960, padding = 0
            public ecs_counter_t system_time_total;

            [FieldOffset(18004)] // size = 960, padding = 0
            public ecs_counter_t merge_time_total;

            [FieldOffset(18964)] // size = 720, padding = 0
            public ecs_gauge_t fps;

            [FieldOffset(19684)] // size = 720, padding = 0
            public ecs_gauge_t delta_time;

            [FieldOffset(20404)] // size = 960, padding = 0
            public ecs_counter_t frame_count_total;

            [FieldOffset(21364)] // size = 960, padding = 0
            public ecs_counter_t merge_count_total;

            [FieldOffset(22324)] // size = 960, padding = 0
            public ecs_counter_t pipeline_build_count_total;

            [FieldOffset(23284)] // size = 960, padding = 0
            public ecs_counter_t systems_ran_frame;

            [FieldOffset(24244)] // size = 4, padding = 0
            public int t;
        }

        // Struct @ stats.h:88:3 (flecs/addons/stats.h)
        [StructLayout(LayoutKind.Explicit, Size = 2164, Pack = 4)]
        public struct ecs_query_stats_t
        {
            [FieldOffset(0)] // size = 720, padding = 0
            public ecs_gauge_t matched_table_count;

            [FieldOffset(720)] // size = 720, padding = 0
            public ecs_gauge_t matched_empty_table_count;

            [FieldOffset(1440)] // size = 720, padding = 0
            public ecs_gauge_t matched_entity_count;

            [FieldOffset(2160)] // size = 4, padding = 0
            public int t;
        }

        // Struct @ stats.h:97:3 (flecs/addons/stats.h)
        [StructLayout(LayoutKind.Explicit, Size = 5524, Pack = 4)]
        public struct ecs_system_stats_t
        {
            [FieldOffset(0)] // size = 2164, padding = 0
            public ecs_query_stats_t query_stats;

            [FieldOffset(2164)] // size = 960, padding = 0
            public ecs_counter_t time_spent;

            [FieldOffset(3124)] // size = 960, padding = 0
            public ecs_counter_t invoke_count;

            [FieldOffset(4084)] // size = 720, padding = 0
            public ecs_gauge_t active;

            [FieldOffset(4804)] // size = 720, padding = 0
            public ecs_gauge_t enabled;
        }

        // Struct @ stats.h:112:3 (flecs/addons/stats.h)
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_pipeline_stats_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_vector_t* systems;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_map_t* system_stats;

            [FieldOffset(16)] // size = 4, padding = 0
            public int system_count;

            [FieldOffset(20)] // size = 4, padding = 0
            public int active_system_count;

            [FieldOffset(24)] // size = 4, padding = 4
            public int rebuild_count;
        }

        // Struct @ stats.h:25:3 (flecs/addons/stats.h)
        [StructLayout(LayoutKind.Explicit, Size = 720, Pack = 4)]
        public struct ecs_gauge_t
        {
            [FieldOffset(0)] // size = 240, padding = 0
            public fixed uint _avg[240 / 4]; // float[60]

            public Span<float> avg
            {
                get
                {
                    fixed (ecs_gauge_t* @this = &this)
                    {
                        var pointer = &@this->_avg[0];
                        var span = new Span<float>(pointer, 60);
                        return span;
                    }
                }
            }

            [FieldOffset(240)] // size = 240, padding = 0
            public fixed uint _min[240 / 4]; // float[60]

            public Span<float> min
            {
                get
                {
                    fixed (ecs_gauge_t* @this = &this)
                    {
                        var pointer = &@this->_min[0];
                        var span = new Span<float>(pointer, 60);
                        return span;
                    }
                }
            }

            [FieldOffset(480)] // size = 240, padding = 0
            public fixed uint _max[240 / 4]; // float[60]

            public Span<float> max
            {
                get
                {
                    fixed (ecs_gauge_t* @this = &this)
                    {
                        var pointer = &@this->_max[0];
                        var span = new Span<float>(pointer, 60);
                        return span;
                    }
                }
            }
        }

        // Struct @ http.h:109:3 (flecs/addons/http.h)
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
        public struct ecs_http_server_desc_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_http_reply_action_t callback;

            [FieldOffset(8)] // size = 8, padding = 0
            public void* ctx;

            [FieldOffset(16)] // size = 2, padding = 6
            public ushort port;

            [FieldOffset(24)] // size = 8, padding = 0
            public CString ipaddr;
        }

        // Struct @ http.h:80:3 (flecs/addons/http.h)
        [StructLayout(LayoutKind.Explicit, Size = 1072, Pack = 8)]
        public struct ecs_http_request_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ulong id;

            [FieldOffset(8)] // size = 4, padding = 4
            public ecs_http_method_t method;

            [FieldOffset(16)] // size = 8, padding = 0
            public CString path;

            [FieldOffset(24)] // size = 8, padding = 0
            public CString body;

            [FieldOffset(32)] // size = 512, padding = 0
            public fixed ulong _headers[512 / 8]; // ecs_http_key_value_t[32]

            public Span<ecs_http_key_value_t> headers
            {
                get
                {
                    fixed (ecs_http_request_t* @this = &this)
                    {
                        var pointer = &@this->_headers[0];
                        var span = new Span<ecs_http_key_value_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(544)] // size = 512, padding = 0
            public fixed ulong _params[512 / 8]; // ecs_http_key_value_t[32]

            public Span<ecs_http_key_value_t> @params
            {
                get
                {
                    fixed (ecs_http_request_t* @this = &this)
                    {
                        var pointer = &@this->_params[0];
                        var span = new Span<ecs_http_key_value_t>(pointer, 32);
                        return span;
                    }
                }
            }

            [FieldOffset(1056)] // size = 4, padding = 0
            public int header_count;

            [FieldOffset(1060)] // size = 4, padding = 0
            public int param_count;

            [FieldOffset(1064)] // size = 8, padding = 0
            public ecs_http_connection_t* conn;
        }

        // Struct @ strbuf.h:40:3 (flecs/private/strbuf.h)
        [StructLayout(LayoutKind.Explicit, Size = 536, Pack = 8)]
        public struct ecs_strbuf_element_embedded
        {
            [FieldOffset(0)] // size = 24, padding = 0
            public ecs_strbuf_element super;

            [FieldOffset(24)] // size = 512, padding = 0
            public fixed byte _buf[512 / 1]; // char[512]

            public string buf
            {
                get
                {
                    fixed (ecs_strbuf_element_embedded* @this = &this)
                    {
                        var pointer = &@this->_buf[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }
        }

        // Struct @ strbuf.h:35:3 (flecs/private/strbuf.h)
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_strbuf_element
        {
            [FieldOffset(0)] // size = 1, padding = 3
            public CBool buffer_embedded;

            [FieldOffset(4)] // size = 4, padding = 0
            public int pos;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString buf;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_strbuf_element* next;
        }

        // Struct @ api_types.h:217:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 1312, Pack = 8)]
        public struct ecs_iter_private_t
        {
            [FieldOffset(0)] // size = 1160, padding = 0
            public ecs_iter_private_t_iter iter;

            [FieldOffset(1160)] // size = 152, padding = 0
            public ecs_iter_cache_t cache;

            // Union @ api_types.h:206:5 (flecs/private/api_types.h)
            [StructLayout(LayoutKind.Explicit, Size = 1160, Pack = 8)]
            public struct ecs_iter_private_t_iter
            {
                [FieldOffset(0)] // size = 304, padding = 0
                public ecs_term_iter_t term;

                [FieldOffset(0)] // size = 1160, padding = 0
                public ecs_filter_iter_t filter;

                [FieldOffset(0)] // size = 40, padding = 0
                public ecs_query_iter_t query;

                [FieldOffset(0)] // size = 64, padding = 0
                public ecs_rule_iter_t rule;

                [FieldOffset(0)] // size = 856, padding = 0
                public ecs_snapshot_iter_t snapshot;

                [FieldOffset(0)] // size = 12, padding = 0
                public ecs_page_iter_t page;

                [FieldOffset(0)] // size = 8, padding = 1152
                public ecs_worker_iter_t worker;
            }
        }

        // Struct @ flecs.h:351:3
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_term_set_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t relation;

            [FieldOffset(8)] // size = 1, padding = 3
            public byte mask;

            [FieldOffset(12)] // size = 4, padding = 0
            public int min_depth;

            [FieldOffset(16)] // size = 4, padding = 4
            public int max_depth;
        }

        // Struct @ flecs.h:290:3
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_header_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int magic;

            [FieldOffset(4)] // size = 4, padding = 0
            public int type;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_mixins_t* mixins;
        }

        // Struct @ flecs.h:296:3
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_iterable_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_iter_init_action_t init;
        }

        // Struct @ meta.h:255:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ecs_unit_translation_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int factor;

            [FieldOffset(4)] // size = 4, padding = 0
            public int power;
        }

        // Struct @ stats.h:31:3 (flecs/addons/stats.h)
        [StructLayout(LayoutKind.Explicit, Size = 960, Pack = 4)]
        public struct ecs_counter_t
        {
            [FieldOffset(0)] // size = 720, padding = 0
            public ecs_gauge_t rate;

            [FieldOffset(720)] // size = 240, padding = 0
            public fixed uint _value[240 / 4]; // float[60]

            public Span<float> value
            {
                get
                {
                    fixed (ecs_counter_t* @this = &this)
                    {
                        var pointer = &@this->_value[0];
                        var span = new Span<float>(pointer, 60);
                        return span;
                    }
                }
            }
        }

        // Struct @ http.h:49:3 (flecs/addons/http.h)
        [StructLayout(LayoutKind.Explicit, Size = 160, Pack = 8)]
        public struct ecs_http_connection_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ulong id;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_http_server_t* server;

            [FieldOffset(16)] // size = 128, padding = 0
            public fixed byte _host[128 / 1]; // char[128]

            public string host
            {
                get
                {
                    fixed (ecs_http_connection_t* @this = &this)
                    {
                        var pointer = &@this->_host[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }

            [FieldOffset(144)] // size = 16, padding = 0
            public fixed byte _port[16 / 1]; // char[16]

            public string port
            {
                get
                {
                    fixed (ecs_http_connection_t* @this = &this)
                    {
                        var pointer = &@this->_port[0];
                        var cString = new CString(pointer);
                        return Runtime.CStrings.String(cString);
                    }
                }
            }
        }

        // Struct @ strbuf.h:50:3 (flecs/private/strbuf.h)
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_strbuf_list_elem
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int count;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString separator;
        }

        // Struct @ api_types.h:201:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 152, Pack = 8)]
        public struct ecs_iter_cache_t
        {
            [FieldOffset(0)] // size = 32, padding = 0
            public fixed ulong _ids[32 / 8]; // ecs_id_t[4]

            public Span<ecs_id_t> ids
            {
                get
                {
                    fixed (ecs_iter_cache_t* @this = &this)
                    {
                        var pointer = &@this->_ids[0];
                        var span = new Span<ecs_id_t>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(32)] // size = 16, padding = 0
            public fixed uint _columns[16 / 4]; // int32_t[4]

            public Span<int> columns
            {
                get
                {
                    fixed (ecs_iter_cache_t* @this = &this)
                    {
                        var pointer = &@this->_columns[0];
                        var span = new Span<int>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(48)] // size = 32, padding = 0
            public fixed ulong _subjects[32 / 8]; // ecs_entity_t[4]

            public Span<ecs_entity_t> subjects
            {
                get
                {
                    fixed (ecs_iter_cache_t* @this = &this)
                    {
                        var pointer = &@this->_subjects[0];
                        var span = new Span<ecs_entity_t>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(80)] // size = 16, padding = 0
            public fixed uint _sizes[16 / 4]; // ecs_size_t[4]

            public Span<ecs_size_t> sizes
            {
                get
                {
                    fixed (ecs_iter_cache_t* @this = &this)
                    {
                        var pointer = &@this->_sizes[0];
                        var span = new Span<ecs_size_t>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(96)] // size = 32, padding = 0
            public fixed ulong _ptrs[32 / 8]; // void*[4]

            public Span<nint> ptrs
            {
                get
                {
                    fixed (ecs_iter_cache_t* @this = &this)
                    {
                        var pointer = &@this->_ptrs[0];
                        var span = new Span<nint>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(128)] // size = 16, padding = 0
            public fixed uint _match_indices[16 / 4]; // int32_t[4]

            public Span<int> match_indices
            {
                get
                {
                    fixed (ecs_iter_cache_t* @this = &this)
                    {
                        var pointer = &@this->_match_indices[0];
                        var span = new Span<int>(pointer, 4);
                        return span;
                    }
                }
            }

            [FieldOffset(144)] // size = 1, padding = 0
            public CBool ids_alloc;

            [FieldOffset(145)] // size = 1, padding = 0
            public CBool columns_alloc;

            [FieldOffset(146)] // size = 1, padding = 0
            public CBool subjects_alloc;

            [FieldOffset(147)] // size = 1, padding = 0
            public CBool sizes_alloc;

            [FieldOffset(148)] // size = 1, padding = 0
            public CBool ptrs_alloc;

            [FieldOffset(149)] // size = 1, padding = 2
            public CBool match_indices_alloc;
        }

        // Struct @ api_types.h:127:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 304, Pack = 8)]
        public struct ecs_term_iter_t
        {
            [FieldOffset(0)] // size = 192, padding = 0
            public ecs_term_t term;

            [FieldOffset(192)] // size = 8, padding = 0
            public ecs_id_record_t* self_index;

            [FieldOffset(200)] // size = 8, padding = 0
            public ecs_id_record_t* set_index;

            [FieldOffset(208)] // size = 8, padding = 0
            public ecs_id_record_t* cur;

            [FieldOffset(216)] // size = 16, padding = 0
            public ecs_table_cache_iter_t it;

            [FieldOffset(232)] // size = 4, padding = 4
            public int index;

            [FieldOffset(240)] // size = 8, padding = 0
            public ecs_table_t* table;

            [FieldOffset(248)] // size = 4, padding = 0
            public int cur_match;

            [FieldOffset(252)] // size = 4, padding = 0
            public int match_count;

            [FieldOffset(256)] // size = 4, padding = 0
            public int last_column;

            [FieldOffset(260)] // size = 1, padding = 3
            public CBool empty_tables;

            [FieldOffset(264)] // size = 8, padding = 0
            public ecs_id_t id;

            [FieldOffset(272)] // size = 4, padding = 4
            public int column;

            [FieldOffset(280)] // size = 8, padding = 0
            public ecs_entity_t subject;

            [FieldOffset(288)] // size = 4, padding = 4
            public ecs_size_t size;

            [FieldOffset(296)] // size = 8, padding = 0
            public void* ptr;
        }

        // Struct @ api_types.h:142:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 1160, Pack = 8)]
        public struct ecs_filter_iter_t
        {
            [FieldOffset(0)] // size = 840, padding = 0
            public ecs_filter_t filter;

            [FieldOffset(840)] // size = 4, padding = 4
            public ecs_iter_kind_t kind;

            [FieldOffset(848)] // size = 304, padding = 0
            public ecs_term_iter_t term_iter;

            [FieldOffset(1152)] // size = 4, padding = 4
            public int matches_left;
        }

        // Struct @ api_types.h:152:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
        public struct ecs_query_iter_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_query_t* query;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_query_table_node_t* node;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_query_table_node_t* prev;

            [FieldOffset(24)] // size = 4, padding = 0
            public int sparse_smallest;

            [FieldOffset(28)] // size = 4, padding = 0
            public int sparse_first;

            [FieldOffset(32)] // size = 4, padding = 0
            public int bitset_first;

            [FieldOffset(36)] // size = 4, padding = 0
            public int skip_count;
        }

        // Struct @ api_types.h:184:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct ecs_rule_iter_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_rule_t* rule;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_rule_reg_t* registers;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_entity_t* variables;

            [FieldOffset(24)] // size = 8, padding = 0
            public ecs_rule_op_ctx_t* op_ctx;

            [FieldOffset(32)] // size = 8, padding = 0
            public int* columns;

            [FieldOffset(40)] // size = 8, padding = 0
            public ecs_entity_t entity;

            [FieldOffset(48)] // size = 1, padding = 3
            public CBool redo;

            [FieldOffset(52)] // size = 4, padding = 0
            public int op;

            [FieldOffset(56)] // size = 4, padding = 4
            public int sp;
        }

        // Struct @ api_types.h:159:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 856, Pack = 8)]
        public struct ecs_snapshot_iter_t
        {
            [FieldOffset(0)] // size = 840, padding = 0
            public ecs_filter_t filter;

            [FieldOffset(840)] // size = 8, padding = 0
            public ecs_vector_t* tables;

            [FieldOffset(848)] // size = 4, padding = 4
            public int index;
        }

        // Struct @ api_types.h:91:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
        public struct ecs_page_iter_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int offset;

            [FieldOffset(4)] // size = 4, padding = 0
            public int limit;

            [FieldOffset(8)] // size = 4, padding = 0
            public int remaining;
        }

        // Struct @ api_types.h:97:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct ecs_worker_iter_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int index;

            [FieldOffset(4)] // size = 4, padding = 0
            public int count;
        }

        // Struct @ meta.h:338:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
        public struct ecs_meta_scope_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t type;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_meta_type_op_t* ops;

            [FieldOffset(16)] // size = 4, padding = 0
            public int op_count;

            [FieldOffset(20)] // size = 4, padding = 0
            public int op_cur;

            [FieldOffset(24)] // size = 4, padding = 4
            public int elem_cur;

            [FieldOffset(32)] // size = 8, padding = 0
            public void* ptr;

            [FieldOffset(40)] // size = 8, padding = 0
            public EcsComponent* comp;

            [FieldOffset(48)] // size = 8, padding = 0
            public ecs_vector_t** vector;

            [FieldOffset(56)] // size = 1, padding = 0
            public CBool is_collection;

            [FieldOffset(57)] // size = 1, padding = 6
            public CBool is_inline_array;
        }

        // Struct @ meta.h:210:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_enum_constant_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(8)] // size = 4, padding = 4
            public int value;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_entity_t constant;
        }

        // Struct @ meta.h:226:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_bitmask_constant_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(8)] // size = 4, padding = 4
            public ecs_flags32_t value;

            [FieldOffset(16)] // size = 8, padding = 0
            public ecs_entity_t constant;
        }

        // Struct @ meta.h:194:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
        public struct ecs_member_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_entity_t type;

            [FieldOffset(16)] // size = 4, padding = 0
            public int count;

            [FieldOffset(20)] // size = 4, padding = 0
            public int offset;

            [FieldOffset(24)] // size = 8, padding = 0
            public ecs_entity_t unit;

            [FieldOffset(32)] // size = 4, padding = 4
            public ecs_size_t size;

            [FieldOffset(40)] // size = 8, padding = 0
            public ecs_entity_t member;
        }

        // Struct @ http.h:89:3 (flecs/addons/http.h)
        [StructLayout(LayoutKind.Explicit, Size = 2232, Pack = 8)]
        public struct ecs_http_reply_t
        {
            [FieldOffset(0)] // size = 4, padding = 4
            public int code;

            [FieldOffset(8)] // size = 1104, padding = 0
            public ecs_strbuf_t body;

            [FieldOffset(1112)] // size = 8, padding = 0
            public CString status;

            [FieldOffset(1120)] // size = 8, padding = 0
            public CString content_type;

            [FieldOffset(1128)] // size = 1104, padding = 0
            public ecs_strbuf_t headers;
        }

        // Struct @ http.h:55:3 (flecs/addons/http.h)
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_http_key_value_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public CString key;

            [FieldOffset(8)] // size = 8, padding = 0
            public CString value;
        }

        // Struct @ api_types.h:102:3 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_table_cache_iter_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_table_cache_hdr_t* cur;

            [FieldOffset(8)] // size = 8, padding = 0
            public ecs_table_cache_hdr_t* next;
        }

        // Struct @ meta.h:315:3 (flecs/addons/meta.h)
        [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
        public struct ecs_meta_type_op_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ecs_meta_type_op_kind_t kind;

            [FieldOffset(4)] // size = 4, padding = 0
            public ecs_size_t offset;

            [FieldOffset(8)] // size = 4, padding = 4
            public int count;

            [FieldOffset(16)] // size = 8, padding = 0
            public CString name;

            [FieldOffset(24)] // size = 4, padding = 0
            public int op_count;

            [FieldOffset(28)] // size = 4, padding = 0
            public ecs_size_t size;

            [FieldOffset(32)] // size = 8, padding = 0
            public ecs_entity_t type;

            [FieldOffset(40)] // size = 8, padding = 0
            public ecs_entity_t unit;

            [FieldOffset(48)] // size = 8, padding = 0
            public ecs_hashmap_t* members;
        }

        // Struct @ flecs.h:776:3
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
        public struct EcsComponent
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public ecs_size_t size;

            [FieldOffset(4)] // size = 4, padding = 0
            public ecs_size_t alignment;
        }

        // OpaqueType @ vector.h:88:29 (flecs/private/vector.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_vector_t
        {
        }

        // OpaqueType @ map.h:36:26 (flecs/private/map.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_map_t
        {
        }

        // OpaqueType @ flecs.h:126:28
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_world_t
        {
        }

        // OpaqueType @ api_types.h:40:29 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_sparse_t
        {
        }

        // OpaqueType @ api_types.h:28:28 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_table_t
        {
        }

        // OpaqueType @ flecs.h:132:28
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_query_t
        {
        }

        // OpaqueType @ flecs.h:113:14
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_poly_t
        {
        }

        // OpaqueType @ api_types.h:52:8 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_table_record_t
        {
        }

        // OpaqueType @ flecs.h:138:27
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_rule_t
        {
        }

        // OpaqueType @ snapshot.h:23:31 (flecs/addons/snapshot.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_snapshot_t
        {
        }

        // OpaqueType @ http.h:40:34 (flecs/addons/http.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_http_server_t
        {
        }

        // OpaqueType @ map.h:41:12 (flecs/private/map.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_bucket_t
        {
        }

        // OpaqueType @ hashmap.h:28:12 (flecs/private/hashmap.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_hm_bucket_t
        {
        }

        // OpaqueType @ flecs.h:156:29
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_mixins_t
        {
        }

        // OpaqueType @ api_types.h:46:32 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_id_record_t
        {
        }

        // OpaqueType @ api_types.h:49:39 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_query_table_node_t
        {
        }

        // OpaqueType @ api_types.h:173:12 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_rule_reg_t
        {
        }

        // OpaqueType @ api_types.h:175:12 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_rule_op_ctx_t
        {
        }

        // OpaqueType @ api_types.h:101:12 (flecs/private/api_types.h)
        [StructLayout(LayoutKind.Sequential)]
        public struct ecs_table_cache_hdr_t
        {
        }

        // Typedef @ api_defines.h:98:17 (flecs/private/api_defines.h)
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ecs_size_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public int Data;

            public static implicit operator int(ecs_size_t data) => data.Data;
            public static implicit operator ecs_size_t(int data) => new() { Data = data };
        }

        // Typedef @ map.h:37:18 (flecs/private/map.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_map_key_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ulong Data;

            public static implicit operator ulong(ecs_map_key_t data) => data.Data;
            public static implicit operator ecs_map_key_t(ulong data) => new() { Data = data };
        }

        // Typedef @ flecs.h:120:18
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_entity_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_id_t Data;

            public static implicit operator ecs_id_t(ecs_entity_t data) => data.Data;
            public static implicit operator ecs_entity_t(ecs_id_t data) => new() { Data = data };
        }

        // Typedef @ flecs.h:117:18
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_id_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ulong Data;

            public static implicit operator ulong(ecs_id_t data) => data.Data;
            public static implicit operator ecs_id_t(ulong data) => new() { Data = data };
        }

        // Typedef @ flecs.h:123:29
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_type_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_vector_t* Data;

            public static implicit operator ecs_vector_t*(ecs_type_t data) => data.Data;
            public static implicit operator ecs_type_t(ecs_vector_t* data) => new() { Data = data };
        }

        // Typedef @ os_api.h:43:19 (flecs/os_api.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_thread_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_thread_t data) => data.Data;
            public static implicit operator ecs_os_thread_t(UIntPtr data) => new() { Data = data };
        }

        // Typedef @ os_api.h:45:19 (flecs/os_api.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_mutex_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_mutex_t data) => data.Data;
            public static implicit operator ecs_os_mutex_t(UIntPtr data) => new() { Data = data };
        }

        // Typedef @ os_api.h:44:19 (flecs/os_api.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_cond_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_cond_t data) => data.Data;
            public static implicit operator ecs_os_cond_t(UIntPtr data) => new() { Data = data };
        }

        // Typedef @ os_api.h:46:19 (flecs/os_api.h)
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct ecs_os_dl_t
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public UIntPtr Data;

            public static implicit operator UIntPtr(ecs_os_dl_t data) => data.Data;
            public static implicit operator ecs_os_dl_t(UIntPtr data) => new() { Data = data };
        }

        // Typedef @ api_defines.h:94:18 (flecs/private/api_defines.h)
        [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
        public struct ecs_flags32_t
        {
            [FieldOffset(0)] // size = 4, padding = 0
            public uint Data;

            public static implicit operator uint(ecs_flags32_t data) => data.Data;
            public static implicit operator ecs_flags32_t(uint data) => new() { Data = data };
        }

        // Enum @ meta.h:165:3 (flecs/addons/meta.h)
        public enum ecs_primitive_kind_t : int
        {
            EcsBool = 1,
            EcsChar = 2,
            EcsByte = 3,
            EcsU8 = 4,
            EcsU16 = 5,
            EcsU32 = 6,
            EcsU64 = 7,
            EcsI8 = 8,
            EcsI16 = 9,
            EcsI32 = 10,
            EcsI64 = 11,
            EcsF32 = 12,
            EcsF64 = 13,
            EcsUPtr = 14,
            EcsIPtr = 15,
            EcsString = 16,
            EcsEntity = 17,
            EcsPrimitiveKindLast = 17
        }

        // Enum @ meta.h:139:3 (flecs/addons/meta.h)
        public enum ecs_type_kind_t : int
        {
            EcsPrimitiveType = 0,
            EcsBitmaskType = 1,
            EcsEnumType = 2,
            EcsStructType = 3,
            EcsArrayType = 4,
            EcsVectorType = 5,
            EcsTypeKindLast = 5
        }

        // Enum @ flecs.h:322:3
        public enum ecs_inout_kind_t : int
        {
            EcsInOutDefault = 0,
            EcsInOutFilter = 1,
            EcsInOut = 2,
            EcsIn = 3,
            EcsOut = 4
        }

        // Enum @ flecs.h:340:3
        public enum ecs_oper_kind_t : int
        {
            EcsAnd = 0,
            EcsOr = 1,
            EcsNot = 2,
            EcsOptional = 3,
            EcsAndFrom = 4,
            EcsOrFrom = 5,
            EcsNotFrom = 6
        }

        // Enum @ flecs.h:329:3
        public enum ecs_var_kind_t : int
        {
            EcsVarDefault = 0,
            EcsVarIsEntity = 1,
            EcsVarIsVariable = 2
        }

        // Enum @ http.h:65:3 (flecs/addons/http.h)
        public enum ecs_http_method_t : int
        {
            EcsHttpGet = 0,
            EcsHttpPost = 1,
            EcsHttpPut = 2,
            EcsHttpDelete = 3,
            EcsHttpOptions = 4,
            EcsHttpMethodUnsupported = 5
        }

        // Enum @ system.h:45:3 (flecs/addons/system.h)
        public enum ecs_system_status_t : int
        {
            EcsSystemStatusNone = 0,
            EcsSystemEnabled = 1,
            EcsSystemDisabled = 2,
            EcsSystemActivated = 3,
            EcsSystemDeactivated = 4
        }

        // Enum @ api_types.h:134:3 (flecs/private/api_types.h)
        public enum ecs_iter_kind_t : int
        {
            EcsIterEvalIndex = 0,
            EcsIterEvalChain = 1,
            EcsIterEvalCondition = 2,
            EcsIterEvalNone = 3
        }

        // Enum @ meta.h:303:3 (flecs/addons/meta.h)
        public enum ecs_meta_type_op_kind_t : int
        {
            EcsOpArray = 0,
            EcsOpVector = 1,
            EcsOpPush = 2,
            EcsOpPop = 3,
            EcsOpScope = 4,
            EcsOpEnum = 5,
            EcsOpBitmask = 6,
            EcsOpPrimitive = 7,
            EcsOpBool = 8,
            EcsOpChar = 9,
            EcsOpByte = 10,
            EcsOpU8 = 11,
            EcsOpU16 = 12,
            EcsOpU32 = 13,
            EcsOpU64 = 14,
            EcsOpI8 = 15,
            EcsOpI16 = 16,
            EcsOpI32 = 17,
            EcsOpI64 = 18,
            EcsOpF32 = 19,
            EcsOpF64 = 20,
            EcsOpUPtr = 21,
            EcsOpIPtr = 22,
            EcsOpString = 23,
            EcsOpEntity = 24
        }

        // MacroDefinition @ api_defines.h:150:9 (flecs/private/api_defines.h)
        public const uint ECS_ROW_MASK = 0x0FFFFFFFu;

        // MacroDefinition @ api_defines.h:151:9 (flecs/private/api_defines.h)
        public const uint ECS_ROW_FLAGS_MASK = ~ECS_ROW_MASK;

        // MacroDefinition @ api_defines.h:152:9 (flecs/private/api_defines.h)
        public const uint ECS_FLAG_OBSERVED = 1u << 31;

        // MacroDefinition @ api_defines.h:153:9 (flecs/private/api_defines.h)
        public const uint ECS_FLAG_OBSERVED_ID = 1u << 30;

        // MacroDefinition @ api_defines.h:154:9 (flecs/private/api_defines.h)
        public const uint ECS_FLAG_OBSERVED_OBJECT = 1u << 29;

        // MacroDefinition @ api_defines.h:155:9 (flecs/private/api_defines.h)
        public const uint ECS_FLAG_OBSERVED_ACYCLIC = 1u << 28;

        // MacroDefinition @ api_defines.h:160:9 (flecs/private/api_defines.h)
        public const ulong ECS_ROLE_MASK = 0xFFUL << 56;

        // MacroDefinition @ api_defines.h:161:9 (flecs/private/api_defines.h)
        public const ulong ECS_ENTITY_MASK = 0xFFFFFFFFUL;

        // MacroDefinition @ api_defines.h:162:9 (flecs/private/api_defines.h)
        public const ulong ECS_GENERATION_MASK = 0xFFFFUL << 32;

        // MacroDefinition @ api_defines.h:165:9 (flecs/private/api_defines.h)
        public const ulong ECS_COMPONENT_MASK = ~ECS_ROLE_MASK;

        // MacroDefinition @ api_defines.h:185:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_REMOVE = 1u << 0;

        // MacroDefinition @ api_defines.h:186:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_DELETE = 1u << 1;

        // MacroDefinition @ api_defines.h:187:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_THROW = 1u << 2;

        // MacroDefinition @ api_defines.h:188:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_MASK = ECS_ID_ON_DELETE_THROW | ECS_ID_ON_DELETE_REMOVE | ECS_ID_ON_DELETE_DELETE;

        // MacroDefinition @ api_defines.h:191:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_OBJECT_REMOVE = 1u << 3;

        // MacroDefinition @ api_defines.h:192:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_OBJECT_DELETE = 1u << 4;

        // MacroDefinition @ api_defines.h:193:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_OBJECT_THROW = 1u << 5;

        // MacroDefinition @ api_defines.h:194:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_ON_DELETE_OBJECT_MASK = ECS_ID_ON_DELETE_OBJECT_THROW | ECS_ID_ON_DELETE_OBJECT_REMOVE | ECS_ID_ON_DELETE_OBJECT_DELETE;

        // MacroDefinition @ api_defines.h:198:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_EXCLUSIVE = 1u << 6;

        // MacroDefinition @ api_defines.h:199:9 (flecs/private/api_defines.h)
        public const uint ECS_ID_DONT_INHERIT = 1u << 7;

        // MacroDefinition @ log.h:435:9 (flecs/addons/log.h)
        public const int ECS_INVALID_OPERATION = 1;

        // MacroDefinition @ log.h:436:9 (flecs/addons/log.h)
        public const int ECS_INVALID_PARAMETER = 2;

        // MacroDefinition @ log.h:437:9 (flecs/addons/log.h)
        public const int ECS_CONSTRAINT_VIOLATED = 3;

        // MacroDefinition @ log.h:438:9 (flecs/addons/log.h)
        public const int ECS_OUT_OF_MEMORY = 4;

        // MacroDefinition @ log.h:439:9 (flecs/addons/log.h)
        public const int ECS_OUT_OF_RANGE = 5;

        // MacroDefinition @ log.h:440:9 (flecs/addons/log.h)
        public const int ECS_UNSUPPORTED = 6;

        // MacroDefinition @ log.h:441:9 (flecs/addons/log.h)
        public const int ECS_INTERNAL_ERROR = 7;

        // MacroDefinition @ log.h:442:9 (flecs/addons/log.h)
        public const int ECS_ALREADY_DEFINED = 8;

        // MacroDefinition @ log.h:443:9 (flecs/addons/log.h)
        public const int ECS_MISSING_OS_API = 9;

        // MacroDefinition @ log.h:444:9 (flecs/addons/log.h)
        public const int ECS_OPERATION_FAILED = 10;

        // MacroDefinition @ log.h:445:9 (flecs/addons/log.h)
        public const int ECS_INVALID_CONVERSION = 11;

        // MacroDefinition @ log.h:446:9 (flecs/addons/log.h)
        public const int ECS_ID_IN_USE = 12;

        // MacroDefinition @ log.h:448:9 (flecs/addons/log.h)
        public const int ECS_INCONSISTENT_NAME = 20;

        // MacroDefinition @ log.h:449:9 (flecs/addons/log.h)
        public const int ECS_NAME_IN_USE = 21;

        // MacroDefinition @ log.h:450:9 (flecs/addons/log.h)
        public const int ECS_NOT_A_COMPONENT = 22;

        // MacroDefinition @ log.h:451:9 (flecs/addons/log.h)
        public const int ECS_INVALID_COMPONENT_SIZE = 23;

        // MacroDefinition @ log.h:452:9 (flecs/addons/log.h)
        public const int ECS_INVALID_COMPONENT_ALIGNMENT = 24;

        // MacroDefinition @ log.h:453:9 (flecs/addons/log.h)
        public const int ECS_COMPONENT_NOT_REGISTERED = 25;

        // MacroDefinition @ log.h:454:9 (flecs/addons/log.h)
        public const int ECS_INCONSISTENT_COMPONENT_ID = 26;

        // MacroDefinition @ log.h:455:9 (flecs/addons/log.h)
        public const int ECS_INCONSISTENT_COMPONENT_ACTION = 27;

        // MacroDefinition @ log.h:456:9 (flecs/addons/log.h)
        public const int ECS_MODULE_UNDEFINED = 28;

        // MacroDefinition @ log.h:457:9 (flecs/addons/log.h)
        public const int ECS_MISSING_SYMBOL = 29;

        // MacroDefinition @ log.h:459:9 (flecs/addons/log.h)
        public const int ECS_COLUMN_ACCESS_VIOLATION = 40;

        // MacroDefinition @ log.h:460:9 (flecs/addons/log.h)
        public const int ECS_COLUMN_INDEX_OUT_OF_RANGE = 41;

        // MacroDefinition @ log.h:461:9 (flecs/addons/log.h)
        public const int ECS_COLUMN_IS_NOT_SHARED = 42;

        // MacroDefinition @ log.h:462:9 (flecs/addons/log.h)
        public const int ECS_COLUMN_IS_SHARED = 43;

        // MacroDefinition @ log.h:463:9 (flecs/addons/log.h)
        public const int ECS_COLUMN_TYPE_MISMATCH = 45;

        // MacroDefinition @ log.h:465:9 (flecs/addons/log.h)
        public const int ECS_TYPE_INVALID_CASE = 62;

        // MacroDefinition @ log.h:467:9 (flecs/addons/log.h)
        public const int ECS_INVALID_WHILE_ITERATING = 70;

        // MacroDefinition @ log.h:468:9 (flecs/addons/log.h)
        public const int ECS_LOCKED_STORAGE = 71;

        // MacroDefinition @ log.h:469:9 (flecs/addons/log.h)
        public const int ECS_INVALID_FROM_WORKER = 72;

        // MacroDefinition @ log.h:476:9 (flecs/addons/log.h)
        public const string ECS_BLACK = "\033[1;30m";

        // MacroDefinition @ log.h:477:9 (flecs/addons/log.h)
        public const string ECS_RED = "\033[0;31m";

        // MacroDefinition @ log.h:478:9 (flecs/addons/log.h)
        public const string ECS_GREEN = "\033[0;32m";

        // MacroDefinition @ log.h:479:9 (flecs/addons/log.h)
        public const string ECS_YELLOW = "\033[0;33m";

        // MacroDefinition @ log.h:480:9 (flecs/addons/log.h)
        public const string ECS_BLUE = "\033[0;34m";

        // MacroDefinition @ log.h:481:9 (flecs/addons/log.h)
        public const string ECS_MAGENTA = "\033[0;35m";

        // MacroDefinition @ log.h:482:9 (flecs/addons/log.h)
        public const string ECS_CYAN = "\033[0;36m";

        // MacroDefinition @ log.h:483:9 (flecs/addons/log.h)
        public const string ECS_WHITE = "\033[1;37m";

        // MacroDefinition @ log.h:484:9 (flecs/addons/log.h)
        public const string ECS_GREY = "\033[0;37m";

        // MacroDefinition @ log.h:485:9 (flecs/addons/log.h)
        public const string ECS_NORMAL = "\033[0;49m";

        // MacroDefinition @ log.h:486:9 (flecs/addons/log.h)
        public const string ECS_BOLD = "\033[1;49m";

        // MacroDefinition @ strbuf.h:27:9 (flecs/private/strbuf.h)
        public const int ECS_STRBUF_ELEMENT_SIZE = 511;

        // MacroDefinition @ strbuf.h:28:9 (flecs/private/strbuf.h)
        public const int ECS_STRBUF_MAX_LIST_DEPTH = 32;

        // MacroDefinition @ flecs.h:167:9
        public const int ECS_MAX_ADD_REMOVE = 32;

        // MacroDefinition @ flecs.h:170:9
        public const int ECS_TERM_CACHE_SIZE = 4;

        // MacroDefinition @ flecs.h:173:9
        public const int ECS_TERM_DESC_CACHE_SIZE = 16;

        // MacroDefinition @ flecs.h:176:9
        public const int ECS_TRIGGER_DESC_EVENT_COUNT_MAX = 8;

        // MacroDefinition @ flecs.h:306:9
        public const int EcsDefaultSet = 0;

        // MacroDefinition @ flecs.h:307:9
        public const int EcsSelf = 1;

        // MacroDefinition @ flecs.h:308:9
        public const int EcsSuperSet = 2;

        // MacroDefinition @ flecs.h:309:9
        public const int EcsSubSet = 4;

        // MacroDefinition @ flecs.h:310:9
        public const int EcsCascade = 8;

        // MacroDefinition @ flecs.h:311:9
        public const int EcsAll = 16;

        // MacroDefinition @ flecs.h:312:9
        public const int EcsParent = 32;

        // MacroDefinition @ flecs.h:313:9
        public const int EcsNothing = 64;

        // MacroDefinition @ api_support.h:24:9 (flecs/private/api_support.h)
        public const int ECS_HI_COMPONENT_ID = 256;

        // MacroDefinition @ api_support.h:28:9 (flecs/private/api_support.h)
        public const int ECS_MAX_RECURSION = 512;

        // MacroDefinition @ api_support.h:31:9 (flecs/private/api_support.h)
        public const int ECS_MAX_TOKEN_SIZE = 256;

        // MacroDefinition @ api_support.h:38:9 (flecs/private/api_support.h)
        public const int FLECS__E0 = 0;

        // MacroDefinition @ flecs.h:886:9
        public const ulong ECS_ROLE = 1UL << 63;

        // MacroDefinition @ flecs.h:1148:9
        public const int EcsFirstUserComponentId = 32;

        // MacroDefinition @ flecs.h:1152:9
        public const int EcsFirstUserEntityId = ECS_HI_COMPONENT_ID + 128;

        // MacroDefinition @ rest.h:147:9 (flecs/addons/rest.h)
        public const int ECS_REST_DEFAULT_PORT = 27750;

        // MacroDefinition @ meta.h:70:9 (flecs/addons/meta.h)
        public const int ECS_MEMBER_DESC_CACHE_SIZE = 32;

        // MacroDefinition @ meta.h:324:9 (flecs/addons/meta.h)
        public const int ECS_META_MAX_SCOPE_DEPTH = 32;

        // MacroDefinition @ stats.h:18:9 (flecs/addons/stats.h)
        public const int ECS_STAT_WINDOW = 60;

        // MacroDefinition @ http.h:30:9 (flecs/addons/http.h)
        public const int ECS_HTTP_HEADER_COUNT_MAX = 32;

        // MacroDefinition @ http.h:33:9 (flecs/addons/http.h)
        public const int ECS_HTTP_QUERY_PARAM_COUNT_MAX = 32;

        #region C2CS.Runtime

        public static class Runtime
        {

            /// <summary>
            ///     A boolean value type with the same memory layout as a <see cref="byte" /> in both managed and unmanaged contexts;
            ///     equivalent to a standard bool found in C/C++/ObjC where <c>0</c> is <c>false</c> and any other value is
            ///     <c>true</c>.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CBool : IEquatable<CBool>
            {
                private readonly byte _value;

                private CBool(bool value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static implicit operator CBool(bool value)
                {
                    return FromBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="bool" /> to a <see cref="CBool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CBool" />.</returns>
                public static CBool FromBoolean(bool value)
                {
                    return new CBool(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static implicit operator bool(CBool value)
                {
                    return ToBoolean(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CBool" /> to a <see cref="bool" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="bool" />.</returns>
                public static bool ToBoolean(CBool value)
                {
                    return Convert.ToBoolean(value._value);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return ToBoolean(this).ToString();
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CBool b && Equals(b);
                }

                /// <inheritdoc />
                public bool Equals(CBool other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CBool left, CBool right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CBool left, CBool right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CBool" /> to compare.</param>
                /// <param name="right">The second <see cref="CBool" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CBool left, CBool right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the same memory layout as a <see cref="byte" /> in a managed context and <c>char</c> in
            ///     an unmanaged context.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CChar : IEquatable<byte>, IEquatable<CChar>
            {
                private readonly byte _value;

                private CChar(byte value)
                {
                    _value = Convert.ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static implicit operator CChar(byte value)
                {
                    return FromByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="byte" /> to a <see cref="CChar" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="CChar" />.</returns>
                public static CChar FromByte(byte value)
                {
                    return new CChar(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static implicit operator byte(CChar value)
                {
                    return ToByte(value);
                }

                /// <summary>
                ///     Converts the specified <see cref="CChar" /> to a <see cref="byte" />.
                /// </summary>
                /// <param name="value">The value.</param>
                /// <returns>A <see cref="byte" />.</returns>
                public static byte ToByte(CChar value)
                {
                    return value._value;
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CChar value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(byte other)
                {
                    return _value == other;
                }

                /// <inheritdoc />
                public bool Equals(CChar other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CChar left, CChar right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CChar left, CChar right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CChar" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CChar" /> to compare.</param>
                /// <param name="right">The second <see cref="CChar" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CChar left, CChar right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A value type with the memory layout of a <c>wchar_t</c> in an unmanaged context. The memory layout in a
            ///     managed context depends on the operating system or otherwise on preprocessor directives defines.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly struct CCharWide : IEquatable<CCharWide>
            {
#if SIZEOF_WCHAR_T_1
    private readonly byte _value;
#elif SIZEOF_WCHAR_T_2
    private readonly ushort _value;
#elif SIZEOF_WCHAR_T_4
    private readonly uint _value;
#else
                private readonly ushort _value;
#endif

                private CCharWide(byte value)
                {
#if SIZEOF_WCHAR_T_1
        _value = Convert.ToByte(value);
#elif SIZEOF_WCHAR_T_2
        _value = Convert.ToUInt16(value);
#elif SIZEOF_WCHAR_T_4
        _value = Convert.ToUInt32(value);
#else
                    _value = Convert.ToUInt16(value);
#endif
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return _value.ToString(CultureInfo.InvariantCulture);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CCharWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CCharWide other)
                {
                    return _value == other._value;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _value.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CCharWide left, CCharWide right)
                {
                    return left._value == right._value;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CCharWide left, CCharWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CCharWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CCharWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CCharWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CCharWide left, CCharWide right)
                {
                    return left._value == right._value;
                }
            }

            /// <summary>
            ///     A pointer value type of bytes that represent a string; the C type `char*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CString : IEquatable<CString>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CString" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CString(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CString" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CString(string s)
                {
                    _pointer = CStrings.CString(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static explicit operator CString(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromIntPtr(nint value)
                {
                    return new CString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CString" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString From(byte* value)
                {
                    return new CString((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CString value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CString value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CString" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CString" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CString value)
                {
                    return CStrings.String(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static implicit operator CString(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CString" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CString" />.
                /// </returns>
                public static CString FromString(string s)
                {
                    return CStrings.CString(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.String(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CString value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CString other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CString left, CString right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CString" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CString" /> to compare.</param>
                /// <param name="right">The second <see cref="CString" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CString left, CString right)
                {
                    return left._pointer == right._pointer;
                }
            }

            /// <summary>
            ///     The collection of utility methods for interoperability with C style strings in C#.
            /// </summary>
            public static unsafe class CStrings
            {
                private static readonly Dictionary<uint, CString> StringHashesToPointers = new();
                private static readonly Dictionary<nint, string> PointersToStrings = new();
                private static readonly Dictionary<uint, CStringWide> StringHashesToPointersWide = new();
                private static readonly Dictionary<nint, string> PointersToStringsWide = new();

                /// <summary>
                ///     Converts a C style string (ANSI or UTF-8) of type `char` (one dimensional byte array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string String(CString value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStrings.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointers.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStrings[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringAnsi(value._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointers.Add(hash, value);
                    PointersToStrings.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a C style string (unicode) of type `wchar_t` (one dimensional ushort array
                ///     terminated by a <c>0x0</c>) to a UTF-16 <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="value">A pointer to the C string.</param>
                /// <returns>A <see cref="string" /> equivalent of <paramref name="value" />.</returns>
                public static string StringWide(CStringWide value)
                {
                    if (value.IsNull)
                    {
                        return string.Empty;
                    }

                    if (PointersToStringsWide.TryGetValue(value._pointer, out var result))
                    {
                        return result;
                    }

                    var hash = Djb2((byte*)value._pointer);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var pointer2))
                    {
                        result = PointersToStringsWide[pointer2._pointer];
                        return result;
                    }

                    // calls ASM/C/C++ functions to calculate length and then "FastAllocate" the string with the GC
                    // https://mattwarren.org/2016/05/31/Strings-and-the-CLR-a-Special-Relationship/
                    result = Marshal.PtrToStringUni(pointer2._pointer);

                    if (string.IsNullOrEmpty(result))
                    {
                        return string.Empty;
                    }

                    StringHashesToPointersWide.Add(hash, value);
                    PointersToStringsWide.Add(value._pointer, result);

                    return result;
                }

                /// <summary>
                ///     Converts a UTF-16 <see cref="string" /> to a C style string (one dimensional byte array terminated by a
                ///     <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CString CString(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointers.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalAnsi(str);
                    StringHashesToPointers.Add(hash, new CString(pointer));
                    PointersToStrings.Add(pointer, str);

                    return new CString(pointer);
                }

                /// <summary>
                ///     Converts a C string pointer (one dimensional byte array terminated by a
                ///     <c>0x0</c>) for a specified <see cref="string" /> by allocating and copying if not already cached.
                /// </summary>
                /// <param name="str">The <see cref="string" />.</param>
                /// <returns>A C string pointer.</returns>
                public static CStringWide CStringWide(string str)
                {
                    var hash = Djb2(str);
                    if (StringHashesToPointersWide.TryGetValue(hash, out var r))
                    {
                        return r;
                    }

                    // ReSharper disable once JoinDeclarationAndInitializer
                    var pointer = Marshal.StringToHGlobalUni(str);
                    StringHashesToPointersWide.Add(hash, new CStringWide(pointer));
                    PointersToStringsWide.Add(pointer, str);

                    return new CStringWide(pointer);
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `char` (multi-dimensional array of one
                ///     dimensional byte arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CString* CStringArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CString*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CString(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Converts an array of strings to an array of C strings of type `wchar_t` (multi-dimensional array of one
                ///     dimensional ushort arrays each terminated by a <c>0x0</c>) by allocating and copying if not already cached.
                /// </summary>
                /// <remarks>
                ///     <para>Calls <see cref="CString" />.</para>
                /// </remarks>
                /// <param name="values">The strings.</param>
                /// <returns>An array pointer of C string pointers. You are responsible for freeing the returned pointer.</returns>
                public static CStringWide* CStringWideArray(ReadOnlySpan<string> values)
                {
                    var pointerSize = IntPtr.Size;
                    var result = (CStringWide*)Marshal.AllocHGlobal(pointerSize * values.Length);
                    for (var i = 0; i < values.Length; ++i)
                    {
                        var @string = values[i];
                        var cString = CStringWide(@string);
                        result[i] = cString;
                    }

                    return result;
                }

                /// <summary>
                ///     Frees the memory for all previously allocated C strings and releases references to all <see cref="string" />
                ///     objects which happened during <see cref="String" />, <see cref="StringWide" />, <see cref="CString" />
                ///     or <see cref="CStringWide" />. Does <b>not</b> garbage collect.
                /// </summary>
                public static void FreeAllStrings()
                {
                    foreach (var (ptr, _) in PointersToStrings)
                    {
                        Marshal.FreeHGlobal(ptr);
                    }

                    // We can not guarantee that the application has not a strong reference the string since it was allocated,
                    //  so we have to let the GC take the wheel here. Thus, this method should NOT garbage collect; that's
                    //  on the responsibility of the application developer. The best we can do is just remove any and all strong
                    //  references we have here to the strings.

                    StringHashesToPointers.Clear();
                    PointersToStrings.Clear();
                }

                /// <summary>
                ///     Frees the memory for specific previously allocated C strings and releases associated references to
                ///     <see cref="string" /> objects which happened during <see cref="String" /> or
                ///     <see cref="CString" />. Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="pointers">The C string pointers.</param>
                /// <param name="count">The number of C string pointers.</param>
                public static void FreeCStrings(CString* pointers, int count)
                {
                    for (var i = 0; i < count; i++)
                    {
                        var ptr = pointers[i];
                        FreeCString(ptr);
                    }

                    Marshal.FreeHGlobal((IntPtr)pointers);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="String" /> or <see cref="CString" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCString(CString value)
                {
                    if (!PointersToStrings.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointers.Remove(hash);
                    PointersToStrings.Remove(value._pointer);
                }

                /// <summary>
                ///     Frees the memory for the previously allocated C string and releases reference to the
                ///     <see cref="string" /> object which happened during <see cref="StringWide" /> or <see cref="CStringWide" />.
                ///     Does <b>not</b> garbage collect.
                /// </summary>
                /// <param name="value">The string.</param>
                public static void FreeCStringWide(CStringWide value)
                {
                    if (!PointersToStringsWide.ContainsKey(value._pointer))
                    {
                        return;
                    }

                    Marshal.FreeHGlobal(value);
                    var hash = Djb2(value);
                    StringHashesToPointersWide.Remove(hash);
                    PointersToStringsWide.Remove(value._pointer);
                }

                // djb2 is named after https://en.wikipedia.org/wiki/Daniel_J._Bernstein
                //  References:
                //  (1) https://stackoverflow.com/a/7666577/2171957
                //  (2) http://www.cse.yorku.ca/~oz/hash.html
                //  (3) https://groups.google.com/g/comp.lang.c/c/lSKWXiuNOAk/m/zstZ3SRhCjgJ
                private static uint Djb2(byte* str)
                {
                    uint hash = 5381;

                    unchecked
                    {
                        uint c;
                        while ((c = *str++) != 0)
                        {
                            hash = (hash << 5) + hash + c; // hash * 33 + c
                        }
                    }

                    return hash;
                }

                private static uint Djb2(string str)
                {
                    uint hash = 5381;

                    // ReSharper disable once ForeachCanBeConvertedToQueryUsingAnotherGetEnumerator
                    foreach (var c in str)
                    {
                        hash = (hash << 5) + hash + c; // hash * 33 + c
                    }

                    return hash;
                }
            }

            /// <summary>
            ///     A pointer value type that represents a wide string; C type `wchar_t*`.
            /// </summary>
            [StructLayout(LayoutKind.Sequential)]
            public readonly unsafe struct CStringWide : IEquatable<CStringWide>
            {
                internal readonly nint _pointer;

                /// <summary>
                ///     Gets a value indicating whether this <see cref="CStringWide" /> is a null pointer.
                /// </summary>
                public bool IsNull => _pointer == 0;

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(byte* value)
                {
                    _pointer = (nint)value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                public CStringWide(nint value)
                {
                    _pointer = value;
                }

                /// <summary>
                ///     Initializes a new instance of the <see cref="CStringWide" /> struct.
                /// </summary>
                /// <param name="s">The string value.</param>
                public CStringWide(string s)
                {
                    _pointer = CStrings.CStringWide(s);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static explicit operator CStringWide(nint value)
                {
                    return FromIntPtr(value);
                }

                /// <summary>
                ///     Performs an explicit conversion from a <see cref="IntPtr" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromIntPtr(nint value)
                {
                    return new CStringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(byte* value)
                {
                    return From(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a byte pointer to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="value">The pointer value.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide From(byte* value)
                {
                    return new CStringWide((nint)value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static implicit operator nint(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="IntPtr" />.
                /// </summary>
                /// <param name="value">The pointer.</param>
                /// <returns>
                ///     The resulting <see cref="IntPtr" />.
                /// </returns>
                public static nint ToIntPtr(CStringWide value)
                {
                    return value._pointer;
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static implicit operator string(CStringWide value)
                {
                    return ToString(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="CStringWide" /> to a <see cref="string" />.
                /// </summary>
                /// <param name="value">The <see cref="CStringWide" />.</param>
                /// <returns>
                ///     The resulting <see cref="string" />.
                /// </returns>
                public static string ToString(CStringWide value)
                {
                    return CStrings.StringWide(value);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static implicit operator CStringWide(string s)
                {
                    return FromString(s);
                }

                /// <summary>
                ///     Performs an implicit conversion from a <see cref="string" /> to a <see cref="CStringWide" />.
                /// </summary>
                /// <param name="s">The <see cref="string" />.</param>
                /// <returns>
                ///     The resulting <see cref="CStringWide" />.
                /// </returns>
                public static CStringWide FromString(string s)
                {
                    return CStrings.CStringWide(s);
                }

                /// <inheritdoc />
                public override string ToString()
                {
                    return CStrings.StringWide(this);
                }

                /// <inheritdoc />
                public override bool Equals(object? obj)
                {
                    return obj is CStringWide value && Equals(value);
                }

                /// <inheritdoc />
                public bool Equals(CStringWide other)
                {
                    return _pointer == other._pointer;
                }

                /// <inheritdoc />
                public override int GetHashCode()
                {
                    return _pointer.GetHashCode();
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool operator ==(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CBool" /> structures are not equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <c>false</c>.</returns>
                public static bool operator !=(CStringWide left, CStringWide right)
                {
                    return !(left == right);
                }

                /// <summary>
                ///     Returns a value that indicates whether two specified <see cref="CStringWide" /> structures are equal.
                /// </summary>
                /// <param name="left">The first <see cref="CStringWide" /> to compare.</param>
                /// <param name="right">The second <see cref="CStringWide" /> to compare.</param>
                /// <returns><c>true</c> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <c>false</c>.</returns>
                public static bool Equals(CStringWide left, CStringWide right)
                {
                    return left._pointer == right._pointer;
                }
            }
        }

        #endregion
    }
}

