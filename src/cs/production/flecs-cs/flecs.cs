
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs (v1.4.21.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

using C2CS;

#nullable enable
#pragma warning disable 1591

public static unsafe partial class flecs
{
    private const string LibraryName = "flecs";

    // Function @ log.h:38:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_trace(int level, CString8U file, int line, CString8U fmt);

    // Function @ log.h:46:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_warn(CString8U file, int line, CString8U fmt);

    // Function @ log.h:53:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_err(CString8U file, int line, CString8U fmt);

    // Function @ log.h:60:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_fatal(CString8U file, int line, CString8U fmt);

    // Function @ log.h:67:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_deprecated(CString8U file, int line, CString8U msg);

    // Function @ log.h:73:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void ecs_log_push();

    // Function @ log.h:76:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void ecs_log_pop();

    // Function @ log.h:135:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_strerror(int error_code);

    // Function @ log.h:140:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_abort(int error_code, CString8U file, int line, CString8U fmt);

    // Function @ log.h:152:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_assert(CBool condition, int error_code, CString8U condition_str, CString8U file, int line, CString8U fmt);

    // Function @ log.h:170:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_parser_error(CString8U name, CString8U expr, long column, CString8U fmt);

    // Function @ log.h:178:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_parser_errorv(CString8U name, CString8U expr, long column, CString8U fmt, IntPtr args);

    // Function @ vector.h:98:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* _ecs_vector_new(ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:111:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* _ecs_vector_from_array(ecs_size_t elem_size, short offset, int elem_count, void* array);

    // Function @ vector.h:122:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_zero(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:132:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_free(ecs_vector_t* vector);

    // Function @ vector.h:137:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_clear(ecs_vector_t* vector);

    // Function @ vector.h:142:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_assert_size(ecs_vector_t* vector_inout, ecs_size_t elem_size);

    // Function @ vector.h:148:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_assert_alignment(ecs_vector_t* vector, ecs_size_t elem_alignment);

    // Function @ vector.h:154:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_add(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset);

    // Function @ vector.h:167:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_addn(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:181:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_get(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

    // Function @ vector.h:195:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_last(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:209:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_min_size(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:221:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_min_count(ecs_vector_t** vector_inout, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:235:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_remove_last(ecs_vector_t* vector);

    // Function @ vector.h:240:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern CBool _ecs_vector_pop(ecs_vector_t* vector, ecs_size_t elem_size, short offset, void* value);

    // Function @ vector.h:251:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_move_index(ecs_vector_t** dst, ecs_vector_t* src, ecs_size_t elem_size, short offset, int index);

    // Function @ vector.h:266:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_remove(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

    // Function @ vector.h:280:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_reclaim(ecs_vector_t** vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:290:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_grow(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:301:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_size(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:316:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_count(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:330:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int ecs_vector_count(ecs_vector_t* vector);

    // Function @ vector.h:335:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int ecs_vector_size(ecs_vector_t* vector);

    // Function @ vector.h:340:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_first(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:353:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_sort(ecs_vector_t* vector, ecs_size_t elem_size, short offset, ecs_comparator_t compare_action);

    // Function @ vector.h:364:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_memory(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int* allocd, int* used);

    // Function @ vector.h:379:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* _ecs_vector_copy(ecs_vector_t* src, ecs_size_t elem_size, short offset);

    // Function @ map.h:49:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern ecs_map_t* _ecs_map_new(ecs_size_t elem_size, int elem_count);

    // Function @ map.h:58:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_get(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

    // Function @ map.h:71:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_get_ptr(ecs_map_t* map, ecs_map_key_t key);

    // Function @ map.h:80:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_map_has(ecs_map_t* map, ecs_map_key_t key);

    // Function @ map.h:86:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_ensure(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

    // Function @ map.h:96:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_set(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key, void* payload);

    // Function @ map.h:107:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_free(ecs_map_t* map);

    // Function @ map.h:112:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_remove(ecs_map_t* map, ecs_map_key_t key);

    // Function @ map.h:118:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_clear(ecs_map_t* map);

    // Function @ map.h:123:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern int ecs_map_count(ecs_map_t* map);

    // Function @ map.h:128:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern int ecs_map_bucket_count(ecs_map_t* map);

    // Function @ map.h:133:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern ecs_map_iter_t ecs_map_iter(ecs_map_t* map);

    // Function @ map.h:138:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_next(ecs_map_iter_t* iter, ecs_size_t elem_size, ecs_map_key_t* key);

    // Function @ map.h:148:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_next_ptr(ecs_map_iter_t* iter, ecs_map_key_t* key);

    // Function @ map.h:157:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_grow(ecs_map_t* map, int elem_count);

    // Function @ map.h:163:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_set_size(ecs_map_t* map, int elem_count);

    // Function @ map.h:169:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern ecs_map_t* ecs_map_copy(ecs_map_t* map);

    // Function @ map.h:174:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_memory(ecs_map_t* map, int* allocd, int* used);

    // Function @ strbuf.h:80:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_append(ecs_strbuf_t* buffer, CString8U fmt);

    // Function @ strbuf.h:88:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_vappend(ecs_strbuf_t* buffer, CString8U fmt, IntPtr args);

    // Function @ strbuf.h:96:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstr(ecs_strbuf_t* buffer, CString8U str);

    // Function @ strbuf.h:103:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_mergebuff(ecs_strbuf_t* dst_buffer, ecs_strbuf_t* src_buffer);

    // Function @ strbuf.h:110:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstr_zerocpy(ecs_strbuf_t* buffer, CString8U str);

    // Function @ strbuf.h:117:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstr_zerocpy_const(ecs_strbuf_t* buffer, CString8U str);

    // Function @ strbuf.h:124:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstrn(ecs_strbuf_t* buffer, CString8U str, int n);

    // Function @ strbuf.h:131:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_strbuf_get(ecs_strbuf_t* buffer);

    // Function @ strbuf.h:136:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_reset(ecs_strbuf_t* buffer);

    // Function @ strbuf.h:141:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_list_push(ecs_strbuf_t* buffer, CString8U list_open, CString8U separator);

    // Function @ strbuf.h:148:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_list_pop(ecs_strbuf_t* buffer, CString8U list_close);

    // Function @ strbuf.h:154:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_list_next(ecs_strbuf_t* buffer);

    // Function @ strbuf.h:159:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_list_append(ecs_strbuf_t* buffer, CString8U fmt);

    // Function @ strbuf.h:166:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_list_appendstr(ecs_strbuf_t* buffer, CString8U str);

    // Function @ os_api.h:258:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_init();

    // Function @ os_api.h:261:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_fini();

    // Function @ os_api.h:264:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_set_api(ecs_os_api_t* os_api);

    // Function @ os_api.h:268:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_set_api_defaults();

    // Function @ os_api.h:387:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_log(CString8U fmt);

    // Function @ os_api.h:390:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_warn(CString8U fmt);

    // Function @ os_api.h:393:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_err(CString8U fmt);

    // Function @ os_api.h:396:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_dbg(CString8U fmt);

    // Function @ os_api.h:399:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_os_strerror(int err);

    // Function @ os_api.h:415:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_sleepf(double t);

    // Function @ os_api.h:420:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern double ecs_time_measure(ecs_time_t* start);

    // Function @ os_api.h:425:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern ecs_time_t ecs_time_sub(ecs_time_t t1, ecs_time_t t2);

    // Function @ os_api.h:431:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern double ecs_time_to_double(ecs_time_t t);

    // Function @ os_api.h:435:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_os_memdup(void* src, ecs_size_t size);

    // Function @ os_api.h:441:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_heap();

    // Function @ os_api.h:445:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_threading();

    // Function @ os_api.h:449:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_time();

    // Function @ os_api.h:453:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_logging();

    // Function @ os_api.h:457:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_dl();

    // Function @ os_api.h:461:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_modules();

    // Function @ api_support.h:45:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_module_path_from_c(CString8U c_name);

    // Function @ api_support.h:49:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_component_has_actions(ecs_world_t* world, ecs_entity_t component);

    // Function @ api_support.h:57:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_identifier_is_0(CString8U id);

    // Function @ api_support.h:60:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_identifier_is_var(CString8U id);

    // Function @ api_support.h:67:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern void ecs_default_ctor(ecs_world_t* world, ecs_entity_t component, ecs_entity_t* entity_ptr, void* ptr, ulong size, int count, void* ctx);

    // Function @ type.h:17:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_type_str(ecs_world_t* world, ecs_type_t type);

    // Function @ type.h:22:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_type_from_str(ecs_world_t* world, CString8U expr);

    // Function @ type.h:27:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern int ecs_type_index_of(ecs_type_t type, int offset, ecs_id_t id);

    // Function @ type.h:33:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_type_has_id(ecs_world_t* world, ecs_type_t type, ecs_id_t id, CBool owned);

    // Function @ type.h:40:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern int ecs_type_match(ecs_world_t* world, ecs_table_t* table, ecs_type_t type, int offset, ecs_id_t id, ecs_entity_t rel, int min_depth, int max_depth, ecs_entity_t* subject_out, int* count_out);

    // Function @ flecs.h:932:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_init();

    // Function @ flecs.h:939:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_mini();

    // Function @ flecs.h:949:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_init_w_args(int argc, CString8U* argv);

    // Function @ flecs.h:960:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_fini(ecs_world_t* world);

    // Function @ flecs.h:971:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_atfini(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

    // Function @ flecs.h:984:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_run_post_frame(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

    // Function @ flecs.h:996:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_quit(ecs_world_t* world);

    // Function @ flecs.h:1004:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_should_quit(ecs_world_t* world);

    // Function @ flecs.h:1014:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_component_actions_w_id(ecs_world_t* world, ecs_id_t id, EcsComponentLifecycle* actions);

    // Function @ flecs.h:1027:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_context(ecs_world_t* world, void* ctx);

    // Function @ flecs.h:1039:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_context(ecs_world_t* world);

    // Function @ flecs.h:1049:25 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_info_t* ecs_get_world_info(ecs_world_t* world);

    // Function @ flecs.h:1061:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_dim(ecs_world_t* world, int entity_count);

    // Function @ flecs.h:1081:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_entity_range(ecs_world_t* world, ecs_entity_t id_start, ecs_entity_t id_end);

    // Function @ flecs.h:1097:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_enable_range_check(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1118:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_enable_locking(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1128:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_lock(ecs_world_t* world);

    // Function @ flecs.h:1137:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_unlock(ecs_world_t* world);

    // Function @ flecs.h:1151:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_begin_wait(ecs_world_t* world);

    // Function @ flecs.h:1161:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_end_wait(ecs_world_t* world);

    // Function @ flecs.h:1182:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_tracing_enable(int level);

    // Function @ flecs.h:1191:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_tracing_color_enable(CBool enabled);

    // Function @ flecs.h:1205:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_measure_frame_time(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1219:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_measure_system_time(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1239:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_target_fps(ecs_world_t* world, float fps);

    // Function @ flecs.h:1245:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_threads(ecs_world_t* world);

    // Function @ flecs.h:1262:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_id(ecs_world_t* world);

    // Function @ flecs.h:1280:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_low_id(ecs_world_t* world);

    // Function @ flecs.h:1292:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_w_id(ecs_world_t* world, ecs_id_t id);

    // Function @ flecs.h:1315:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_entity_init(ecs_world_t* world, ecs_entity_desc_t* desc);

    // Function @ flecs.h:1346:21 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t* ecs_bulk_init(ecs_world_t* world, ecs_bulk_desc_t* desc);

    // Function @ flecs.h:1364:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_component_init(ecs_world_t* world, ecs_component_desc_t* desc);

    // Function @ flecs.h:1387:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_type_init(ecs_world_t* world, ecs_type_desc_t* desc);

    // Function @ flecs.h:1401:21 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t* ecs_bulk_new_w_id(ecs_world_t* world, ecs_id_t id, int count);

    // Function @ flecs.h:1418:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_clone(ecs_world_t* world, ecs_entity_t dst, ecs_entity_t src, CBool copy_value);

    // Function @ flecs.h:1441:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_add_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1456:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_remove_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1483:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_enable_component_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool enable);

    // Function @ flecs.h:1500:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_component_enabled_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1521:10 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_id_t ecs_make_pair(ecs_entity_t relation, ecs_entity_t @object);

    // Function @ flecs.h:1542:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_clear(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1556:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_delete(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1568:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_delete_with(ecs_world_t* world, ecs_id_t id);

    // Function @ flecs.h:1580:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_remove_all(ecs_world_t* world, ecs_id_t id);

    // Function @ flecs.h:1602:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1620:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_ref_w_id(ecs_world_t* world, ecs_ref_t* @ref, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1636:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_case(ecs_world_t* world, ecs_entity_t e, ecs_entity_t sw);

    // Function @ flecs.h:1664:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_mut_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool* is_added);

    // Function @ flecs.h:1684:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_emplace_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1700:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_modified_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1719:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, ulong size, void* ptr);

    // Function @ flecs.h:1754:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_valid(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:1767:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_alive(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:1777:10 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_id_t ecs_strip_generation(ecs_entity_t e);

    // Function @ flecs.h:1797:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_alive(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:1825:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_ensure(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:1837:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_exists(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:1848:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_get_type(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1859:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_get_table(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1870:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_typeid(ecs_world_t* world, ecs_id_t e);

    // Function @ flecs.h:1882:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_get_name(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1894:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_get_symbol(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1910:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_name(ecs_world_t* world, ecs_entity_t entity, CString8U name);

    // Function @ flecs.h:1927:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_symbol(ecs_world_t* world, ecs_entity_t entity, CString8U symbol);

    // Function @ flecs.h:1940:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_role_str(ecs_entity_t entity);

    // Function @ flecs.h:1953:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_id_str(ecs_world_t* world, ecs_id_t id);

    // Function @ flecs.h:1958:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_id_str_w_buf(ecs_world_t* world, ecs_id_t id, CString8U buffer, ulong buffer_len);

    // Function @ flecs.h:1974:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_has_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1994:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_object(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, int index);

    // Function @ flecs.h:2019:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_object_for_id(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, ecs_id_t id);

    // Function @ flecs.h:2035:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_enable(ecs_world_t* world, ecs_entity_t entity, CBool enabled);

    // Function @ flecs.h:2048:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_count_id(ecs_world_t* world, ecs_id_t entity);

    // Function @ flecs.h:2069:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup(ecs_world_t* world, CString8U name);

    // Function @ flecs.h:2083:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup_child(ecs_world_t* world, ecs_entity_t parent, CString8U name);

    // Function @ flecs.h:2107:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString8U path, CString8U sep, CString8U prefix, CBool recursive);

    // Function @ flecs.h:2124:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup_symbol(ecs_world_t* world, CString8U symbol, CBool lookup_as_path);

    // Function @ flecs.h:2131:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_use(ecs_world_t* world, ecs_entity_t entity, CString8U name);

    // Function @ flecs.h:2162:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_get_path_w_sep(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t child, CString8U sep, CString8U prefix);

    // Function @ flecs.h:2185:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_from_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString8U path, CString8U sep, CString8U prefix);

    // Function @ flecs.h:2207:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_add_path_w_sep(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t parent, CString8U path, CString8U sep, CString8U prefix);

    // Function @ flecs.h:2235:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_scope(ecs_world_t* world, ecs_entity_t scope);

    // Function @ flecs.h:2247:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_scope(ecs_world_t* world);

    // Function @ flecs.h:2258:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_with(ecs_world_t* world, ecs_id_t id);

    // Function @ flecs.h:2270:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_with(ecs_world_t* world);

    // Function @ flecs.h:2283:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_set_name_prefix(ecs_world_t* world, CString8U prefix);

    // Function @ flecs.h:2308:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_term_iter(ecs_world_t* world, ecs_term_t* term);

    // Function @ flecs.h:2322:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_next(ecs_iter_t* it);

    // Function @ flecs.h:2331:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_id_is_set(ecs_term_id_t* id);

    // Function @ flecs.h:2346:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_initialized(ecs_term_t* term);

    // Function @ flecs.h:2373:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_trivial(ecs_term_t* term);

    // Function @ flecs.h:2397:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_term_finalize(ecs_world_t* world, CString8U name, ecs_term_t* term);

    // Function @ flecs.h:2411:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_term_t ecs_term_copy(ecs_term_t* src);

    // Function @ flecs.h:2425:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_term_t ecs_term_move(ecs_term_t* src);

    // Function @ flecs.h:2435:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_term_fini(ecs_term_t* term);

    // Function @ flecs.h:2446:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_id_match(ecs_id_t id, ecs_id_t pattern);

    // Function @ flecs.h:2456:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_id_is_pair(ecs_id_t id);

    // Function @ flecs.h:2465:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_id_is_wildcard(ecs_id_t id);

    // Function @ flecs.h:2497:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_filter_init(ecs_world_t* world, ecs_filter_t* filter_out, ecs_filter_desc_t* desc);

    // Function @ flecs.h:2508:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_filter_fini(ecs_filter_t* filter);

    // Function @ flecs.h:2525:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_filter_finalize(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ flecs.h:2534:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_term_str(ecs_world_t* world, ecs_term_t* term);

    // Function @ flecs.h:2543:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_filter_str(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ flecs.h:2557:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_filter_iter(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ flecs.h:2571:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_filter_chain_iter(ecs_iter_t* it, ecs_filter_t* filter);

    // Function @ flecs.h:2585:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_filter_next(ecs_iter_t* iter);

    // Function @ flecs.h:2590:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_filter_move(ecs_filter_t* dst, ecs_filter_t* src);

    // Function @ flecs.h:2596:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_filter_copy(ecs_filter_t* dst, ecs_filter_t* src);

    // Function @ flecs.h:2642:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_query_t* ecs_query_init(ecs_world_t* world, ecs_query_desc_t* desc);

    // Function @ flecs.h:2654:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_query_fini(ecs_query_t* query);

    // Function @ flecs.h:2664:21 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_filter_t* ecs_query_get_filter(ecs_query_t* query);

    // Function @ flecs.h:2695:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_query_iter(ecs_world_t* world, ecs_query_t* query);

    // Function @ flecs.h:2710:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_query_iter_page(ecs_world_t* world, ecs_query_t* query, int offset, int limit);

    // Function @ flecs.h:2726:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_next(ecs_iter_t* iter);

    // Function @ flecs.h:2745:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_next_worker(ecs_iter_t* it, int stage_current, int stage_count);

    // Function @ flecs.h:2761:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_changed(ecs_query_t* query);

    // Function @ flecs.h:2773:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_orphaned(ecs_query_t* query);

    // Function @ flecs.h:2798:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_trigger_init(ecs_world_t* world, ecs_trigger_desc_t* desc);

    // Function @ flecs.h:2811:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_trigger_ctx(ecs_world_t* world, ecs_entity_t trigger);

    // Function @ flecs.h:2825:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_trigger_binding_ctx(ecs_world_t* world, ecs_entity_t trigger);

    // Function @ flecs.h:2860:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_emit(ecs_world_t* world, ecs_event_desc_t* desc);

    // Function @ flecs.h:2881:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_observer_init(ecs_world_t* world, ecs_observer_desc_t* desc);

    // Function @ flecs.h:2886:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_observer_ctx(ecs_world_t* world, ecs_entity_t observer);

    // Function @ flecs.h:2891:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_observer_binding_ctx(ecs_world_t* world, ecs_entity_t observer);

    // Function @ flecs.h:2927:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_term_w_size(ecs_iter_t* it, ulong size, int index);

    // Function @ flecs.h:2941:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_readonly(ecs_iter_t* it, int index);

    // Function @ flecs.h:2952:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_set(ecs_iter_t* it, int index);

    // Function @ flecs.h:2966:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_owned(ecs_iter_t* it, int index);

    // Function @ flecs.h:2983:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_iter_str(ecs_iter_t* it);

    // Function @ flecs.h:3005:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_iter_find_column(ecs_iter_t* it, ecs_id_t id);

    // Function @ flecs.h:3037:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_iter_column_w_size(ecs_iter_t* it, ulong size, int index);

    // Function @ flecs.h:3051:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_iter_column_size(ecs_iter_t* it, int index);

    // Function @ flecs.h:3082:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern float ecs_frame_begin(ecs_world_t* world, float delta_time);

    // Function @ flecs.h:3093:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_frame_end(ecs_world_t* world);

    // Function @ flecs.h:3116:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_staging_begin(ecs_world_t* world);

    // Function @ flecs.h:3129:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_staging_end(ecs_world_t* world);

    // Function @ flecs.h:3143:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_merge(ecs_world_t* world);

    // Function @ flecs.h:3156:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_defer_begin(ecs_world_t* world);

    // Function @ flecs.h:3165:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_deferred(ecs_world_t* world);

    // Function @ flecs.h:3177:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_defer_end(ecs_world_t* world);

    // Function @ flecs.h:3197:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_automerge(ecs_world_t* world, CBool automerge);

    // Function @ flecs.h:3215:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_stages(ecs_world_t* world, int stages);

    // Function @ flecs.h:3226:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_stage_count(ecs_world_t* world);

    // Function @ flecs.h:3237:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_stage_id(ecs_world_t* world);

    // Function @ flecs.h:3256:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_get_stage(ecs_world_t* world, int stage_id);

    // Function @ flecs.h:3265:20 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_get_world(ecs_world_t* world);

    // Function @ flecs.h:3276:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_stage_is_readonly(ecs_world_t* stage);

    // Function @ flecs.h:3298:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_async_stage_new(ecs_world_t* world);

    // Function @ flecs.h:3308:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_async_stage_free(ecs_world_t* stage);

    // Function @ flecs.h:3318:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_stage_is_async(ecs_world_t* stage);

    // Function @ flecs.h:3344:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_table_from_str(ecs_world_t* world, CString8U type);

    // Function @ flecs.h:3354:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_table_get_type(ecs_table_t* table);

    // Function @ flecs.h:3363:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_table_get_storage_type(ecs_table_t* table);

    // Function @ flecs.h:3372:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_table_storage_count(ecs_table_t* table);

    // Function @ flecs.h:3376:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_table_type_to_storage_index(ecs_table_t* table, int index);

    // Function @ flecs.h:3381:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_table_storage_to_type_index(ecs_table_t* table, int index);

    // Function @ flecs.h:3395:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_table_count(ecs_table_t* table);

    // Function @ flecs.h:3408:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_table_add_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

    // Function @ flecs.h:3423:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_table_remove_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

    // Function @ flecs.h:3444:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_table_lock(ecs_world_t* world, ecs_table_t* table);

    // Function @ flecs.h:3455:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_table_unlock(ecs_world_t* world, ecs_table_t* table);

    // Function @ flecs.h:3467:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_table_has_module(ecs_table_t* table);

    // Function @ flecs.h:3493:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_commit(ecs_world_t* world, ecs_entity_t entity, ecs_record_t* @record, ecs_table_t* table, ecs_ids_t* added, ecs_ids_t* removed);

    // Function @ flecs.h:3503:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_record_t* ecs_record_find(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:3509:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_record_get_column(ecs_record_t* r, int column, ulong c_size);

    // Function @ module.h:42:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/module.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_import(ecs_world_t* world, ecs_module_action_t module, CString8U module_name, void* handles_out, ulong handles_size);

    // Function @ module.h:68:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/module.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_import_from_library(ecs_world_t* world, CString8U library_name, CString8U module_name);

    // Function @ module.h:76:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/module.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_module_init(ecs_world_t* world, ecs_component_desc_t* desc);

    // Function @ system.h:119:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_system_init(ecs_world_t* world, ecs_system_desc_t* desc);

    // Function @ system.h:164:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_run(ecs_world_t* world, ecs_entity_t system, float delta_time, void* param);

    // Function @ system.h:181:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_run_worker(ecs_world_t* world, ecs_entity_t system, int stage_current, int stage_count, float delta_time, void* param);

    // Function @ system.h:210:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_run_w_filter(ecs_world_t* world, ecs_entity_t system, float delta_time, int offset, int limit, void* param);

    // Function @ system.h:228:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_query_t* ecs_system_get_query(ecs_world_t* world, ecs_entity_t system);

    // Function @ system.h:241:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_system_ctx(ecs_world_t* world, ecs_entity_t system);

    // Function @ system.h:255:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_system_binding_ctx(ecs_world_t* world, ecs_entity_t system);

    // Function @ system.h:269:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [DllImport(LibraryName)]
    public static extern void FlecsSystemImport(ecs_world_t* world);

    // Function @ pipeline.h:49:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_pipeline(ecs_world_t* world, ecs_entity_t pipeline);

    // Function @ pipeline.h:60:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_pipeline(ecs_world_t* world);

    // Function @ pipeline.h:82:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_progress(ecs_world_t* world, float delta_time);

    // Function @ pipeline.h:93:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_time_scale(ecs_world_t* world, float scale);

    // Function @ pipeline.h:103:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_reset_clock(ecs_world_t* world);

    // Function @ pipeline.h:125:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_pipeline_run(ecs_world_t* world, ecs_entity_t pipeline, float delta_time);

    // Function @ pipeline.h:141:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_deactivate_systems(ecs_world_t* world);

    // Function @ pipeline.h:155:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_threads(ecs_world_t* world, int threads);

    // Function @ pipeline.h:169:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void FlecsPipelineImport(ecs_world_t* world);

    // Function @ timer.h:74:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_timeout(ecs_world_t* world, ecs_entity_t tick_source, float timeout);

    // Function @ timer.h:99:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern float ecs_get_timeout(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:121:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_interval(ecs_world_t* world, ecs_entity_t tick_source, float interval);

    // Function @ timer.h:135:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern float ecs_get_interval(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:149:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern void ecs_start_timer(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:161:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern void ecs_stop_timer(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:196:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_rate(ecs_world_t* world, ecs_entity_t tick_source, int rate, ecs_entity_t source);

    // Function @ timer.h:225:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_tick_source(ecs_world_t* world, ecs_entity_t system, ecs_entity_t tick_source);

    // Function @ timer.h:241:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/timer.h)
    [DllImport(LibraryName)]
    public static extern void FlecsTimerImport(ecs_world_t* world);

    // Function @ doc.h:42:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/doc.h)
    [DllImport(LibraryName)]
    public static extern void ecs_doc_set_brief(ecs_world_t* world, ecs_entity_t entity, CString8U description);

    // Function @ doc.h:54:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/doc.h)
    [DllImport(LibraryName)]
    public static extern void ecs_doc_set_detail(ecs_world_t* world, ecs_entity_t entity, CString8U description);

    // Function @ doc.h:66:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/doc.h)
    [DllImport(LibraryName)]
    public static extern void ecs_doc_set_link(ecs_world_t* world, ecs_entity_t entity, CString8U link);

    // Function @ doc.h:78:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/doc.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_doc_get_brief(ecs_world_t* world, ecs_entity_t entity);

    // Function @ doc.h:89:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/doc.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_doc_get_detail(ecs_world_t* world, ecs_entity_t entity);

    // Function @ doc.h:100:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/doc.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_doc_get_link(ecs_world_t* world, ecs_entity_t entity);

    // Function @ doc.h:111:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/doc.h)
    [DllImport(LibraryName)]
    public static extern void FlecsDocImport(ecs_world_t* world);

    // Function @ hashmap.h:39:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern ecs_hashmap_t _flecs_hashmap_new(ecs_size_t key_size, ecs_size_t value_size, ecs_hash_value_action_t hash, ecs_compare_action_t compare);

    // Function @ hashmap.h:49:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern void flecs_hashmap_free(ecs_hashmap_t map);

    // Function @ hashmap.h:53:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern void* _flecs_hashmap_get(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size);

    // Function @ hashmap.h:63:24 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern flecs_hashmap_result_t _flecs_hashmap_ensure(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size);

    // Function @ hashmap.h:73:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern void _flecs_hashmap_set(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size, void* value);

    // Function @ hashmap.h:84:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern void _flecs_hashmap_remove(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size);

    // Function @ hashmap.h:94:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern void _flecs_hashmap_remove_w_hash(ecs_hashmap_t map, ecs_size_t key_size, void* key, ecs_size_t value_size, ulong hash);

    // Function @ hashmap.h:105:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern ecs_hashmap_t flecs_hashmap_copy(ecs_hashmap_t src);

    // Function @ hashmap.h:109:22 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern flecs_hashmap_iter_t flecs_hashmap_iter(ecs_hashmap_t map);

    // Function @ hashmap.h:113:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [DllImport(LibraryName)]
    public static extern void* _flecs_hashmap_next(flecs_hashmap_iter_t* it, ecs_size_t key_size, void* key_out, ecs_size_t value_size);

    // Function @ meta.h:312:19 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern ecs_meta_cursor_t ecs_meta_cursor(ecs_world_t* world, ecs_entity_t type, void* ptr);

    // Function @ meta.h:319:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_meta_get_ptr(ecs_meta_cursor_t* cursor);

    // Function @ meta.h:324:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_next(ecs_meta_cursor_t* cursor);

    // Function @ meta.h:329:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_move(ecs_meta_cursor_t* cursor, int pos);

    // Function @ meta.h:335:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_member(ecs_meta_cursor_t* cursor, CString8U name);

    // Function @ meta.h:341:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_push(ecs_meta_cursor_t* cursor);

    // Function @ meta.h:346:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_pop(ecs_meta_cursor_t* cursor);

    // Function @ meta.h:351:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_is_collection(ecs_meta_cursor_t* cursor);

    // Function @ meta.h:360:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_bool(ecs_meta_cursor_t* cursor, CBool value);

    // Function @ meta.h:366:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_char(ecs_meta_cursor_t* cursor, byte value);

    // Function @ meta.h:372:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_int(ecs_meta_cursor_t* cursor, long value);

    // Function @ meta.h:378:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_uint(ecs_meta_cursor_t* cursor, ulong value);

    // Function @ meta.h:384:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_float(ecs_meta_cursor_t* cursor, double value);

    // Function @ meta.h:390:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_string(ecs_meta_cursor_t* cursor, CString8U value);

    // Function @ meta.h:396:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_string_literal(ecs_meta_cursor_t* cursor, CString8U value);

    // Function @ meta.h:402:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_entity(ecs_meta_cursor_t* cursor, ecs_entity_t value);

    // Function @ meta.h:408:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern int ecs_meta_set_null(ecs_meta_cursor_t* cursor);

    // Function @ meta.h:422:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_enum_init(ecs_world_t* world, ecs_enum_desc_t* desc);

    // Function @ meta.h:435:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_bitmask_init(ecs_world_t* world, ecs_bitmask_desc_t* desc);

    // Function @ meta.h:449:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_array_init(ecs_world_t* world, ecs_array_desc_t* desc);

    // Function @ meta.h:462:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_vector_init(ecs_world_t* world, ecs_vector_desc_t* desc);

    // Function @ meta.h:475:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_struct_init(ecs_world_t* world, ecs_struct_desc_t* desc);

    // Function @ meta.h:487:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [DllImport(LibraryName)]
    public static extern void FlecsMetaImport(ecs_world_t* world);

    // Function @ coredoc.h:36:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/coredoc.h)
    [DllImport(LibraryName)]
    public static extern void FlecsCoreDocImport(ecs_world_t* world);

    // Function @ parser.h:25:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/parser.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_whitespace(CString8U ptr);

    // Function @ parser.h:35:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/parser.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_fluff(CString8U ptr);

    // Function @ parser.h:48:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/parser.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_token(CString8U name, CString8U expr, CString8U ptr, CString8U token_out);

    // Function @ parser.h:82:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/parser.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_term(ecs_world_t* world, CString8U name, CString8U expr, CString8U ptr, ecs_term_t* term_out);

    // Function @ expr.h:60:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_chresc(CString8U @out, byte @in, byte delimiter);

    // Function @ expr.h:72:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_chrparse(CString8U @in, CString8U @out);

    // Function @ expr.h:89:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern ecs_size_t ecs_stresc(CString8U @out, ecs_size_t size, byte delimiter, CString8U @in);

    // Function @ expr.h:119:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_expr(ecs_world_t* world, CString8U ptr, ecs_entity_t type, void* data_out, ecs_expr_desc_t* desc);

    // Function @ expr.h:136:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_ptr_to_expr(ecs_world_t* world, ecs_entity_t type, void* data);

    // Function @ expr.h:151:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern int ecs_ptr_to_expr_buf(ecs_world_t* world, ecs_entity_t type, void* data, ecs_strbuf_t* buf_out);

    // Function @ expr.h:169:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern int ecs_primitive_to_expr_buf(ecs_world_t* world, ecs_primitive_kind_t kind, void* data, ecs_strbuf_t* str);

    // Function @ expr.h:186:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_expr_token(CString8U name, CString8U expr, CString8U ptr, CString8U token);

    // Function @ json.h:37:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/json.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_json(ecs_world_t* world, CString8U name, CString8U expr, CString8U ptr, ecs_entity_t type, void* data_out);

    // Function @ json.h:55:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/json.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_ptr_to_json(ecs_world_t* world, ecs_entity_t type, void* data);

    // Function @ json.h:70:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/json.h)
    [DllImport(LibraryName)]
    public static extern int ecs_ptr_to_json_buf(ecs_world_t* world, ecs_entity_t type, void* data, ecs_strbuf_t* buf_out);

    // Function @ json.h:87:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/json.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_entity_to_json(ecs_world_t* world, ecs_entity_t entity);

    // Function @ json.h:100:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/json.h)
    [DllImport(LibraryName)]
    public static extern int ecs_entity_to_json_buf(ecs_world_t* world, ecs_entity_t entity, ecs_strbuf_t* buf_out);

    // Function @ plecs.h:55:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/plecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_plecs_from_str(ecs_world_t* world, CString8U name, CString8U str);

    // Function @ plecs.h:70:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/plecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_plecs_from_file(ecs_world_t* world, CString8U filename);

    // Function @ rules.h:25:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern ecs_rule_t* ecs_rule_init(ecs_world_t* world, ecs_filter_desc_t* desc);

    // Function @ rules.h:30:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern void ecs_rule_fini(ecs_rule_t* rule);

    // Function @ rules.h:34:21 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern ecs_filter_t* ecs_rule_filter(ecs_rule_t* rule);

    // Function @ rules.h:38:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern int ecs_rule_variable_count(ecs_rule_t* rule);

    // Function @ rules.h:42:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern int ecs_rule_find_variable(ecs_rule_t* rule, CString8U name);

    // Function @ rules.h:47:13 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_rule_variable_name(ecs_rule_t* rule, int var_id);

    // Function @ rules.h:52:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_rule_variable(ecs_iter_t* it, int var_id);

    // Function @ rules.h:57:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_rule_variable_is_entity(ecs_rule_t* rule, int var_id);

    // Function @ rules.h:62:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_rule_iter(ecs_world_t* world, ecs_rule_t* rule);

    // Function @ rules.h:67:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern void ecs_rule_iter_free(ecs_iter_t* iter);

    // Function @ rules.h:71:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_rule_next(ecs_iter_t* it);

    // Function @ rules.h:75:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/rules.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_rule_str(ecs_rule_t* rule);

    // Function @ snapshot.h:33:17 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern ecs_snapshot_t* ecs_snapshot_take(ecs_world_t* world);

    // Function @ snapshot.h:45:17 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern ecs_snapshot_t* ecs_snapshot_take_w_iter(ecs_iter_t* iter, ecs_iter_next_action_t action);

    // Function @ snapshot.h:64:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern void ecs_snapshot_restore(ecs_world_t* world, ecs_snapshot_t* snapshot);

    // Function @ snapshot.h:73:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_snapshot_iter(ecs_snapshot_t* snapshot);

    // Function @ snapshot.h:82:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_snapshot_next(ecs_iter_t* iter);

    // Function @ snapshot.h:93:6 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern void ecs_snapshot_free(ecs_snapshot_t* snapshot);

    // Function @ stats.h:121:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_get_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

    // Function @ stats.h:132:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_dump_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

    // Function @ stats.h:143:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_get_query_stats(ecs_world_t* world, ecs_query_t* query, ecs_query_stats_t* s);

    // Function @ stats.h:157:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_get_system_stats(ecs_world_t* world, ecs_entity_t system, ecs_system_stats_t* stats);

    // Function @ stats.h:172:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_get_pipeline_stats(ecs_world_t* world, ecs_entity_t pipeline, ecs_pipeline_stats_t* stats);

    // Function @ stats.h:178:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_gauge_reduce(ecs_gauge_t* dst, int t_dst, ecs_gauge_t* src, int t_src);

    // FunctionPointer @ vector.h:92:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_comparator_t
    {
        public delegate* unmanaged<void*, void*, int> Pointer;
    }

    // FunctionPointer @ flecs.h:167:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_fini_action_t
    {
        public delegate* unmanaged<ecs_world_t*, void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:163:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_module_action_t
    {
        public delegate* unmanaged<ecs_world_t*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:181:20 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_hash_value_action_t
    {
        public delegate* unmanaged<void*, ulong> Pointer;
    }

    // FunctionPointer @ flecs.h:176:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_compare_action_t
    {
        public delegate* unmanaged<void*, void*, int> Pointer;
    }

    // FunctionPointer @ flecs.h:145:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_iter_next_action_t
    {
        public delegate* unmanaged<ecs_iter_t*, CBool> Pointer;
    }

    // FunctionPointer @ os_api.h:63:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_init_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:67:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_fini_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:71:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_malloc_t
    {
        public delegate* unmanaged<ecs_size_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:79:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_realloc_t
    {
        public delegate* unmanaged<void*, ecs_size_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:84:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_calloc_t
    {
        public delegate* unmanaged<ecs_size_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:75:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_free_t
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:88:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_strdup_t
    {
        public delegate* unmanaged<CString8U, CString8U> Pointer;
    }

    // FunctionPointer @ os_api.h:97:19 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_thread_new_t
    {
        public delegate* unmanaged<ecs_os_thread_callback_t, void*, ecs_os_thread_t> Pointer;
    }

    // FunctionPointer @ os_api.h:102:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_thread_join_t
    {
        public delegate* unmanaged<ecs_os_thread_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:108:7 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_ainc_t
    {
        public delegate* unmanaged<int*, int> Pointer;
    }

    // FunctionPointer @ os_api.h:114:18 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_mutex_new_t
    {
        public delegate* unmanaged<ecs_os_mutex_t> Pointer;
    }

    // FunctionPointer @ os_api.h:126:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_mutex_free_t
    {
        public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:118:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_mutex_lock_t
    {
        public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:131:17 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_new_t
    {
        public delegate* unmanaged<ecs_os_cond_t> Pointer;
    }

    // FunctionPointer @ os_api.h:135:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_free_t
    {
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:139:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_signal_t
    {
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:143:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_broadcast_t
    {
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:147:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_wait_t
    {
        public delegate* unmanaged<ecs_os_cond_t, ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:152:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_sleep_t
    {
        public delegate* unmanaged<int, int, void> Pointer;
    }

    // FunctionPointer @ os_api.h:157:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_get_time_t
    {
        public delegate* unmanaged<ecs_time_t*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:162:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_log_t
    {
        public delegate* unmanaged<CString8U, IntPtr, void> Pointer;
    }

    // FunctionPointer @ os_api.h:168:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_abort_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:173:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_dlopen_t
    {
        public delegate* unmanaged<CString8U, ecs_os_dl_t> Pointer;
    }

    // FunctionPointer @ os_api.h:177:17 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_dlproc_t
    {
        public delegate* unmanaged<ecs_os_dl_t, CString8U, ecs_os_proc_t> Pointer;
    }

    // FunctionPointer @ os_api.h:182:8 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_dlclose_t
    {
        public delegate* unmanaged<ecs_os_dl_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:186:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_module_to_path_t
    {
        public delegate* unmanaged<CString8U, CString8U> Pointer;
    }

    // FunctionPointer @ api_types.h:347:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_xtor_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:357:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_copy_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:369:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_move_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:381:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_copy_ctor_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, EcsComponentLifecycle*, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:394:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_move_ctor_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, EcsComponentLifecycle*, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:407:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_on_set_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:149:15 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_order_by_action_t
    {
        public delegate* unmanaged<ecs_entity_t, void*, ecs_entity_t, void*, int> Pointer;
    }

    // FunctionPointer @ flecs.h:156:20 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_group_by_action_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_type_t, ecs_id_t, void*, ulong> Pointer;
    }

    // FunctionPointer @ flecs.h:172:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_ctx_free_t
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:142:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_iter_action_t
    {
        public delegate* unmanaged<ecs_iter_t*, void> Pointer;
    }

    // FunctionPointer @ system.h:68:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_system_status_action_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_system_status_t, void*, void> Pointer;
    }

    // FunctionPointer @ meta.h:307:20 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_FLECS_Ecs_world_tPtr_CString8U_VoidPtr_Ecs_entity_t
    {
        public delegate* unmanaged<ecs_world_t*, CString8U, void*, ecs_entity_t> Pointer;
    }

    // FunctionPointer @ os_api.h:93:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_thread_callback_t
    {
        public delegate* unmanaged<void*, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:59:16 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_proc_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // Struct @ vector.h:90:29 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_vector_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int count;

        [FieldOffset(4)] // size = 4, padding = 0
        public int size;

        [FieldOffset(8)] // size = 8, padding = 0
        public long elem_size;
    }

    // Struct @ map.h:45:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct ecs_map_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_map_t* map;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_bucket_t* bucket;

        [FieldOffset(16)] // size = 4, padding = 0
        public int bucket_index;

        [FieldOffset(20)] // size = 4, padding = 0
        public int element_index;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* payload;
    }

    // Struct @ strbuf.h:75:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 1088, Pack = 8)]
    public struct ecs_strbuf_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U buf;

        [FieldOffset(8)] // size = 4, padding = 0
        public int max;

        [FieldOffset(12)] // size = 4, padding = 0
        public int size;

        [FieldOffset(16)] // size = 4, padding = 4
        public int elementCount;

        [FieldOffset(24)] // size = 536, padding = 0
        public ecs_strbuf_element_embedded firstElement;

        [FieldOffset(560)] // size = 8, padding = 0
        public ecs_strbuf_element* current;

        [FieldOffset(568)] // size = 512, padding = 0
        public fixed ulong _list_stack[512 / 8]; // ecs_strbuf_list_elem[32]

        public Span<ecs_strbuf_list_elem> list_stack
        {
            get
            {
                fixed (ecs_strbuf_t* @this = &this)
                {
                    var pointer = &@this->_list_stack[0];
                    var span = new Span<ecs_strbuf_list_elem>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(1080)] // size = 4, padding = 4
        public int list_sp;
    }

    // Struct @ os_api.h:252:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 256, Pack = 8)]
    public struct ecs_os_api_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_os_api_init_t init_;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_os_api_fini_t fini_;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_os_api_malloc_t malloc_;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_os_api_realloc_t realloc_;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_os_api_calloc_t calloc_;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_os_api_free_t free_;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_os_api_strdup_t strdup_;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_os_api_thread_new_t thread_new_;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_os_api_thread_join_t thread_join_;

        [FieldOffset(72)] // size = 8, padding = 0
        public ecs_os_api_ainc_t ainc_;

        [FieldOffset(80)] // size = 8, padding = 0
        public ecs_os_api_ainc_t adec_;

        [FieldOffset(88)] // size = 8, padding = 0
        public ecs_os_api_mutex_new_t mutex_new_;

        [FieldOffset(96)] // size = 8, padding = 0
        public ecs_os_api_mutex_free_t mutex_free_;

        [FieldOffset(104)] // size = 8, padding = 0
        public ecs_os_api_mutex_lock_t mutex_lock_;

        [FieldOffset(112)] // size = 8, padding = 0
        public ecs_os_api_mutex_lock_t mutex_unlock_;

        [FieldOffset(120)] // size = 8, padding = 0
        public ecs_os_api_cond_new_t cond_new_;

        [FieldOffset(128)] // size = 8, padding = 0
        public ecs_os_api_cond_free_t cond_free_;

        [FieldOffset(136)] // size = 8, padding = 0
        public ecs_os_api_cond_signal_t cond_signal_;

        [FieldOffset(144)] // size = 8, padding = 0
        public ecs_os_api_cond_broadcast_t cond_broadcast_;

        [FieldOffset(152)] // size = 8, padding = 0
        public ecs_os_api_cond_wait_t cond_wait_;

        [FieldOffset(160)] // size = 8, padding = 0
        public ecs_os_api_sleep_t sleep_;

        [FieldOffset(168)] // size = 8, padding = 0
        public ecs_os_api_get_time_t get_time_;

        [FieldOffset(176)] // size = 8, padding = 0
        public ecs_os_api_log_t log_;

        [FieldOffset(184)] // size = 8, padding = 0
        public ecs_os_api_log_t log_error_;

        [FieldOffset(192)] // size = 8, padding = 0
        public ecs_os_api_log_t log_debug_;

        [FieldOffset(200)] // size = 8, padding = 0
        public ecs_os_api_log_t log_warning_;

        [FieldOffset(208)] // size = 8, padding = 0
        public ecs_os_api_abort_t abort_;

        [FieldOffset(216)] // size = 8, padding = 0
        public ecs_os_api_dlopen_t dlopen_;

        [FieldOffset(224)] // size = 8, padding = 0
        public ecs_os_api_dlproc_t dlproc_;

        [FieldOffset(232)] // size = 8, padding = 0
        public ecs_os_api_dlclose_t dlclose_;

        [FieldOffset(240)] // size = 8, padding = 0
        public ecs_os_api_module_to_path_t module_to_dl_;

        [FieldOffset(248)] // size = 8, padding = 0
        public ecs_os_api_module_to_path_t module_to_etc_;
    }

    // Struct @ os_api.h:44:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct ecs_time_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint sec;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint nanosec;
    }

    // Struct @ api_types.h:344:38 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct EcsComponentLifecycle
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_xtor_t ctor;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_xtor_t dtor;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_copy_t copy;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_move_t move;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_copy_ctor_t copy_ctor;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_move_ctor_t move_ctor;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_move_ctor_t ctor_move_dtor;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_move_ctor_t move_dtor;

        [FieldOffset(72)] // size = 8, padding = 0
        public ecs_on_set_t on_set;
    }

    // Struct @ flecs.h:685:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct ecs_world_info_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t last_component_id;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_entity_t last_id;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t min_id;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_entity_t max_id;

        [FieldOffset(32)] // size = 4, padding = 0
        public float delta_time_raw;

        [FieldOffset(36)] // size = 4, padding = 0
        public float delta_time;

        [FieldOffset(40)] // size = 4, padding = 0
        public float time_scale;

        [FieldOffset(44)] // size = 4, padding = 0
        public float target_fps;

        [FieldOffset(48)] // size = 4, padding = 0
        public float frame_time_total;

        [FieldOffset(52)] // size = 4, padding = 0
        public float system_time_total;

        [FieldOffset(56)] // size = 4, padding = 0
        public float merge_time_total;

        [FieldOffset(60)] // size = 4, padding = 0
        public float world_time_total;

        [FieldOffset(64)] // size = 4, padding = 0
        public float world_time_total_raw;

        [FieldOffset(68)] // size = 4, padding = 0
        public int frame_count_total;

        [FieldOffset(72)] // size = 4, padding = 0
        public int merge_count_total;

        [FieldOffset(76)] // size = 4, padding = 0
        public int pipeline_build_count_total;

        [FieldOffset(80)] // size = 4, padding = 4
        public int systems_ran_frame;
    }

    // Struct @ flecs.h:391:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 312, Pack = 8)]
    public struct ecs_entity_desc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(16)] // size = 8, padding = 0
        public CString8U sep;

        [FieldOffset(24)] // size = 8, padding = 0
        public CString8U root_sep;

        [FieldOffset(32)] // size = 8, padding = 0
        public CString8U symbol;

        [FieldOffset(40)] // size = 1, padding = 7
        public CBool use_low_id;

        [FieldOffset(48)] // size = 256, padding = 0
        public fixed ulong _add[256 / 8]; // ecs_id_t[32]

        public Span<ecs_id_t> add
        {
            get
            {
                fixed (ecs_entity_desc_t* @this = &this)
                {
                    var pointer = &@this->_add[0];
                    var span = new Span<ecs_id_t>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(304)] // size = 8, padding = 0
        public CString8U add_expr;
    }

    // Struct @ flecs.h:416:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 288, Pack = 8)]
    public struct ecs_bulk_desc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t* entities;

        [FieldOffset(8)] // size = 4, padding = 4
        public int count;

        [FieldOffset(16)] // size = 256, padding = 0
        public fixed ulong _ids[256 / 8]; // ecs_id_t[32]

        public Span<ecs_id_t> ids
        {
            get
            {
                fixed (ecs_bulk_desc_t* @this = &this)
                {
                    var pointer = &@this->_ids[0];
                    var span = new Span<ecs_id_t>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(272)] // size = 8, padding = 0
        public void** data;

        [FieldOffset(280)] // size = 8, padding = 0
        public ecs_table_t* table;
    }

    // Struct @ flecs.h:424:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 328, Pack = 8)]
    public struct ecs_component_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 8, padding = 0
        public ulong size;

        [FieldOffset(320)] // size = 8, padding = 0
        public ulong alignment;
    }

    // Struct @ flecs.h:432:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 576, Pack = 8)]
    public struct ecs_type_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 256, padding = 0
        public fixed ulong _ids[256 / 8]; // ecs_id_t[32]

        public Span<ecs_id_t> ids
        {
            get
            {
                fixed (ecs_type_desc_t* @this = &this)
                {
                    var pointer = &@this->_ids[0];
                    var span = new Span<ecs_id_t>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(568)] // size = 8, padding = 0
        public CString8U ids_expr;
    }

    // Struct @ flecs.h:111:26 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_ref_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_entity_t component;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* table;

        [FieldOffset(24)] // size = 4, padding = 0
        public int row;

        [FieldOffset(28)] // size = 4, padding = 0
        public int alloc_count;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_record_t* @record;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* ptr;
    }

    // Struct @ flecs.h:108:27 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 2440, Pack = 8)]
    public struct ecs_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_world_t* world;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_world_t* real_world;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t system;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_entity_t @event;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_id_t event_id;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_type_t type;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_table_t* other_table;

        [FieldOffset(72)] // size = 8, padding = 0
        public ecs_id_t* ids;

        [FieldOffset(80)] // size = 8, padding = 0
        public int* columns;

        [FieldOffset(88)] // size = 8, padding = 0
        public ecs_entity_t* subjects;

        [FieldOffset(96)] // size = 8, padding = 0
        public ecs_size_t* sizes;

        [FieldOffset(104)] // size = 8, padding = 0
        public void** ptrs;

        [FieldOffset(112)] // size = 8, padding = 0
        public CString8U* variable_names;

        [FieldOffset(120)] // size = 8, padding = 0
        public ecs_entity_t* variables;

        [FieldOffset(128)] // size = 8, padding = 0
        public int* match_indices;

        [FieldOffset(136)] // size = 8, padding = 0
        public ecs_ref_t* references;

        [FieldOffset(144)] // size = 8, padding = 0
        public ecs_term_t* terms;

        [FieldOffset(152)] // size = 4, padding = 0
        public int table_count;

        [FieldOffset(156)] // size = 4, padding = 0
        public int term_count;

        [FieldOffset(160)] // size = 4, padding = 0
        public int term_index;

        [FieldOffset(164)] // size = 4, padding = 0
        public int variable_count;

        [FieldOffset(168)] // size = 8, padding = 0
        public ecs_entity_t* entities;

        [FieldOffset(176)] // size = 8, padding = 0
        public void* param;

        [FieldOffset(184)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(192)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(200)] // size = 4, padding = 0
        public float delta_time;

        [FieldOffset(204)] // size = 4, padding = 0
        public float delta_system_time;

        [FieldOffset(208)] // size = 4, padding = 0
        public float world_time;

        [FieldOffset(212)] // size = 4, padding = 0
        public int frame_offset;

        [FieldOffset(216)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(220)] // size = 4, padding = 0
        public int count;

        [FieldOffset(224)] // size = 4, padding = 0
        public int total_count;

        [FieldOffset(228)] // size = 1, padding = 3
        public CBool is_valid;

        [FieldOffset(232)] // size = 8, padding = 0
        public ecs_ids_t* triggered_by;

        [FieldOffset(240)] // size = 8, padding = 0
        public ecs_entity_t interrupted_by;

        [FieldOffset(248)] // size = 8, padding = 0
        public ecs_iter_next_action_t next;

        [FieldOffset(256)] // size = 8, padding = 0
        public ecs_iter_t* chain_it;

        [FieldOffset(264)] // size = 1880, padding = 0
        public ecs_iter_t_iter iter;

        [FieldOffset(2144)] // size = 296, padding = 0
        public ecs_iter_cache_t cache;

        // Union @ api_types.h:329:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 1880, Pack = 8)]
        public struct ecs_iter_t_iter
        {
            [FieldOffset(0)] // size = 288, padding = 0
            public ecs_term_iter_t term;

            [FieldOffset(0)] // size = 1880, padding = 0
            public ecs_filter_iter_t filter;

            [FieldOffset(0)] // size = 48, padding = 0
            public ecs_query_iter_t query;

            [FieldOffset(0)] // size = 64, padding = 0
            public ecs_rule_iter_t rule;

            [FieldOffset(0)] // size = 1592, padding = 288
            public ecs_snapshot_iter_t snapshot;
        }
    }

    // Struct @ flecs.h:268:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 192, Pack = 8)]
    public struct ecs_term_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_id_t id;

        [FieldOffset(8)] // size = 4, padding = 4
        public ecs_inout_kind_t inout;

        [FieldOffset(16)] // size = 48, padding = 0
        public ecs_term_id_t pred;

        [FieldOffset(64)] // size = 96, padding = 0
        public fixed ulong _args[96 / 8]; // ecs_term_id_t[2]

        public Span<ecs_term_id_t> args
        {
            get
            {
                fixed (ecs_term_t* @this = &this)
                {
                    var pointer = &@this->_args[0];
                    var span = new Span<ecs_term_id_t>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(160)] // size = 4, padding = 4
        public ecs_oper_kind_t oper;

        [FieldOffset(168)] // size = 8, padding = 0
        public ecs_id_t role;

        [FieldOffset(176)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(184)] // size = 4, padding = 0
        public int index;

        [FieldOffset(188)] // size = 1, padding = 3
        public CBool move;
    }

    // Struct @ flecs.h:246:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_term_id_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(16)] // size = 4, padding = 4
        public ecs_var_kind_t var;

        [FieldOffset(24)] // size = 24, padding = 0
        public ecs_term_set_t set;
    }

    // Struct @ flecs.h:93:29 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 1576, Pack = 8)]
    public struct ecs_filter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_term_t* terms;

        [FieldOffset(8)] // size = 4, padding = 0
        public int term_count;

        [FieldOffset(12)] // size = 4, padding = 0
        public int term_count_actual;

        [FieldOffset(16)] // size = 1536, padding = 0
        public fixed ulong _term_cache[1536 / 8]; // ecs_term_t[8]

        public Span<ecs_term_t> term_cache
        {
            get
            {
                fixed (ecs_filter_t* @this = &this)
                {
                    var pointer = &@this->_term_cache[0];
                    var span = new Span<ecs_term_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(1552)] // size = 1, padding = 0
        public CBool term_cache_used;

        [FieldOffset(1553)] // size = 1, padding = 0
        public CBool match_this;

        [FieldOffset(1554)] // size = 1, padding = 0
        public CBool match_only_this;

        [FieldOffset(1555)] // size = 1, padding = 0
        public CBool match_prefab;

        [FieldOffset(1556)] // size = 1, padding = 3
        public CBool match_disabled;

        [FieldOffset(1560)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(1568)] // size = 8, padding = 0
        public CString8U expr;
    }

    // Struct @ flecs.h:456:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 3104, Pack = 8)]
    public struct ecs_filter_desc_t
    {
        [FieldOffset(0)] // size = 3072, padding = 0
        public fixed ulong _terms[3072 / 8]; // ecs_term_t[16]

        public Span<ecs_term_t> terms
        {
            get
            {
                fixed (ecs_filter_desc_t* @this = &this)
                {
                    var pointer = &@this->_terms[0];
                    var span = new Span<ecs_term_t>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(3072)] // size = 8, padding = 0
        public ecs_term_t* terms_buffer;

        [FieldOffset(3080)] // size = 4, padding = 0
        public int terms_buffer_count;

        [FieldOffset(3084)] // size = 1, padding = 3
        public CBool substitute_default;

        [FieldOffset(3088)] // size = 8, padding = 0
        public CString8U expr;

        [FieldOffset(3096)] // size = 8, padding = 0
        public CString8U name;
    }

    // Struct @ flecs.h:501:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 3168, Pack = 8)]
    public struct ecs_query_desc_t
    {
        [FieldOffset(0)] // size = 3104, padding = 0
        public ecs_filter_desc_t filter;

        [FieldOffset(3104)] // size = 8, padding = 0
        public ecs_entity_t order_by_component;

        [FieldOffset(3112)] // size = 8, padding = 0
        public ecs_order_by_action_t order_by;

        [FieldOffset(3120)] // size = 8, padding = 0
        public ecs_id_t group_by_id;

        [FieldOffset(3128)] // size = 8, padding = 0
        public ecs_group_by_action_t group_by;

        [FieldOffset(3136)] // size = 8, padding = 0
        public void* group_by_ctx;

        [FieldOffset(3144)] // size = 8, padding = 0
        public ecs_ctx_free_t group_by_ctx_free;

        [FieldOffset(3152)] // size = 8, padding = 0
        public ecs_query_t* parent;

        [FieldOffset(3160)] // size = 8, padding = 0
        public ecs_entity_t system;
    }

    // Struct @ flecs.h:543:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 640, Pack = 8)]
    public struct ecs_trigger_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 192, padding = 0
        public ecs_term_t term;

        [FieldOffset(504)] // size = 8, padding = 0
        public CString8U expr;

        [FieldOffset(512)] // size = 64, padding = 0
        public fixed ulong _events[64 / 8]; // ecs_entity_t[8]

        public Span<ecs_entity_t> events
        {
            get
            {
                fixed (ecs_trigger_desc_t* @this = &this)
                {
                    var pointer = &@this->_events[0];
                    var span = new Span<ecs_entity_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(576)] // size = 1, padding = 0
        public CBool match_prefab;

        [FieldOffset(577)] // size = 1, padding = 6
        public CBool match_disabled;

        [FieldOffset(584)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(592)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(600)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(608)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(616)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(624)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;

        [FieldOffset(632)] // size = 8, padding = 0
        public ecs_poly_t* observable;
    }

    // Struct @ flecs.h:2855:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct ecs_event_desc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t @event;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_ids_t* ids;

        [FieldOffset(16)] // size = 4, padding = 4
        public ecs_payload_kind_t payload_kind;

        [FieldOffset(24)] // size = 24, padding = 0
        public ecs_event_desc_t_payload payload;

        [FieldOffset(48)] // size = 8, padding = 0
        public void* param;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_poly_t* observable;

        // Union @ flecs.h:2840:5 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct ecs_event_desc_t_payload
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t entity;

            [FieldOffset(0)] // size = 24, padding = 0
            public ecs_event_desc_t_payload_table table;

            // Struct @ flecs.h:2842:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
            [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
            public struct ecs_event_desc_t_payload_table
            {
                [FieldOffset(0)] // size = 8, padding = 0
                public ecs_table_t* table;

                [FieldOffset(8)] // size = 8, padding = 0
                public ecs_table_t* other_table;

                [FieldOffset(16)] // size = 4, padding = 0
                public int offset;

                [FieldOffset(20)] // size = 4, padding = 0
                public int count;
            }
        }
    }

    // Struct @ flecs.h:577:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 3536, Pack = 8)]
    public struct ecs_observer_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 3104, padding = 0
        public ecs_filter_desc_t filter;

        [FieldOffset(3416)] // size = 64, padding = 0
        public fixed ulong _events[64 / 8]; // ecs_entity_t[8]

        public Span<ecs_entity_t> events
        {
            get
            {
                fixed (ecs_observer_desc_t* @this = &this)
                {
                    var pointer = &@this->_events[0];
                    var span = new Span<ecs_entity_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(3480)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(3488)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(3496)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(3504)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(3512)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(3520)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;

        [FieldOffset(3528)] // size = 8, padding = 0
        public ecs_poly_t* observable;
    }

    // Struct @ api_types.h:31:29 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_record_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(8)] // size = 4, padding = 4
        public int row;
    }

    // Struct @ api_types.h:91:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_ids_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_id_t* array;

        [FieldOffset(8)] // size = 4, padding = 0
        public int count;

        [FieldOffset(12)] // size = 4, padding = 0
        public int size;
    }

    // Struct @ system.h:115:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    [StructLayout(LayoutKind.Explicit, Size = 3568, Pack = 8)]
    public struct ecs_system_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 3168, padding = 0
        public ecs_query_desc_t query;

        [FieldOffset(3480)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(3488)] // size = 8, padding = 0
        public ecs_system_status_action_t status_callback;

        [FieldOffset(3496)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(3504)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(3512)] // size = 8, padding = 0
        public void* status_ctx;

        [FieldOffset(3520)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(3528)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(3536)] // size = 8, padding = 0
        public ecs_ctx_free_t status_ctx_free;

        [FieldOffset(3544)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;

        [FieldOffset(3552)] // size = 4, padding = 0
        public float interval;

        [FieldOffset(3556)] // size = 4, padding = 0
        public int rate;

        [FieldOffset(3560)] // size = 8, padding = 0
        public ecs_entity_t tick_source;
    }

    // Struct @ hashmap.h:24:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct ecs_hashmap_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_hash_value_action_t hash;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_compare_action_t compare;

        [FieldOffset(16)] // size = 4, padding = 0
        public ecs_size_t key_size;

        [FieldOffset(20)] // size = 4, padding = 0
        public ecs_size_t value_size;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_map_t* impl;
    }

    // Struct @ hashmap.h:36:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct flecs_hashmap_result_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public void* key;

        [FieldOffset(8)] // size = 8, padding = 0
        public void* value;

        [FieldOffset(16)] // size = 8, padding = 0
        public ulong hash;
    }

    // Struct @ hashmap.h:30:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct flecs_hashmap_iter_t
    {
        [FieldOffset(0)] // size = 32, padding = 0
        public ecs_map_iter_t it;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_hm_bucket_t* bucket;

        [FieldOffset(40)] // size = 4, padding = 4
        public int index;
    }

    // Struct @ meta.h:309:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 2080, Pack = 8)]
    public struct ecs_meta_cursor_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_world_t* world;

        [FieldOffset(8)] // size = 2048, padding = 0
        public fixed ulong _scope[2048 / 8]; // ecs_meta_scope_t[32]

        public Span<ecs_meta_scope_t> scope
        {
            get
            {
                fixed (ecs_meta_cursor_t* @this = &this)
                {
                    var pointer = &@this->_scope[0];
                    var span = new Span<ecs_meta_scope_t>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(2056)] // size = 4, padding = 0
        public int depth;

        [FieldOffset(2060)] // size = 1, padding = 3
        public CBool valid;

        [FieldOffset(2064)] // size = 8, padding = 0
        public FnPtr_FLECS_Ecs_world_tPtr_CString8U_VoidPtr_Ecs_entity_t lookup_action;

        [FieldOffset(2072)] // size = 8, padding = 0
        public void* lookup_ctx;
    }

    // Struct @ meta.h:418:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 1080, Pack = 8)]
    public struct ecs_enum_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 768, padding = 0
        public fixed ulong _constants[768 / 8]; // ecs_enum_constant_t[32]

        public Span<ecs_enum_constant_t> constants
        {
            get
            {
                fixed (ecs_enum_desc_t* @this = &this)
                {
                    var pointer = &@this->_constants[0];
                    var span = new Span<ecs_enum_constant_t>(pointer, 32);
                    return span;
                }
            }
        }
    }

    // Struct @ meta.h:431:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 1080, Pack = 8)]
    public struct ecs_bitmask_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 768, padding = 0
        public fixed ulong _constants[768 / 8]; // ecs_bitmask_constant_t[32]

        public Span<ecs_bitmask_constant_t> constants
        {
            get
            {
                fixed (ecs_bitmask_desc_t* @this = &this)
                {
                    var pointer = &@this->_constants[0];
                    var span = new Span<ecs_bitmask_constant_t>(pointer, 32);
                    return span;
                }
            }
        }
    }

    // Struct @ meta.h:445:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 328, Pack = 8)]
    public struct ecs_array_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 8, padding = 0
        public ecs_entity_t type;

        [FieldOffset(320)] // size = 4, padding = 4
        public int count;
    }

    // Struct @ meta.h:458:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 320, Pack = 8)]
    public struct ecs_vector_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 8, padding = 0
        public ecs_entity_t type;
    }

    // Struct @ meta.h:471:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 1592, Pack = 8)]
    public struct ecs_struct_desc_t
    {
        [FieldOffset(0)] // size = 312, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(312)] // size = 1280, padding = 0
        public fixed ulong _members[1280 / 8]; // ecs_member_t[32]

        public Span<ecs_member_t> members
        {
            get
            {
                fixed (ecs_struct_desc_t* @this = &this)
                {
                    var pointer = &@this->_members[0];
                    var span = new Span<ecs_member_t>(pointer, 32);
                    return span;
                }
            }
        }
    }

    // Struct @ expr.h:104:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/expr.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct ecs_expr_desc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U expr;

        [FieldOffset(16)] // size = 8, padding = 0
        public FnPtr_FLECS_Ecs_world_tPtr_CString8U_VoidPtr_Ecs_entity_t lookup_action;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* lookup_ctx;
    }

    // Struct @ stats.h:78:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 24248, Pack = 4)]
    public struct ecs_world_stats_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int dummy_;

        [FieldOffset(4)] // size = 720, padding = 0
        public ecs_gauge_t entity_count;

        [FieldOffset(724)] // size = 720, padding = 0
        public ecs_gauge_t component_count;

        [FieldOffset(1444)] // size = 720, padding = 0
        public ecs_gauge_t query_count;

        [FieldOffset(2164)] // size = 720, padding = 0
        public ecs_gauge_t system_count;

        [FieldOffset(2884)] // size = 720, padding = 0
        public ecs_gauge_t table_count;

        [FieldOffset(3604)] // size = 720, padding = 0
        public ecs_gauge_t empty_table_count;

        [FieldOffset(4324)] // size = 720, padding = 0
        public ecs_gauge_t singleton_table_count;

        [FieldOffset(5044)] // size = 720, padding = 0
        public ecs_gauge_t matched_entity_count;

        [FieldOffset(5764)] // size = 720, padding = 0
        public ecs_gauge_t matched_table_count;

        [FieldOffset(6484)] // size = 960, padding = 0
        public ecs_counter_t new_count;

        [FieldOffset(7444)] // size = 960, padding = 0
        public ecs_counter_t bulk_new_count;

        [FieldOffset(8404)] // size = 960, padding = 0
        public ecs_counter_t delete_count;

        [FieldOffset(9364)] // size = 960, padding = 0
        public ecs_counter_t clear_count;

        [FieldOffset(10324)] // size = 960, padding = 0
        public ecs_counter_t add_count;

        [FieldOffset(11284)] // size = 960, padding = 0
        public ecs_counter_t remove_count;

        [FieldOffset(12244)] // size = 960, padding = 0
        public ecs_counter_t set_count;

        [FieldOffset(13204)] // size = 960, padding = 0
        public ecs_counter_t discard_count;

        [FieldOffset(14164)] // size = 960, padding = 0
        public ecs_counter_t world_time_total_raw;

        [FieldOffset(15124)] // size = 960, padding = 0
        public ecs_counter_t world_time_total;

        [FieldOffset(16084)] // size = 960, padding = 0
        public ecs_counter_t frame_time_total;

        [FieldOffset(17044)] // size = 960, padding = 0
        public ecs_counter_t system_time_total;

        [FieldOffset(18004)] // size = 960, padding = 0
        public ecs_counter_t merge_time_total;

        [FieldOffset(18964)] // size = 720, padding = 0
        public ecs_gauge_t fps;

        [FieldOffset(19684)] // size = 720, padding = 0
        public ecs_gauge_t delta_time;

        [FieldOffset(20404)] // size = 960, padding = 0
        public ecs_counter_t frame_count_total;

        [FieldOffset(21364)] // size = 960, padding = 0
        public ecs_counter_t merge_count_total;

        [FieldOffset(22324)] // size = 960, padding = 0
        public ecs_counter_t pipeline_build_count_total;

        [FieldOffset(23284)] // size = 960, padding = 0
        public ecs_counter_t systems_ran_frame;

        [FieldOffset(24244)] // size = 4, padding = 0
        public int t;
    }

    // Struct @ stats.h:92:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 2164, Pack = 4)]
    public struct ecs_query_stats_t
    {
        [FieldOffset(0)] // size = 720, padding = 0
        public ecs_gauge_t matched_table_count;

        [FieldOffset(720)] // size = 720, padding = 0
        public ecs_gauge_t matched_empty_table_count;

        [FieldOffset(1440)] // size = 720, padding = 0
        public ecs_gauge_t matched_entity_count;

        [FieldOffset(2160)] // size = 4, padding = 0
        public int t;
    }

    // Struct @ stats.h:101:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 5524, Pack = 4)]
    public struct ecs_system_stats_t
    {
        [FieldOffset(0)] // size = 2164, padding = 0
        public ecs_query_stats_t query_stats;

        [FieldOffset(2164)] // size = 960, padding = 0
        public ecs_counter_t time_spent;

        [FieldOffset(3124)] // size = 960, padding = 0
        public ecs_counter_t invoke_count;

        [FieldOffset(4084)] // size = 720, padding = 0
        public ecs_gauge_t active;

        [FieldOffset(4804)] // size = 720, padding = 0
        public ecs_gauge_t enabled;
    }

    // Struct @ stats.h:112:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_pipeline_stats_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_vector_t* systems;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_map_t* system_stats;
    }

    // Struct @ stats.h:29:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 720, Pack = 4)]
    public struct ecs_gauge_t
    {
        [FieldOffset(0)] // size = 240, padding = 0
        public fixed uint _avg[240 / 4]; // float[60]

        public Span<float> avg
        {
            get
            {
                fixed (ecs_gauge_t* @this = &this)
                {
                    var pointer = &@this->_avg[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }

        [FieldOffset(240)] // size = 240, padding = 0
        public fixed uint _min[240 / 4]; // float[60]

        public Span<float> min
        {
            get
            {
                fixed (ecs_gauge_t* @this = &this)
                {
                    var pointer = &@this->_min[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }

        [FieldOffset(480)] // size = 240, padding = 0
        public fixed uint _max[240 / 4]; // float[60]

        public Span<float> max
        {
            get
            {
                fixed (ecs_gauge_t* @this = &this)
                {
                    var pointer = &@this->_max[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }
    }

    // Struct @ strbuf.h:40:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 536, Pack = 8)]
    public struct ecs_strbuf_element_embedded
    {
        [FieldOffset(0)] // size = 24, padding = 0
        public ecs_strbuf_element super;

        [FieldOffset(24)] // size = 512, padding = 0
        public fixed byte _buf[512 / 1]; // char[512]

        public string buf
        {
            get
            {
                fixed (ecs_strbuf_element_embedded* @this = &this)
                {
                    var pointer = &@this->_buf[0];
                    var cString = new CString8U(pointer);
                    return Runtime.String8U(cString);
                }
            }
        }
    }

    // Struct @ strbuf.h:35:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_strbuf_element
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public CBool buffer_embedded;

        [FieldOffset(4)] // size = 4, padding = 0
        public int pos;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U buf;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_strbuf_element* next;
    }

    // Struct @ api_types.h:200:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 296, Pack = 8)]
    public struct ecs_iter_cache_t
    {
        [FieldOffset(0)] // size = 64, padding = 0
        public fixed ulong _ids[64 / 8]; // ecs_id_t[8]

        public Span<ecs_id_t> ids
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_ids[0];
                    var span = new Span<ecs_id_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(64)] // size = 32, padding = 0
        public fixed uint _columns[32 / 4]; // int32_t[8]

        public Span<int> columns
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_columns[0];
                    var span = new Span<int>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(96)] // size = 64, padding = 0
        public fixed ulong _subjects[64 / 8]; // ecs_entity_t[8]

        public Span<ecs_entity_t> subjects
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_subjects[0];
                    var span = new Span<ecs_entity_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(160)] // size = 32, padding = 0
        public fixed uint _sizes[32 / 4]; // ecs_size_t[8]

        public Span<ecs_size_t> sizes
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_sizes[0];
                    var span = new Span<ecs_size_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(192)] // size = 64, padding = 0
        public fixed ulong _ptrs[64 / 8]; // void*[8]

        public Span<IntPtr> ptrs
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_ptrs[0];
                    var span = new Span<IntPtr>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(256)] // size = 32, padding = 0
        public fixed uint _match_indices[32 / 4]; // int32_t[8]

        public Span<int> match_indices
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_match_indices[0];
                    var span = new Span<int>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(288)] // size = 1, padding = 0
        public CBool ids_alloc;

        [FieldOffset(289)] // size = 1, padding = 0
        public CBool columns_alloc;

        [FieldOffset(290)] // size = 1, padding = 0
        public CBool subjects_alloc;

        [FieldOffset(291)] // size = 1, padding = 0
        public CBool sizes_alloc;

        [FieldOffset(292)] // size = 1, padding = 0
        public CBool ptrs_alloc;

        [FieldOffset(293)] // size = 1, padding = 2
        public CBool match_indices_alloc;
    }

    // Struct @ api_types.h:124:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 288, Pack = 8)]
    public struct ecs_term_iter_t
    {
        [FieldOffset(0)] // size = 192, padding = 0
        public ecs_term_t term;

        [FieldOffset(192)] // size = 8, padding = 0
        public ecs_id_record_t* self_index;

        [FieldOffset(200)] // size = 8, padding = 0
        public ecs_id_record_t* set_index;

        [FieldOffset(208)] // size = 8, padding = 0
        public ecs_id_record_t* cur;

        [FieldOffset(216)] // size = 4, padding = 4
        public int index;

        [FieldOffset(224)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(232)] // size = 4, padding = 0
        public int cur_match;

        [FieldOffset(236)] // size = 4, padding = 0
        public int match_count;

        [FieldOffset(240)] // size = 4, padding = 4
        public int last_column;

        [FieldOffset(248)] // size = 8, padding = 0
        public ecs_id_t id;

        [FieldOffset(256)] // size = 4, padding = 4
        public int column;

        [FieldOffset(264)] // size = 8, padding = 0
        public ecs_entity_t subject;

        [FieldOffset(272)] // size = 4, padding = 4
        public ecs_size_t size;

        [FieldOffset(280)] // size = 8, padding = 0
        public void* ptr;
    }

    // Struct @ api_types.h:141:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 1880, Pack = 8)]
    public struct ecs_filter_iter_t
    {
        [FieldOffset(0)] // size = 1576, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(1576)] // size = 4, padding = 4
        public ecs_filter_iter_kind_t kind;

        [FieldOffset(1584)] // size = 288, padding = 0
        public ecs_term_iter_t term_iter;

        [FieldOffset(1872)] // size = 4, padding = 0
        public int min_term_index;

        [FieldOffset(1876)] // size = 4, padding = 0
        public int matches_left;
    }

    // Struct @ api_types.h:151:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_query_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_query_t* query;

        [FieldOffset(8)] // size = 12, padding = 4
        public ecs_page_iter_t page_iter;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_query_table_node_t* node;

        [FieldOffset(32)] // size = 4, padding = 0
        public int sparse_smallest;

        [FieldOffset(36)] // size = 4, padding = 0
        public int sparse_first;

        [FieldOffset(40)] // size = 4, padding = 4
        public int bitset_first;
    }

    // Struct @ api_types.h:183:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct ecs_rule_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_rule_t* rule;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_rule_reg_t* registers;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t* variables;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_rule_op_ctx_t* op_ctx;

        [FieldOffset(32)] // size = 8, padding = 0
        public int* columns;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(48)] // size = 1, padding = 3
        public CBool redo;

        [FieldOffset(52)] // size = 4, padding = 0
        public int op;

        [FieldOffset(56)] // size = 4, padding = 4
        public int sp;
    }

    // Struct @ api_types.h:158:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 1592, Pack = 8)]
    public struct ecs_snapshot_iter_t
    {
        [FieldOffset(0)] // size = 1576, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(1576)] // size = 8, padding = 0
        public ecs_vector_t* tables;

        [FieldOffset(1584)] // size = 4, padding = 4
        public int index;
    }

    // Struct @ flecs.h:237:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_term_set_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t relation;

        [FieldOffset(8)] // size = 1, padding = 3
        public byte mask;

        [FieldOffset(12)] // size = 4, padding = 0
        public int min_depth;

        [FieldOffset(16)] // size = 4, padding = 4
        public int max_depth;
    }

    // Struct @ stats.h:35:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 960, Pack = 4)]
    public struct ecs_counter_t
    {
        [FieldOffset(0)] // size = 720, padding = 0
        public ecs_gauge_t rate;

        [FieldOffset(720)] // size = 240, padding = 0
        public fixed uint _value[240 / 4]; // float[60]

        public Span<float> value
        {
            get
            {
                fixed (ecs_counter_t* @this = &this)
                {
                    var pointer = &@this->_value[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }
    }

    // Struct @ strbuf.h:50:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_strbuf_list_elem
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int count;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U separator;
    }

    // Struct @ api_types.h:102:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct ecs_page_iter_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(4)] // size = 4, padding = 0
        public int limit;

        [FieldOffset(8)] // size = 4, padding = 0
        public int remaining;
    }

    // Struct @ meta.h:297:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct ecs_meta_scope_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t type;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_meta_type_op_t* ops;

        [FieldOffset(16)] // size = 4, padding = 0
        public int op_count;

        [FieldOffset(20)] // size = 4, padding = 0
        public int op_cur;

        [FieldOffset(24)] // size = 4, padding = 4
        public int elem_cur;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* ptr;

        [FieldOffset(40)] // size = 8, padding = 0
        public EcsComponent* comp;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_vector_t** vector;

        [FieldOffset(56)] // size = 1, padding = 0
        public CBool is_collection;

        [FieldOffset(57)] // size = 1, padding = 6
        public CBool is_inline_array;
    }

    // Struct @ meta.h:201:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_enum_constant_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 4, padding = 4
        public int value;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t constant;
    }

    // Struct @ meta.h:217:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_bitmask_constant_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 4, padding = 4
        public ecs_flags32_t value;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t constant;
    }

    // Struct @ meta.h:185:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct ecs_member_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_entity_t type;

        [FieldOffset(16)] // size = 4, padding = 0
        public int count;

        [FieldOffset(20)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(24)] // size = 4, padding = 4
        public ecs_size_t size;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_entity_t member;
    }

    // Struct @ meta.h:274:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_meta_type_op_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public ecs_meta_type_op_kind_t kind;

        [FieldOffset(4)] // size = 4, padding = 0
        public ecs_size_t offset;

        [FieldOffset(8)] // size = 4, padding = 4
        public int count;

        [FieldOffset(16)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(24)] // size = 4, padding = 0
        public int op_count;

        [FieldOffset(28)] // size = 4, padding = 0
        public ecs_size_t size;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_entity_t type;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_hashmap_t* members;
    }

    // Struct @ flecs.h:598:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct EcsComponent
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public ecs_size_t size;

        [FieldOffset(4)] // size = 4, padding = 0
        public ecs_size_t alignment;
    }

    // OpaqueType @ map.h:36:26 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_map_t
    {
    }

    // OpaqueType @ flecs.h:87:28 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_world_t
    {
    }

    // OpaqueType @ api_types.h:28:28 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_table_t
    {
    }

    // OpaqueType @ flecs.h:90:28 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_query_t
    {
    }

    // OpaqueType @ flecs.h:96:27 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_rule_t
    {
    }

    // OpaqueType @ snapshot.h:23:31 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_snapshot_t
    {
    }

    // OpaqueType @ map.h:41:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_bucket_t
    {
    }

    // OpaqueType @ flecs.h:74:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_poly_t
    {
    }

    // OpaqueType @ hashmap.h:28:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/hashmap.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_hm_bucket_t
    {
    }

    // OpaqueType @ api_types.h:46:32 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_id_record_t
    {
    }

    // OpaqueType @ api_types.h:52:39 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_query_table_node_t
    {
    }

    // OpaqueType @ api_types.h:172:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_rule_reg_t
    {
    }

    // OpaqueType @ api_types.h:174:12 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_rule_op_ctx_t
    {
    }

    // Typedef @ api_defines.h:68:17 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct ecs_size_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(ecs_size_t data) => data.Data;
        public static implicit operator ecs_size_t(int data) => new() { Data = data };
    }

    // Typedef @ map.h:37:18 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_map_key_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Data;

        public static implicit operator ulong(ecs_map_key_t data) => data.Data;
        public static implicit operator ecs_map_key_t(ulong data) => new() { Data = data };
    }

    // Typedef @ flecs.h:81:18 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_entity_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_id_t Data;

        public static implicit operator ecs_id_t(ecs_entity_t data) => data.Data;
        public static implicit operator ecs_entity_t(ecs_id_t data) => new() { Data = data };
    }

    // Typedef @ flecs.h:84:29 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_type_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_vector_t* Data;

        public static implicit operator ecs_vector_t*(ecs_type_t data) => data.Data;
        public static implicit operator ecs_type_t(ecs_vector_t* data) => new() { Data = data };
    }

    // Typedef @ flecs.h:78:18 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_id_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Data;

        public static implicit operator ulong(ecs_id_t data) => data.Data;
        public static implicit operator ecs_id_t(ulong data) => new() { Data = data };
    }

    // Typedef @ os_api.h:53:19 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_thread_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_thread_t data) => data.Data;
        public static implicit operator ecs_os_thread_t(UIntPtr data) => new() { Data = data };
    }

    // Typedef @ os_api.h:55:19 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_mutex_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_mutex_t data) => data.Data;
        public static implicit operator ecs_os_mutex_t(UIntPtr data) => new() { Data = data };
    }

    // Typedef @ os_api.h:54:19 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_cond_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_cond_t data) => data.Data;
        public static implicit operator ecs_os_cond_t(UIntPtr data) => new() { Data = data };
    }

    // Typedef @ os_api.h:56:19 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_dl_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_dl_t data) => data.Data;
        public static implicit operator ecs_os_dl_t(UIntPtr data) => new() { Data = data };
    }

    // Typedef @ api_defines.h:64:18 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct ecs_flags32_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint Data;

        public static implicit operator uint(ecs_flags32_t data) => data.Data;
        public static implicit operator ecs_flags32_t(uint data) => new() { Data = data };
    }

    // Enum @ meta.h:161:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    public enum ecs_primitive_kind_t : int
    {
        EcsBool = 1,
        EcsChar = 2,
        EcsByte = 3,
        EcsU8 = 4,
        EcsU16 = 5,
        EcsU32 = 6,
        EcsU64 = 7,
        EcsI8 = 8,
        EcsI16 = 9,
        EcsI32 = 10,
        EcsI64 = 11,
        EcsF32 = 12,
        EcsF64 = 13,
        EcsUPtr = 14,
        EcsIPtr = 15,
        EcsString = 16,
        EcsEntity = 17
    }

    // Enum @ flecs.h:208:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_inout_kind_t : int
    {
        EcsInOutDefault = 0,
        EcsInOut = 1,
        EcsIn = 2,
        EcsOut = 3
    }

    // Enum @ flecs.h:226:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_oper_kind_t : int
    {
        EcsAnd = 0,
        EcsOr = 1,
        EcsNot = 2,
        EcsOptional = 3,
        EcsAndFrom = 4,
        EcsOrFrom = 5,
        EcsNotFrom = 6
    }

    // Enum @ flecs.h:215:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_var_kind_t : int
    {
        EcsVarDefault = 0,
        EcsVarIsEntity = 1,
        EcsVarIsVariable = 2
    }

    // Enum @ flecs.h:2834:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_payload_kind_t : int
    {
        EcsPayloadNone = 0,
        EcsPayloadEntity = 1,
        EcsPayloadTable = 2
    }

    // Enum @ api_types.h:130:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    public enum ecs_filter_iter_kind_t : int
    {
        EcsFilterIterEvalIndex = 0,
        EcsFilterIterEvalChain = 1,
        EcsFilterIterEvalNone = 2
    }

    // Enum @ system.h:47:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/system.h)
    public enum ecs_system_status_t : int
    {
        EcsSystemStatusNone = 0,
        EcsSystemEnabled = 1,
        EcsSystemDisabled = 2,
        EcsSystemActivated = 3,
        EcsSystemDeactivated = 4
    }

    // Enum @ meta.h:263:3 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    public enum ecs_meta_type_op_kind_t : int
    {
        EcsOpEnum = 0,
        EcsOpBitmask = 1,
        EcsOpArray = 2,
        EcsOpVector = 3,
        EcsOpPush = 4,
        EcsOpPop = 5,
        EcsOpPrimitive = 6,
        EcsOpBool = 7,
        EcsOpChar = 8,
        EcsOpByte = 9,
        EcsOpU8 = 10,
        EcsOpU16 = 11,
        EcsOpU32 = 12,
        EcsOpU64 = 13,
        EcsOpI8 = 14,
        EcsOpI16 = 15,
        EcsOpI32 = 16,
        EcsOpI64 = 17,
        EcsOpF32 = 18,
        EcsOpF64 = 19,
        EcsOpUPtr = 20,
        EcsOpIPtr = 21,
        EcsOpString = 22,
        EcsOpEntity = 23
    }

    // Pseudo enum 'ecs_type_kind_t' @ meta.h:129:14 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    public const int EcsPrimitiveType = 0;
    public const int EcsBitmaskType = 1;
    public const int EcsEnumType = 2;
    public const int EcsStructType = 3;
    public const int EcsArrayType = 4;
    public const int EcsVectorType = 5;

    // MacroObjectLike @ api_defines.h:119:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_ROLE_MASK = 0xFFUL << 56;

    // MacroObjectLike @ api_defines.h:120:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_ENTITY_MASK = 0xFFFFFFFFUL;

    // MacroObjectLike @ api_defines.h:121:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_GENERATION_MASK = 0xFFFFUL << 32;

    // MacroObjectLike @ api_defines.h:124:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_COMPONENT_MASK = ~ECS_ROLE_MASK;

    // MacroObjectLike @ api_defines.h:307:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_OPERATION = 1;

    // MacroObjectLike @ api_defines.h:308:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_PARAMETER = 2;

    // MacroObjectLike @ api_defines.h:309:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_DELETE = 3;

    // MacroObjectLike @ api_defines.h:310:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_OUT_OF_MEMORY = 4;

    // MacroObjectLike @ api_defines.h:311:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_OUT_OF_RANGE = 5;

    // MacroObjectLike @ api_defines.h:312:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_UNSUPPORTED = 6;

    // MacroObjectLike @ api_defines.h:313:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INTERNAL_ERROR = 7;

    // MacroObjectLike @ api_defines.h:314:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_ALREADY_DEFINED = 8;

    // MacroObjectLike @ api_defines.h:315:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_MISSING_OS_API = 9;

    // MacroObjectLike @ api_defines.h:316:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_THREAD_ERROR = 10;

    // MacroObjectLike @ api_defines.h:317:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_CYCLE_DETECTED = 11;

    // MacroObjectLike @ api_defines.h:319:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INCONSISTENT_NAME = 20;

    // MacroObjectLike @ api_defines.h:320:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_NAME_IN_USE = 21;

    // MacroObjectLike @ api_defines.h:321:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_NOT_A_COMPONENT = 22;

    // MacroObjectLike @ api_defines.h:322:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_COMPONENT_SIZE = 23;

    // MacroObjectLike @ api_defines.h:323:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_COMPONENT_ALIGNMENT = 24;

    // MacroObjectLike @ api_defines.h:324:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COMPONENT_NOT_REGISTERED = 25;

    // MacroObjectLike @ api_defines.h:325:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INCONSISTENT_COMPONENT_ID = 26;

    // MacroObjectLike @ api_defines.h:326:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INCONSISTENT_COMPONENT_ACTION = 27;

    // MacroObjectLike @ api_defines.h:327:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_MODULE_UNDEFINED = 28;

    // MacroObjectLike @ api_defines.h:329:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_ACCESS_VIOLATION = 40;

    // MacroObjectLike @ api_defines.h:330:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_INDEX_OUT_OF_RANGE = 41;

    // MacroObjectLike @ api_defines.h:331:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_IS_NOT_SHARED = 42;

    // MacroObjectLike @ api_defines.h:332:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_IS_SHARED = 43;

    // MacroObjectLike @ api_defines.h:333:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_HAS_NO_DATA = 44;

    // MacroObjectLike @ api_defines.h:334:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_TYPE_MISMATCH = 45;

    // MacroObjectLike @ api_defines.h:335:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_NO_OUT_COLUMNS = 46;

    // MacroObjectLike @ api_defines.h:337:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_TYPE_NOT_AN_ENTITY = 60;

    // MacroObjectLike @ api_defines.h:338:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_TYPE_CONSTRAINT_VIOLATION = 61;

    // MacroObjectLike @ api_defines.h:339:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_TYPE_INVALID_CASE = 62;

    // MacroObjectLike @ api_defines.h:341:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_WHILE_ITERATING = 70;

    // MacroObjectLike @ api_defines.h:342:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_LOCKED_STORAGE = 71;

    // MacroObjectLike @ api_defines.h:343:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_FROM_WORKER = 72;

    // MacroObjectLike @ api_defines.h:345:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_DESERIALIZE_FORMAT_ERROR = 80;

    // MacroObjectLike @ log.h:20:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_BLACK = "\033[1;30m";

    // MacroObjectLike @ log.h:21:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_RED = "\033[0;31m";

    // MacroObjectLike @ log.h:22:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_GREEN = "\033[0;32m";

    // MacroObjectLike @ log.h:23:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_YELLOW = "\033[0;33m";

    // MacroObjectLike @ log.h:24:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_BLUE = "\033[0;34m";

    // MacroObjectLike @ log.h:25:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_MAGENTA = "\033[0;35m";

    // MacroObjectLike @ log.h:26:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_CYAN = "\033[0;36m";

    // MacroObjectLike @ log.h:27:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_WHITE = "\033[1;37m";

    // MacroObjectLike @ log.h:28:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_GREY = "\033[0;37m";

    // MacroObjectLike @ log.h:29:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_NORMAL = "\033[0;49m";

    // MacroObjectLike @ log.h:30:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_BOLD = "\033[1;49m";

    // MacroObjectLike @ strbuf.h:27:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    public const int ECS_STRBUF_ELEMENT_SIZE = 511;

    // MacroObjectLike @ strbuf.h:28:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    public const int ECS_STRBUF_MAX_LIST_DEPTH = 32;

    // MacroObjectLike @ flecs.h:122:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_MAX_ADD_REMOVE = 32;

    // MacroObjectLike @ flecs.h:125:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_TERM_CACHE_SIZE = 8;

    // MacroObjectLike @ flecs.h:128:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_TERM_DESC_CACHE_SIZE = 16;

    // MacroObjectLike @ flecs.h:131:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_TRIGGER_DESC_EVENT_COUNT_MAX = 8;

    // MacroObjectLike @ flecs.h:193:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsDefaultSet = 0;

    // MacroObjectLike @ flecs.h:194:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsSelf = 1;

    // MacroObjectLike @ flecs.h:195:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsSuperSet = 2;

    // MacroObjectLike @ flecs.h:196:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsSubSet = 4;

    // MacroObjectLike @ flecs.h:197:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsCascade = 8;

    // MacroObjectLike @ flecs.h:198:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsAll = 16;

    // MacroObjectLike @ flecs.h:199:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsParent = 32;

    // MacroObjectLike @ flecs.h:200:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsNothing = 64;

    // MacroObjectLike @ api_support.h:24:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int ECS_HI_COMPONENT_ID = 256;

    // MacroObjectLike @ api_support.h:28:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int ECS_MAX_RECURSION = 512;

    // MacroObjectLike @ api_support.h:31:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int ECS_MAX_TOKEN_SIZE = 256;

    // MacroObjectLike @ api_support.h:38:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int FLECS__E0 = 0;

    // MacroObjectLike @ flecs.h:705:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const ulong ECS_ROLE = 1UL << 63;

    // MacroObjectLike @ flecs.h:908:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsFirstUserComponentId = 32;

    // MacroObjectLike @ flecs.h:912:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsFirstUserEntityId = ECS_HI_COMPONENT_ID + 128;

    // MacroObjectLike @ meta.h:71:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    public const int ECS_MEMBER_DESC_CACHE_SIZE = 32;

    // MacroObjectLike @ meta.h:283:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/meta.h)
    public const int ECS_META_MAX_SCOPE_DEPTH = 32;

    // MacroObjectLike @ stats.h:22:9 (/home/runner/work/flecs-cs/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    public const int ECS_STAT_WINDOW = 60;
}
