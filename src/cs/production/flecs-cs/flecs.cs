
//-------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the following tool:
//        https://github.com/lithiumtoast/c2cs (v0.0.0.0)
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ReSharper disable All
//-------------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

using C2CS;

#nullable enable
#pragma warning disable 1591

public static unsafe partial class flecs
{
    private const string LibraryName = "flecs";

    // Function @ log.h:38:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_trace(int level, CString8U file, int line, CString8U fmt);

    // Function @ log.h:46:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_warn(CString8U file, int line, CString8U fmt);

    // Function @ log.h:53:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_err(CString8U file, int line, CString8U fmt);

    // Function @ log.h:60:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_fatal(CString8U file, int line, CString8U fmt);

    // Function @ log.h:67:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_deprecated(CString8U file, int line, CString8U msg);

    // Function @ log.h:73:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void ecs_log_push();

    // Function @ log.h:76:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void ecs_log_pop();

    // Function @ log.h:135:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_strerror(int error_code);

    // Function @ log.h:140:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_abort(int error_code, CString8U file, int line, CString8U fmt);

    // Function @ log.h:152:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_assert(CBool condition, int error_code, CString8U condition_str, CString8U file, int line, CString8U fmt);

    // Function @ log.h:170:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_parser_error(CString8U name, CString8U expr, long column, CString8U fmt);

    // Function @ vector.h:98:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* _ecs_vector_new(ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:111:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* _ecs_vector_from_array(ecs_size_t elem_size, short offset, int elem_count, void* array);

    // Function @ vector.h:122:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_zero(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:132:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_free(ecs_vector_t* vector);

    // Function @ vector.h:137:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_clear(ecs_vector_t* vector);

    // Function @ vector.h:142:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_assert_size(ecs_vector_t* vector_inout, ecs_size_t elem_size);

    // Function @ vector.h:148:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_assert_alignment(ecs_vector_t* vector, ecs_size_t elem_alignment);

    // Function @ vector.h:154:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_add(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset);

    // Function @ vector.h:167:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_addn(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:181:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_get(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

    // Function @ vector.h:195:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_last(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:209:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_min_size(ecs_vector_t** array_inout, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:221:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_min_count(ecs_vector_t** vector_inout, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:232:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void ecs_vector_remove_last(ecs_vector_t* vector);

    // Function @ vector.h:237:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern CBool _ecs_vector_pop(ecs_vector_t* vector, ecs_size_t elem_size, short offset, void* value);

    // Function @ vector.h:248:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_move_index(ecs_vector_t** dst, ecs_vector_t* src, ecs_size_t elem_size, short offset, int index);

    // Function @ vector.h:260:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_remove(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int index);

    // Function @ vector.h:274:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_reclaim(ecs_vector_t** vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:284:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_grow(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:295:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_size(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:310:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int _ecs_vector_set_count(ecs_vector_t** vector, ecs_size_t elem_size, short offset, int elem_count);

    // Function @ vector.h:324:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int ecs_vector_count(ecs_vector_t* vector);

    // Function @ vector.h:329:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern int ecs_vector_size(ecs_vector_t* vector);

    // Function @ vector.h:334:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_vector_first(ecs_vector_t* vector, ecs_size_t elem_size, short offset);

    // Function @ vector.h:347:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_sort(ecs_vector_t* vector, ecs_size_t elem_size, short offset, ecs_comparator_t compare_action);

    // Function @ vector.h:358:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern void _ecs_vector_memory(ecs_vector_t* vector, ecs_size_t elem_size, short offset, int* allocd, int* used);

    // Function @ vector.h:373:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* _ecs_vector_copy(ecs_vector_t* src, ecs_size_t elem_size, short offset);

    // Function @ map.h:49:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern ecs_map_t* _ecs_map_new(ecs_size_t elem_size, ecs_size_t alignment, int elem_count);

    // Function @ map.h:59:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_get(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

    // Function @ map.h:72:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_get_ptr(ecs_map_t* map, ecs_map_key_t key);

    // Function @ map.h:81:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_map_has(ecs_map_t* map, ecs_map_key_t key);

    // Function @ map.h:87:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_ensure(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key);

    // Function @ map.h:97:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_set(ecs_map_t* map, ecs_size_t elem_size, ecs_map_key_t key, void* payload);

    // Function @ map.h:108:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_free(ecs_map_t* map);

    // Function @ map.h:113:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_remove(ecs_map_t* map, ecs_map_key_t key);

    // Function @ map.h:119:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_clear(ecs_map_t* map);

    // Function @ map.h:124:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern int ecs_map_count(ecs_map_t* map);

    // Function @ map.h:129:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern int ecs_map_bucket_count(ecs_map_t* map);

    // Function @ map.h:134:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern ecs_map_iter_t ecs_map_iter(ecs_map_t* map);

    // Function @ map.h:139:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_next(ecs_map_iter_t* iter, ecs_size_t elem_size, ecs_map_key_t* key);

    // Function @ map.h:149:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_map_next_ptr(ecs_map_iter_t* iter, ecs_map_key_t* key);

    // Function @ map.h:158:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_grow(ecs_map_t* map, int elem_count);

    // Function @ map.h:164:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_set_size(ecs_map_t* map, int elem_count);

    // Function @ map.h:170:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [DllImport(LibraryName)]
    public static extern void ecs_map_memory(ecs_map_t* map, int* allocd, int* used);

    // Function @ strbuf.h:80:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_append(ecs_strbuf_t* buffer, CString8U fmt);

    // Function @ strbuf.h:88:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_vappend(ecs_strbuf_t* buffer, CString8U fmt, IntPtr args);

    // Function @ strbuf.h:96:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstr(ecs_strbuf_t* buffer, CString8U str);

    // Function @ strbuf.h:103:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_mergebuff(ecs_strbuf_t* dst_buffer, ecs_strbuf_t* src_buffer);

    // Function @ strbuf.h:110:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstr_zerocpy(ecs_strbuf_t* buffer, CString8U str);

    // Function @ strbuf.h:117:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstr_zerocpy_const(ecs_strbuf_t* buffer, CString8U str);

    // Function @ strbuf.h:124:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_appendstrn(ecs_strbuf_t* buffer, CString8U str, int n);

    // Function @ strbuf.h:131:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_strbuf_get(ecs_strbuf_t* buffer);

    // Function @ strbuf.h:136:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_reset(ecs_strbuf_t* buffer);

    // Function @ strbuf.h:141:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_list_push(ecs_strbuf_t* buffer, CString8U list_open, CString8U separator);

    // Function @ strbuf.h:148:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_list_pop(ecs_strbuf_t* buffer, CString8U list_close);

    // Function @ strbuf.h:154:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern void ecs_strbuf_list_next(ecs_strbuf_t* buffer);

    // Function @ strbuf.h:159:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_list_append(ecs_strbuf_t* buffer, CString8U fmt);

    // Function @ strbuf.h:166:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_strbuf_list_appendstr(ecs_strbuf_t* buffer, CString8U str);

    // Function @ os_api.h:258:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_init();

    // Function @ os_api.h:261:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_fini();

    // Function @ os_api.h:264:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_set_api(ecs_os_api_t* os_api);

    // Function @ os_api.h:268:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_set_api_defaults();

    // Function @ os_api.h:387:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_log(CString8U fmt);

    // Function @ os_api.h:390:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_warn(CString8U fmt);

    // Function @ os_api.h:393:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_err(CString8U fmt);

    // Function @ os_api.h:396:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_os_dbg(CString8U fmt);

    // Function @ os_api.h:399:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_os_strerror(int err);

    // Function @ os_api.h:415:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void ecs_sleepf(double t);

    // Function @ os_api.h:420:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern double ecs_time_measure(ecs_time_t* start);

    // Function @ os_api.h:425:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern ecs_time_t ecs_time_sub(ecs_time_t t1, ecs_time_t t2);

    // Function @ os_api.h:431:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern double ecs_time_to_double(ecs_time_t t);

    // Function @ os_api.h:435:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_os_memdup(void* src, ecs_size_t size);

    // Function @ os_api.h:441:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_heap();

    // Function @ os_api.h:445:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_threading();

    // Function @ os_api.h:449:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_time();

    // Function @ os_api.h:453:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_logging();

    // Function @ os_api.h:457:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_dl();

    // Function @ os_api.h:461:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_os_has_modules();

    // Function @ api_support.h:52:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_module_path_from_c(CString8U c_name);

    // Function @ api_support.h:56:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_component_has_actions(ecs_world_t* world, ecs_entity_t component);

    // Function @ api_support.h:61:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern void ecs_add_module_tag(ecs_world_t* world, ecs_entity_t module);

    // Function @ api_support.h:69:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_identifier_is_0(CString8U id);

    // Function @ api_support.h:72:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_identifier_is_var(CString8U id);

    // Function @ type.h:17:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_type_from_id(ecs_world_t* world, ecs_entity_t entity);

    // Function @ type.h:22:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_type_to_id(ecs_world_t* world, ecs_type_t type);

    // Function @ type.h:27:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_type_str(ecs_world_t* world, ecs_type_t type);

    // Function @ type.h:32:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_type_from_str(ecs_world_t* world, CString8U expr);

    // Function @ type.h:37:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_type_merge(ecs_world_t* world, ecs_type_t type, ecs_type_t type_add, ecs_type_t type_remove);

    // Function @ type.h:44:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_type_add(ecs_world_t* world, ecs_type_t type, ecs_id_t id);

    // Function @ type.h:50:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_type_remove(ecs_world_t* world, ecs_type_t type, ecs_id_t id);

    // Function @ type.h:56:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern int ecs_type_index_of(ecs_type_t type, int offset, ecs_id_t id);

    // Function @ type.h:62:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_type_has_id(ecs_world_t* world, ecs_type_t type, ecs_id_t id, CBool owned);

    // Function @ type.h:69:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern int ecs_type_match(ecs_world_t* world, ecs_table_t* table, ecs_type_t type, int offset, ecs_id_t id, ecs_entity_t rel, int min_depth, int max_depth, ecs_entity_t* @out);

    // Function @ type.h:81:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_type_has_type(ecs_world_t* world, ecs_type_t type, ecs_type_t has);

    // Function @ type.h:87:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_type_owns_type(ecs_world_t* world, ecs_type_t type, ecs_type_t has, CBool owned);

    // Function @ type.h:94:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/type.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_type_get_entity_for_xor(ecs_world_t* world, ecs_type_t type, ecs_entity_t xor_tag);

    // Function @ deprecated.h:208:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_dim_type(ecs_world_t* world, ecs_type_t type, int entity_count);

    // Function @ deprecated.h:215:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_w_type(ecs_world_t* world, ecs_type_t type);

    // Function @ deprecated.h:221:21 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t* ecs_bulk_new_w_type(ecs_world_t* world, ecs_type_t type, int count);

    // Function @ deprecated.h:228:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_add_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t type);

    // Function @ deprecated.h:235:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_remove_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t type);

    // Function @ deprecated.h:242:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_add_remove_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t to_add, ecs_type_t to_remove);

    // Function @ deprecated.h:250:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_has_type(ecs_world_t* world, ecs_entity_t entity, ecs_type_t type);

    // Function @ deprecated.h:257:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern int ecs_count_type(ecs_world_t* world, ecs_type_t type);

    // Function @ deprecated.h:263:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern int ecs_count_entity(ecs_world_t* world, ecs_id_t entity);

    // Function @ deprecated.h:269:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern int ecs_count_w_filter(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ deprecated.h:275:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_component_actions_w_entity(ecs_world_t* world, ecs_id_t id, EcsComponentLifecycle* actions);

    // Function @ deprecated.h:282:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_w_entity(ecs_world_t* world, ecs_id_t id);

    // Function @ deprecated.h:288:21 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t* ecs_bulk_new_w_entity(ecs_world_t* world, ecs_id_t id, int count);

    // Function @ deprecated.h:295:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_enable_component_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool enable);

    // Function @ deprecated.h:303:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_component_enabled_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:310:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:317:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:324:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_ref_w_entity(ecs_world_t* world, ecs_ref_t* @ref, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:332:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_mut_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool* is_added);

    // Function @ deprecated.h:340:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_mut_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool* is_added);

    // Function @ deprecated.h:348:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_modified_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:354:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_modified_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:361:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_ptr_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, ulong size, void* ptr);

    // Function @ deprecated.h:370:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_has_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:377:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_entity_str(ecs_world_t* world, ecs_id_t entity, CString8U buffer, ulong buffer_len);

    // Function @ deprecated.h:385:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_parent_w_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:395:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_thread_index(ecs_world_t* world);

    // Function @ deprecated.h:400:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_add_entity(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t entity_add);

    // Function @ deprecated.h:407:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_remove_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ deprecated.h:414:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_add_remove_entity(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id_add, ecs_id_t id_remove);

    // Function @ deprecated.h:422:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_type_from_entity(ecs_world_t* world, ecs_entity_t entity);

    // Function @ deprecated.h:428:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_type_to_entity(ecs_world_t* world, ecs_type_t type);

    // Function @ deprecated.h:434:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_type_has_entity(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity);

    // Function @ deprecated.h:441:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_type_owns_entity(ecs_world_t* world, ecs_type_t type, ecs_entity_t entity, CBool owned);

    // Function @ deprecated.h:449:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_column_w_size(ecs_iter_t* it, ulong size, int column);

    // Function @ deprecated.h:459:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern int ecs_column_index_from_name(ecs_iter_t* it, CString8U name);

    // Function @ deprecated.h:465:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_column_source(ecs_iter_t* it, int column);

    // Function @ deprecated.h:471:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_column_entity(ecs_iter_t* it, int column);

    // Function @ deprecated.h:477:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_column_type(ecs_iter_t* it, int column);

    // Function @ deprecated.h:483:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_column_size(ecs_iter_t* it, int column);

    // Function @ deprecated.h:489:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_readonly(ecs_iter_t* it, int column);

    // Function @ deprecated.h:495:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_owned(ecs_iter_t* it, int column);

    // Function @ deprecated.h:501:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_table_column(ecs_iter_t* it, int column);

    // Function @ deprecated.h:507:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_table_column_size(ecs_iter_t* it, int column);

    // Function @ deprecated.h:513:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern int ecs_table_component_index(ecs_iter_t* it, ecs_entity_t component);

    // Function @ deprecated.h:519:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_rate_filter(ecs_world_t* world, ecs_entity_t filter, int rate, ecs_entity_t source);

    // Function @ deprecated.h:527:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_query_t* ecs_query_new(ecs_world_t* world, CString8U sig);

    // Function @ deprecated.h:533:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern ecs_query_t* ecs_subquery_new(ecs_world_t* world, ecs_query_t* parent, CString8U sig);

    // Function @ deprecated.h:540:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_query_free(ecs_query_t* query);

    // Function @ deprecated.h:545:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_query_order_by(ecs_world_t* world, ecs_query_t* query, ecs_entity_t component, ecs_order_by_action_t compare);

    // Function @ deprecated.h:553:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/deprecated.h)
    [DllImport(LibraryName)]
    public static extern void ecs_query_group_by(ecs_world_t* world, ecs_query_t* query, ecs_entity_t component, ecs_group_by_action_t rank_action);

    // Function @ flecs.h:1054:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_init();

    // Function @ flecs.h:1061:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_mini();

    // Function @ flecs.h:1071:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_init_w_args(int argc, CString8U* argv);

    // Function @ flecs.h:1082:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_fini(ecs_world_t* world);

    // Function @ flecs.h:1093:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_atfini(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

    // Function @ flecs.h:1106:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_run_post_frame(ecs_world_t* world, ecs_fini_action_t action, void* ctx);

    // Function @ flecs.h:1118:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_quit(ecs_world_t* world);

    // Function @ flecs.h:1126:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_should_quit(ecs_world_t* world);

    // Function @ flecs.h:1136:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_component_actions_w_id(ecs_world_t* world, ecs_id_t id, EcsComponentLifecycle* actions);

    // Function @ flecs.h:1154:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_context(ecs_world_t* world, void* ctx);

    // Function @ flecs.h:1166:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_context(ecs_world_t* world);

    // Function @ flecs.h:1176:25 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_info_t* ecs_get_world_info(ecs_world_t* world);

    // Function @ flecs.h:1189:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_dim(ecs_world_t* world, int entity_count);

    // Function @ flecs.h:1209:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_entity_range(ecs_world_t* world, ecs_entity_t id_start, ecs_entity_t id_end);

    // Function @ flecs.h:1225:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_enable_range_check(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1246:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_enable_locking(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1256:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_lock(ecs_world_t* world);

    // Function @ flecs.h:1265:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_unlock(ecs_world_t* world);

    // Function @ flecs.h:1279:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_begin_wait(ecs_world_t* world);

    // Function @ flecs.h:1289:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_end_wait(ecs_world_t* world);

    // Function @ flecs.h:1310:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_tracing_enable(int level);

    // Function @ flecs.h:1319:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_tracing_color_enable(CBool enabled);

    // Function @ flecs.h:1333:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_measure_frame_time(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1347:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_measure_system_time(ecs_world_t* world, CBool enable);

    // Function @ flecs.h:1367:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_target_fps(ecs_world_t* world, float fps);

    // Function @ flecs.h:1373:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_threads(ecs_world_t* world);

    // Function @ flecs.h:1390:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_id(ecs_world_t* world);

    // Function @ flecs.h:1403:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_component_id(ecs_world_t* world);

    // Function @ flecs.h:1415:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_w_id(ecs_world_t* world, ecs_id_t id);

    // Function @ flecs.h:1451:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_entity_init(ecs_world_t* world, ecs_entity_desc_t* desc);

    // Function @ flecs.h:1469:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_component_init(ecs_world_t* world, ecs_component_desc_t* desc);

    // Function @ flecs.h:1492:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_type_init(ecs_world_t* world, ecs_type_desc_t* desc);

    // Function @ flecs.h:1506:21 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t* ecs_bulk_new_w_id(ecs_world_t* world, ecs_id_t id, int count);

    // Function @ flecs.h:1524:21 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t* ecs_bulk_new_w_data(ecs_world_t* world, int count, ecs_ids_t* component_ids, void* data);

    // Function @ flecs.h:1556:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_clone(ecs_world_t* world, ecs_entity_t dst, ecs_entity_t src, CBool copy_value);

    // Function @ flecs.h:1579:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_add_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1611:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_remove_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1655:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_enable_component_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool enable);

    // Function @ flecs.h:1675:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_component_enabled_w_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1699:10 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_id_t ecs_make_pair(ecs_entity_t relation, ecs_entity_t @object);

    // Function @ flecs.h:1898:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_clear(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1912:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_delete(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:1925:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_delete_children(ecs_world_t* world, ecs_entity_t parent);

    // Function @ flecs.h:1947:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:1978:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_ref_w_id(ecs_world_t* world, ecs_ref_t* @ref, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:2006:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_case(ecs_world_t* world, ecs_entity_t e, ecs_entity_t sw);

    // Function @ flecs.h:2034:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_mut_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, CBool* is_added);

    // Function @ flecs.h:2066:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_emplace_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:2094:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_modified_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:2123:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id, ulong size, void* ptr);

    // Function @ flecs.h:2198:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_has_id(ecs_world_t* world, ecs_entity_t entity, ecs_id_t id);

    // Function @ flecs.h:2259:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_valid(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:2272:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_alive(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:2293:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_alive(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:2321:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_ensure(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:2333:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_exists(ecs_world_t* world, ecs_entity_t e);

    // Function @ flecs.h:2344:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_get_type(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:2355:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_get_table(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:2366:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_typeid(ecs_world_t* world, ecs_id_t e);

    // Function @ flecs.h:2378:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_get_name(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:2390:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_get_symbol(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:2406:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_name(ecs_world_t* world, ecs_entity_t entity, CString8U name);

    // Function @ flecs.h:2423:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_symbol(ecs_world_t* world, ecs_entity_t entity, CString8U symbol);

    // Function @ flecs.h:2436:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_role_str(ecs_entity_t entity);

    // Function @ flecs.h:2449:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_id_str(ecs_world_t* world, ecs_id_t entity, CString8U buffer, ulong buffer_len);

    // Function @ flecs.h:2470:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_object(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t rel, int index);

    // Function @ flecs.h:2486:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_enable(ecs_world_t* world, ecs_entity_t entity, CBool enabled);

    // Function @ flecs.h:2499:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_count_id(ecs_world_t* world, ecs_id_t entity);

    // Function @ flecs.h:2521:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_count_filter(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ flecs.h:2542:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup(ecs_world_t* world, CString8U name);

    // Function @ flecs.h:2556:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup_child(ecs_world_t* world, ecs_entity_t parent, CString8U name);

    // Function @ flecs.h:2580:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString8U path, CString8U sep, CString8U prefix, CBool recursive);

    // Function @ flecs.h:2621:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_lookup_symbol(ecs_world_t* world, CString8U symbol, CBool lookup_as_path);

    // Function @ flecs.h:2628:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_use(ecs_world_t* world, ecs_entity_t entity, CString8U name);

    // Function @ flecs.h:2659:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_get_path_w_sep(ecs_world_t* world, ecs_entity_t parent, ecs_entity_t child, CString8U sep, CString8U prefix);

    // Function @ flecs.h:2707:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_new_from_path_w_sep(ecs_world_t* world, ecs_entity_t parent, CString8U path, CString8U sep, CString8U prefix);

    // Function @ flecs.h:2751:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_add_path_w_sep(ecs_world_t* world, ecs_entity_t entity, ecs_entity_t parent, CString8U path, CString8U sep, CString8U prefix);

    // Function @ flecs.h:2798:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_child_count(ecs_world_t* world, ecs_entity_t entity);

    // Function @ flecs.h:2811:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_scope_iter(ecs_world_t* world, ecs_entity_t parent);

    // Function @ flecs.h:2823:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_scope_iter_w_filter(ecs_world_t* world, ecs_entity_t parent, ecs_filter_t* filter);

    // Function @ flecs.h:2837:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_scope_next(ecs_iter_t* it);

    // Function @ flecs.h:2852:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_scope(ecs_world_t* world, ecs_entity_t scope);

    // Function @ flecs.h:2864:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_scope(ecs_world_t* world);

    // Function @ flecs.h:2875:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_with(ecs_world_t* world, ecs_id_t id);

    // Function @ flecs.h:2887:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_with(ecs_world_t* world);

    // Function @ flecs.h:2900:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_set_name_prefix(ecs_world_t* world, CString8U prefix);

    // Function @ flecs.h:2925:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_term_iter(ecs_world_t* world, ecs_term_t* term);

    // Function @ flecs.h:2939:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_next(ecs_iter_t* it);

    // Function @ flecs.h:2948:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_id_is_set(ecs_term_id_t* id);

    // Function @ flecs.h:2963:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_initialized(ecs_term_t* term);

    // Function @ flecs.h:2990:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_trivial(ecs_term_t* term);

    // Function @ flecs.h:3014:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_term_finalize(ecs_world_t* world, CString8U name, CString8U expr, ecs_term_t* term);

    // Function @ flecs.h:3029:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_term_t ecs_term_copy(ecs_term_t* src);

    // Function @ flecs.h:3043:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_term_t ecs_term_move(ecs_term_t* src);

    // Function @ flecs.h:3053:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_term_fini(ecs_term_t* term);

    // Function @ flecs.h:3064:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_id_match(ecs_id_t id, ecs_id_t pattern);

    // Function @ flecs.h:3074:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_id_is_pair(ecs_id_t id);

    // Function @ flecs.h:3083:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_id_is_wildcard(ecs_id_t id);

    // Function @ flecs.h:3115:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_filter_init(ecs_world_t* world, ecs_filter_t* filter_out, ecs_filter_desc_t* desc);

    // Function @ flecs.h:3126:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_filter_fini(ecs_filter_t* filter);

    // Function @ flecs.h:3143:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_filter_finalize(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ flecs.h:3152:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_filter_str(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ flecs.h:3166:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_filter_iter(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ flecs.h:3180:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_filter_next(ecs_iter_t* iter);

    // Function @ flecs.h:3185:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_filter_move(ecs_filter_t* dst, ecs_filter_t* src);

    // Function @ flecs.h:3191:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_filter_copy(ecs_filter_t* dst, ecs_filter_t* src);

    // Function @ flecs.h:3237:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_query_t* ecs_query_init(ecs_world_t* world, ecs_query_desc_t* desc);

    // Function @ flecs.h:3249:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_query_fini(ecs_query_t* query);

    // Function @ flecs.h:3259:21 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_filter_t* ecs_query_get_filter(ecs_query_t* query);

    // Function @ flecs.h:3289:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_query_iter(ecs_query_t* query);

    // Function @ flecs.h:3302:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_query_iter_page(ecs_query_t* query, int offset, int limit);

    // Function @ flecs.h:3317:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_next(ecs_iter_t* iter);

    // Function @ flecs.h:3329:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_next_w_filter(ecs_iter_t* iter, ecs_filter_t* filter);

    // Function @ flecs.h:3349:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_next_worker(ecs_iter_t* it, int stage_current, int stage_count);

    // Function @ flecs.h:3365:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_changed(ecs_query_t* query);

    // Function @ flecs.h:3377:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_query_orphaned(ecs_query_t* query);

    // Function @ flecs.h:3402:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_trigger_init(ecs_world_t* world, ecs_trigger_desc_t* desc);

    // Function @ flecs.h:3415:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_trigger_ctx(ecs_world_t* world, ecs_entity_t trigger);

    // Function @ flecs.h:3429:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_trigger_binding_ctx(ecs_world_t* world, ecs_entity_t trigger);

    // Function @ flecs.h:3463:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_emit(ecs_world_t* world, ecs_event_desc_t* desc);

    // Function @ flecs.h:3484:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_observer_init(ecs_world_t* world, ecs_observer_desc_t* desc);

    // Function @ flecs.h:3489:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_observer_ctx(ecs_world_t* world, ecs_entity_t observer);

    // Function @ flecs.h:3494:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_observer_binding_ctx(ecs_world_t* world, ecs_entity_t observer);

    // Function @ flecs.h:3530:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_term_w_size(ecs_iter_t* it, ulong size, int index);

    // Function @ flecs.h:3549:10 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_id_t ecs_term_id(ecs_iter_t* it, int index);

    // Function @ flecs.h:3567:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_term_source(ecs_iter_t* it, int index);

    // Function @ flecs.h:3579:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_term_size(ecs_iter_t* it, int index);

    // Function @ flecs.h:3592:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_readonly(ecs_iter_t* it, int index);

    // Function @ flecs.h:3606:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_set(ecs_iter_t* it, int term);

    // Function @ flecs.h:3620:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_term_is_owned(ecs_iter_t* it, int index);

    // Function @ flecs.h:3632:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_iter_type(ecs_iter_t* it);

    // Function @ flecs.h:3642:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_iter_table(ecs_iter_t* it);

    // Function @ flecs.h:3665:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_iter_find_column(ecs_iter_t* it, ecs_id_t id);

    // Function @ flecs.h:3697:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_iter_column_w_size(ecs_iter_t* it, ulong size, int index);

    // Function @ flecs.h:3715:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ulong ecs_iter_column_size(ecs_iter_t* it, int index);

    // Function @ flecs.h:3746:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern float ecs_frame_begin(ecs_world_t* world, float delta_time);

    // Function @ flecs.h:3757:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_frame_end(ecs_world_t* world);

    // Function @ flecs.h:3780:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_staging_begin(ecs_world_t* world);

    // Function @ flecs.h:3793:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_staging_end(ecs_world_t* world);

    // Function @ flecs.h:3807:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_merge(ecs_world_t* world);

    // Function @ flecs.h:3820:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_defer_begin(ecs_world_t* world);

    // Function @ flecs.h:3829:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_is_deferred(ecs_world_t* world);

    // Function @ flecs.h:3841:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_defer_end(ecs_world_t* world);

    // Function @ flecs.h:3861:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_automerge(ecs_world_t* world, CBool automerge);

    // Function @ flecs.h:3879:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_stages(ecs_world_t* world, int stages);

    // Function @ flecs.h:3890:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_stage_count(ecs_world_t* world);

    // Function @ flecs.h:3901:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_get_stage_id(ecs_world_t* world);

    // Function @ flecs.h:3920:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_get_stage(ecs_world_t* world, int stage_id);

    // Function @ flecs.h:3929:20 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_get_world(ecs_world_t* world);

    // Function @ flecs.h:3940:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_stage_is_readonly(ecs_world_t* stage);

    // Function @ flecs.h:3962:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_world_t* ecs_async_stage_new(ecs_world_t* world);

    // Function @ flecs.h:3972:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_async_stage_free(ecs_world_t* stage);

    // Function @ flecs.h:3982:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_stage_is_async(ecs_world_t* stage);

    // Function @ flecs.h:4008:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_table_from_str(ecs_world_t* world, CString8U type);

    // Function @ flecs.h:4020:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_table_from_type(ecs_world_t* world, ecs_type_t type);

    // Function @ flecs.h:4030:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_type_t ecs_table_get_type(ecs_table_t* table);

    // Function @ flecs.h:4056:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_record_t ecs_table_insert(ecs_world_t* world, ecs_table_t* table, ecs_entity_t entity, ecs_record_t* @record);

    // Function @ flecs.h:4072:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_table_count(ecs_table_t* table);

    // Function @ flecs.h:4085:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_table_add_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

    // Function @ flecs.h:4100:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern ecs_table_t* ecs_table_remove_id(ecs_world_t* world, ecs_table_t* table, ecs_id_t id);

    // Function @ flecs.h:4121:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_table_lock(ecs_world_t* world, ecs_table_t* table);

    // Function @ flecs.h:4132:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern void ecs_table_unlock(ecs_world_t* world, ecs_table_t* table);

    // Function @ flecs.h:4144:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_table_has_module(ecs_table_t* table);

    // Function @ flecs.h:4170:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_commit(ecs_world_t* world, ecs_entity_t entity, ecs_record_t* @record, ecs_table_t* table, ecs_ids_t* added, ecs_ids_t* removed);

    // Function @ module.h:42:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/module.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_import(ecs_world_t* world, ecs_module_action_t module, CString8U module_name, void* handles_out, ulong handles_size);

    // Function @ module.h:68:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/module.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_import_from_library(ecs_world_t* world, CString8U library_name, CString8U module_name);

    // Function @ module.h:76:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/module.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_module_init(ecs_world_t* world, ecs_component_desc_t* desc);

    // Function @ system.h:128:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_system_init(ecs_world_t* world, ecs_system_desc_t* desc);

    // Function @ system.h:186:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_run(ecs_world_t* world, ecs_entity_t system, float delta_time, void* param);

    // Function @ system.h:203:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_run_worker(ecs_world_t* world, ecs_entity_t system, int stage_current, int stage_count, float delta_time, void* param);

    // Function @ system.h:233:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_run_w_filter(ecs_world_t* world, ecs_entity_t system, float delta_time, int offset, int limit, ecs_filter_t* filter, void* param);

    // Function @ system.h:252:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern ecs_query_t* ecs_get_system_query(ecs_world_t* world, ecs_entity_t system);

    // Function @ system.h:265:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_system_ctx(ecs_world_t* world, ecs_entity_t system);

    // Function @ system.h:279:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_get_system_binding_ctx(ecs_world_t* world, ecs_entity_t system);

    // Function @ system.h:294:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [DllImport(LibraryName)]
    public static extern void FlecsSystemImport(ecs_world_t* world);

    // Function @ pipeline.h:49:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_pipeline(ecs_world_t* world, ecs_entity_t pipeline);

    // Function @ pipeline.h:60:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_get_pipeline(ecs_world_t* world);

    // Function @ pipeline.h:82:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_progress(ecs_world_t* world, float delta_time);

    // Function @ pipeline.h:93:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_time_scale(ecs_world_t* world, float scale);

    // Function @ pipeline.h:103:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_reset_clock(ecs_world_t* world);

    // Function @ pipeline.h:125:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_pipeline_run(ecs_world_t* world, ecs_entity_t pipeline, float delta_time);

    // Function @ pipeline.h:141:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_deactivate_systems(ecs_world_t* world);

    // Function @ pipeline.h:155:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_threads(ecs_world_t* world, int threads);

    // Function @ pipeline.h:169:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/pipeline.h)
    [DllImport(LibraryName)]
    public static extern void FlecsPipelineImport(ecs_world_t* world);

    // Function @ timer.h:79:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_timeout(ecs_world_t* world, ecs_entity_t tick_source, float timeout);

    // Function @ timer.h:104:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern float ecs_get_timeout(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:126:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_interval(ecs_world_t* world, ecs_entity_t tick_source, float interval);

    // Function @ timer.h:140:13 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern float ecs_get_interval(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:154:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern void ecs_start_timer(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:166:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern void ecs_stop_timer(ecs_world_t* world, ecs_entity_t tick_source);

    // Function @ timer.h:201:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern ecs_entity_t ecs_set_rate(ecs_world_t* world, ecs_entity_t tick_source, int rate, ecs_entity_t source);

    // Function @ timer.h:230:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern void ecs_set_tick_source(ecs_world_t* world, ecs_entity_t system, ecs_entity_t tick_source);

    // Function @ timer.h:246:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/timer.h)
    [DllImport(LibraryName)]
    public static extern void FlecsTimerImport(ecs_world_t* world);

    // Function @ bulk.h:24:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/bulk.h)
    [DllImport(LibraryName)]
    public static extern void ecs_bulk_add_entity(ecs_world_t* world, ecs_entity_t entity_add, ecs_filter_t* filter);

    // Function @ bulk.h:38:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/bulk.h)
    [DllImport(LibraryName)]
    public static extern void ecs_bulk_add_type(ecs_world_t* world, ecs_type_t type, ecs_filter_t* filter);

    // Function @ bulk.h:63:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/bulk.h)
    [DllImport(LibraryName)]
    public static extern void ecs_bulk_remove_entity(ecs_world_t* world, ecs_entity_t entity_remove, ecs_filter_t* filter);

    // Function @ bulk.h:77:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/bulk.h)
    [DllImport(LibraryName)]
    public static extern void ecs_bulk_remove_type(ecs_world_t* world, ecs_type_t type, ecs_filter_t* filter);

    // Function @ bulk.h:102:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/bulk.h)
    [DllImport(LibraryName)]
    public static extern void ecs_bulk_add_remove_type(ecs_world_t* world, ecs_type_t to_add, ecs_type_t to_remove, ecs_filter_t* filter);

    // Function @ bulk.h:127:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/bulk.h)
    [DllImport(LibraryName)]
    public static extern void ecs_bulk_delete(ecs_world_t* world, ecs_filter_t* filter);

    // Function @ plecs.h:55:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/plecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_plecs_from_str(ecs_world_t* world, CString8U name, CString8U str);

    // Function @ plecs.h:70:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/plecs.h)
    [DllImport(LibraryName)]
    public static extern int ecs_plecs_from_file(ecs_world_t* world, CString8U filename);

    // Function @ parser.h:46:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/parser.h)
    [DllImport(LibraryName)]
    public static extern CString8U ecs_parse_term(ecs_world_t* world, CString8U name, CString8U expr, CString8U ptr, ecs_term_t* term_out);

    // Function @ queue.h:21:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern ecs_queue_t* _ecs_queue_new(ecs_size_t elem_size, short offset, int elem_count);

    // Function @ queue.h:30:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern ecs_queue_t* _ecs_queue_from_array(ecs_size_t elem_size, short offset, int elem_count, void* array);

    // Function @ queue.h:40:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_queue_push(ecs_queue_t* queue, ecs_size_t elem_size, short offset);

    // Function @ queue.h:49:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_queue_get(ecs_queue_t* queue, ecs_size_t elem_size, short offset, int index);

    // Function @ queue.h:62:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern void* _ecs_queue_last(ecs_queue_t* queue, ecs_size_t elem_size, short offset);

    // Function @ queue.h:71:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern int ecs_queue_index(ecs_queue_t* queue);

    // Function @ queue.h:75:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern int ecs_queue_count(ecs_queue_t* queue);

    // Function @ queue.h:79:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [DllImport(LibraryName)]
    public static extern void ecs_queue_free(ecs_queue_t* queue);

    // Function @ snapshot.h:33:17 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern ecs_snapshot_t* ecs_snapshot_take(ecs_world_t* world);

    // Function @ snapshot.h:45:17 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern ecs_snapshot_t* ecs_snapshot_take_w_iter(ecs_iter_t* iter, ecs_iter_next_action_t action);

    // Function @ snapshot.h:64:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern void ecs_snapshot_restore(ecs_world_t* world, ecs_snapshot_t* snapshot);

    // Function @ snapshot.h:73:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern ecs_iter_t ecs_snapshot_iter(ecs_snapshot_t* snapshot, ecs_filter_t* filter);

    // Function @ snapshot.h:83:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_snapshot_next(ecs_iter_t* iter);

    // Function @ snapshot.h:94:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [DllImport(LibraryName)]
    public static extern void ecs_snapshot_free(ecs_snapshot_t* snapshot);

    // Function @ direct_access.h:34:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern int ecs_table_find_column(ecs_table_t* table, ecs_entity_t component);

    // Function @ direct_access.h:50:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* ecs_table_get_column(ecs_table_t* table, int column);

    // Function @ direct_access.h:83:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* ecs_table_set_column(ecs_world_t* world, ecs_table_t* table, int column, ecs_vector_t* vector);

    // Function @ direct_access.h:98:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* ecs_table_get_entities(ecs_table_t* table);

    // Function @ direct_access.h:110:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern ecs_vector_t* ecs_table_get_records(ecs_table_t* table);

    // Function @ direct_access.h:121:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void ecs_records_clear(ecs_vector_t* records);

    // Function @ direct_access.h:133:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void ecs_records_update(ecs_world_t* world, ecs_vector_t* entities, ecs_vector_t* records, ecs_table_t* table);

    // Function @ direct_access.h:158:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void ecs_table_set_entities(ecs_table_t* table, ecs_vector_t* entities, ecs_vector_t* records);

    // Function @ direct_access.h:197:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void ecs_table_delete_column(ecs_world_t* world, ecs_table_t* table, int column, ecs_vector_t* vector);

    // Function @ direct_access.h:223:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern ecs_record_t* ecs_record_find(ecs_world_t* world, ecs_entity_t entity);

    // Function @ direct_access.h:237:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern ecs_record_t* ecs_record_ensure(ecs_world_t* world, ecs_entity_t entity);

    // Function @ direct_access.h:249:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void* ecs_record_get_column(ecs_record_t* r, int column, ulong size);

    // Function @ direct_access.h:271:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void ecs_record_copy_to(ecs_world_t* world, ecs_record_t* r, int column, ulong size, void* value, int count);

    // Function @ direct_access.h:292:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void ecs_record_copy_pod_to(ecs_world_t* world, ecs_record_t* r, int column, ulong size, void* value, int count);

    // Function @ direct_access.h:313:6 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/direct_access.h)
    [DllImport(LibraryName)]
    public static extern void ecs_record_move_to(ecs_world_t* world, ecs_record_t* r, int column, ulong size, void* value, int count);

    // Function @ stats.h:121:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_get_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

    // Function @ stats.h:132:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_dump_world_stats(ecs_world_t* world, ecs_world_stats_t* stats);

    // Function @ stats.h:143:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_get_query_stats(ecs_world_t* world, ecs_query_t* query, ecs_query_stats_t* s);

    // Function @ stats.h:157:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_get_system_stats(ecs_world_t* world, ecs_entity_t system, ecs_system_stats_t* stats);

    // Function @ stats.h:172:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern CBool ecs_get_pipeline_stats(ecs_world_t* world, ecs_entity_t pipeline, ecs_pipeline_stats_t* stats);

    // Function @ stats.h:178:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [DllImport(LibraryName)]
    public static extern void ecs_gauge_reduce(ecs_gauge_t* dst, int t_dst, ecs_gauge_t* src, int t_src);

    // FunctionPointer @ vector.h:92:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_comparator_t
    {
        public delegate* unmanaged<void*, void*, int> Pointer;
    }

    // FunctionPointer @ flecs.h:145:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_order_by_action_t
    {
        public delegate* unmanaged<ecs_entity_t, void*, ecs_entity_t, void*, int> Pointer;
    }

    // FunctionPointer @ flecs.h:152:19 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_group_by_action_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_type_t, ecs_id_t, void*, int> Pointer;
    }

    // FunctionPointer @ flecs.h:163:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_fini_action_t
    {
        public delegate* unmanaged<ecs_world_t*, void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:159:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_module_action_t
    {
        public delegate* unmanaged<ecs_world_t*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:141:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_iter_next_action_t
    {
        public delegate* unmanaged<ecs_iter_t*, CBool> Pointer;
    }

    // FunctionPointer @ os_api.h:63:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_init_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:67:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_fini_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:71:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_malloc_t
    {
        public delegate* unmanaged<ecs_size_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:79:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_realloc_t
    {
        public delegate* unmanaged<void*, ecs_size_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:84:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_calloc_t
    {
        public delegate* unmanaged<ecs_size_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:75:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_free_t
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:88:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_strdup_t
    {
        public delegate* unmanaged<CString8U, CString8U> Pointer;
    }

    // FunctionPointer @ os_api.h:97:19 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_thread_new_t
    {
        public delegate* unmanaged<ecs_os_thread_callback_t, void*, ecs_os_thread_t> Pointer;
    }

    // FunctionPointer @ os_api.h:102:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_thread_join_t
    {
        public delegate* unmanaged<ecs_os_thread_t, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:108:7 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_ainc_t
    {
        public delegate* unmanaged<int*, int> Pointer;
    }

    // FunctionPointer @ os_api.h:114:18 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_mutex_new_t
    {
        public delegate* unmanaged<ecs_os_mutex_t> Pointer;
    }

    // FunctionPointer @ os_api.h:126:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_mutex_free_t
    {
        public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:118:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_mutex_lock_t
    {
        public delegate* unmanaged<ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:131:17 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_new_t
    {
        public delegate* unmanaged<ecs_os_cond_t> Pointer;
    }

    // FunctionPointer @ os_api.h:135:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_free_t
    {
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:139:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_signal_t
    {
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:143:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_broadcast_t
    {
        public delegate* unmanaged<ecs_os_cond_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:147:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_cond_wait_t
    {
        public delegate* unmanaged<ecs_os_cond_t, ecs_os_mutex_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:152:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_sleep_t
    {
        public delegate* unmanaged<int, int, void> Pointer;
    }

    // FunctionPointer @ os_api.h:157:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_get_time_t
    {
        public delegate* unmanaged<ecs_time_t*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:162:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_log_t
    {
        public delegate* unmanaged<CString8U, IntPtr, void> Pointer;
    }

    // FunctionPointer @ os_api.h:168:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_abort_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // FunctionPointer @ os_api.h:173:15 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_dlopen_t
    {
        public delegate* unmanaged<CString8U, ecs_os_dl_t> Pointer;
    }

    // FunctionPointer @ os_api.h:177:17 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_dlproc_t
    {
        public delegate* unmanaged<ecs_os_dl_t, CString8U, ecs_os_proc_t> Pointer;
    }

    // FunctionPointer @ os_api.h:182:8 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_dlclose_t
    {
        public delegate* unmanaged<ecs_os_dl_t, void> Pointer;
    }

    // FunctionPointer @ os_api.h:186:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_api_module_to_path_t
    {
        public delegate* unmanaged<CString8U, CString8U> Pointer;
    }

    // FunctionPointer @ api_types.h:266:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_xtor_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:276:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_copy_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:288:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_move_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:300:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_copy_ctor_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, EcsComponentLifecycle*, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:313:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_move_ctor_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, EcsComponentLifecycle*, ecs_entity_t*, ecs_entity_t*, void*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ api_types.h:326:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_on_set_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_entity_t*, void*, ulong, int, void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:168:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_ctx_free_t
    {
        public delegate* unmanaged<void*, void> Pointer;
    }

    // FunctionPointer @ flecs.h:138:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_iter_action_t
    {
        public delegate* unmanaged<ecs_iter_t*, void> Pointer;
    }

    // FunctionPointer @ system.h:77:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_system_status_action_t
    {
        public delegate* unmanaged<ecs_world_t*, ecs_entity_t, ecs_system_status_t, void*, void> Pointer;
    }

    // FunctionPointer @ os_api.h:93:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_thread_callback_t
    {
        public delegate* unmanaged<void*, void*> Pointer;
    }

    // FunctionPointer @ os_api.h:59:16 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_os_proc_t
    {
        public delegate* unmanaged<void> Pointer;
    }

    // Struct @ vector.h:90:29 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/vector.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_vector_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int count;

        [FieldOffset(4)] // size = 4, padding = 0
        public int size;

        [FieldOffset(8)] // size = 8, padding = 0
        public long elem_size;
    }

    // Struct @ map.h:45:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct ecs_map_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_map_t* map;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_bucket_t* bucket;

        [FieldOffset(16)] // size = 4, padding = 0
        public int bucket_index;

        [FieldOffset(20)] // size = 4, padding = 0
        public int element_index;

        [FieldOffset(24)] // size = 8, padding = 0
        public void* payload;
    }

    // Struct @ strbuf.h:75:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 1088, Pack = 8)]
    public struct ecs_strbuf_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public CString8U buf;

        [FieldOffset(8)] // size = 4, padding = 0
        public int max;

        [FieldOffset(12)] // size = 4, padding = 0
        public int size;

        [FieldOffset(16)] // size = 4, padding = 4
        public int elementCount;

        [FieldOffset(24)] // size = 536, padding = 0
        public ecs_strbuf_element_embedded firstElement;

        [FieldOffset(560)] // size = 8, padding = 0
        public ecs_strbuf_element* current;

        [FieldOffset(568)] // size = 512, padding = 0
        public fixed ulong _list_stack[512 / 8]; // ecs_strbuf_list_elem[32]

        public Span<ecs_strbuf_list_elem> list_stack
        {
            get
            {
                fixed (ecs_strbuf_t* @this = &this)
                {
                    var pointer = &@this->_list_stack[0];
                    var span = new Span<ecs_strbuf_list_elem>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(1080)] // size = 4, padding = 4
        public int list_sp;
    }

    // Struct @ os_api.h:252:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 256, Pack = 8)]
    public struct ecs_os_api_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_os_api_init_t init_;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_os_api_fini_t fini_;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_os_api_malloc_t malloc_;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_os_api_realloc_t realloc_;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_os_api_calloc_t calloc_;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_os_api_free_t free_;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_os_api_strdup_t strdup_;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_os_api_thread_new_t thread_new_;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_os_api_thread_join_t thread_join_;

        [FieldOffset(72)] // size = 8, padding = 0
        public ecs_os_api_ainc_t ainc_;

        [FieldOffset(80)] // size = 8, padding = 0
        public ecs_os_api_ainc_t adec_;

        [FieldOffset(88)] // size = 8, padding = 0
        public ecs_os_api_mutex_new_t mutex_new_;

        [FieldOffset(96)] // size = 8, padding = 0
        public ecs_os_api_mutex_free_t mutex_free_;

        [FieldOffset(104)] // size = 8, padding = 0
        public ecs_os_api_mutex_lock_t mutex_lock_;

        [FieldOffset(112)] // size = 8, padding = 0
        public ecs_os_api_mutex_lock_t mutex_unlock_;

        [FieldOffset(120)] // size = 8, padding = 0
        public ecs_os_api_cond_new_t cond_new_;

        [FieldOffset(128)] // size = 8, padding = 0
        public ecs_os_api_cond_free_t cond_free_;

        [FieldOffset(136)] // size = 8, padding = 0
        public ecs_os_api_cond_signal_t cond_signal_;

        [FieldOffset(144)] // size = 8, padding = 0
        public ecs_os_api_cond_broadcast_t cond_broadcast_;

        [FieldOffset(152)] // size = 8, padding = 0
        public ecs_os_api_cond_wait_t cond_wait_;

        [FieldOffset(160)] // size = 8, padding = 0
        public ecs_os_api_sleep_t sleep_;

        [FieldOffset(168)] // size = 8, padding = 0
        public ecs_os_api_get_time_t get_time_;

        [FieldOffset(176)] // size = 8, padding = 0
        public ecs_os_api_log_t log_;

        [FieldOffset(184)] // size = 8, padding = 0
        public ecs_os_api_log_t log_error_;

        [FieldOffset(192)] // size = 8, padding = 0
        public ecs_os_api_log_t log_debug_;

        [FieldOffset(200)] // size = 8, padding = 0
        public ecs_os_api_log_t log_warning_;

        [FieldOffset(208)] // size = 8, padding = 0
        public ecs_os_api_abort_t abort_;

        [FieldOffset(216)] // size = 8, padding = 0
        public ecs_os_api_dlopen_t dlopen_;

        [FieldOffset(224)] // size = 8, padding = 0
        public ecs_os_api_dlproc_t dlproc_;

        [FieldOffset(232)] // size = 8, padding = 0
        public ecs_os_api_dlclose_t dlclose_;

        [FieldOffset(240)] // size = 8, padding = 0
        public ecs_os_api_module_to_path_t module_to_dl_;

        [FieldOffset(248)] // size = 8, padding = 0
        public ecs_os_api_module_to_path_t module_to_etc_;
    }

    // Struct @ os_api.h:44:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct ecs_time_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public uint sec;

        [FieldOffset(4)] // size = 4, padding = 0
        public uint nanosec;
    }

    // Struct @ flecs.h:94:29 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 1600, Pack = 8)]
    public struct ecs_filter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_term_t* terms;

        [FieldOffset(8)] // size = 4, padding = 0
        public int term_count;

        [FieldOffset(12)] // size = 4, padding = 0
        public int term_count_actual;

        [FieldOffset(16)] // size = 1536, padding = 0
        public fixed ulong _term_cache[1536 / 8]; // ecs_term_t[8]

        public Span<ecs_term_t> term_cache
        {
            get
            {
                fixed (ecs_filter_t* @this = &this)
                {
                    var pointer = &@this->_term_cache[0];
                    var span = new Span<ecs_term_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(1552)] // size = 1, padding = 0
        public CBool term_cache_used;

        [FieldOffset(1553)] // size = 1, padding = 0
        public CBool match_this;

        [FieldOffset(1554)] // size = 1, padding = 5
        public CBool match_only_this;

        [FieldOffset(1560)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(1568)] // size = 8, padding = 0
        public CString8U expr;

        [FieldOffset(1576)] // size = 8, padding = 0
        public ecs_type_t include;

        [FieldOffset(1584)] // size = 8, padding = 0
        public ecs_type_t exclude;

        [FieldOffset(1592)] // size = 4, padding = 0
        public ecs_match_kind_t include_kind;

        [FieldOffset(1596)] // size = 4, padding = 0
        public ecs_match_kind_t exclude_kind;
    }

    // Struct @ api_types.h:263:38 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct EcsComponentLifecycle
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_xtor_t ctor;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_xtor_t dtor;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_copy_t copy;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_move_t move;

        [FieldOffset(32)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_copy_ctor_t copy_ctor;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_move_ctor_t move_ctor;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_move_ctor_t ctor_move_dtor;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_move_ctor_t move_dtor;

        [FieldOffset(72)] // size = 8, padding = 0
        public ecs_on_set_t on_set;
    }

    // Struct @ flecs.h:106:26 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_ref_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_entity_t component;

        [FieldOffset(16)] // size = 8, padding = 0
        public void* table;

        [FieldOffset(24)] // size = 4, padding = 0
        public int row;

        [FieldOffset(28)] // size = 4, padding = 0
        public int alloc_count;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_record_t* @record;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* ptr;
    }

    // Struct @ flecs.h:103:27 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 2288, Pack = 8)]
    public struct ecs_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_world_t* world;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_world_t* real_world;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t system;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_entity_t @event;

        [FieldOffset(32)] // size = 8, padding = 0
        public ecs_id_t event_id;

        [FieldOffset(40)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(56)] // size = 8, padding = 0
        public ecs_data_t* data;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_id_t* ids;

        [FieldOffset(72)] // size = 8, padding = 0
        public ecs_type_t* types;

        [FieldOffset(80)] // size = 8, padding = 0
        public int* columns;

        [FieldOffset(88)] // size = 8, padding = 0
        public ecs_entity_t* subjects;

        [FieldOffset(96)] // size = 8, padding = 0
        public ecs_size_t* sizes;

        [FieldOffset(104)] // size = 8, padding = 0
        public void** ptrs;

        [FieldOffset(112)] // size = 8, padding = 0
        public ecs_ref_t* references;

        [FieldOffset(120)] // size = 8, padding = 0
        public ecs_query_t* query;

        [FieldOffset(128)] // size = 4, padding = 0
        public int table_count;

        [FieldOffset(132)] // size = 4, padding = 0
        public int inactive_table_count;

        [FieldOffset(136)] // size = 4, padding = 0
        public int column_count;

        [FieldOffset(140)] // size = 4, padding = 0
        public int term_index;

        [FieldOffset(144)] // size = 8, padding = 0
        public void* table_columns;

        [FieldOffset(152)] // size = 8, padding = 0
        public ecs_entity_t* entities;

        [FieldOffset(160)] // size = 8, padding = 0
        public void* param;

        [FieldOffset(168)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(176)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(184)] // size = 4, padding = 0
        public float delta_time;

        [FieldOffset(188)] // size = 4, padding = 0
        public float delta_system_time;

        [FieldOffset(192)] // size = 4, padding = 0
        public float world_time;

        [FieldOffset(196)] // size = 4, padding = 0
        public int frame_offset;

        [FieldOffset(200)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(204)] // size = 4, padding = 0
        public int count;

        [FieldOffset(208)] // size = 4, padding = 0
        public int total_count;

        [FieldOffset(212)] // size = 1, padding = 3
        public CBool is_valid;

        [FieldOffset(216)] // size = 8, padding = 0
        public ecs_ids_t* triggered_by;

        [FieldOffset(224)] // size = 8, padding = 0
        public ecs_entity_t interrupted_by;

        [FieldOffset(232)] // size = 1728, padding = 0
        public ecs_iter_t_iter iter;

        [FieldOffset(1960)] // size = 328, padding = 0
        public ecs_iter_cache_t cache;

        // Union @ api_types.h:222:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
        [StructLayout(LayoutKind.Explicit, Size = 1728, Pack = 8)]
        public struct ecs_iter_t_iter
        {
            [FieldOffset(0)] // size = 1640, padding = 0
            public ecs_scope_iter_t parent;

            [FieldOffset(0)] // size = 112, padding = 0
            public ecs_term_iter_t term;

            [FieldOffset(0)] // size = 1728, padding = 0
            public ecs_filter_iter_t filter;

            [FieldOffset(0)] // size = 28, padding = 0
            public ecs_query_iter_t query;

            [FieldOffset(0)] // size = 1616, padding = 112
            public ecs_snapshot_iter_t snapshot;
        }
    }

    // Struct @ flecs.h:653:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct ecs_world_info_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t last_component_id;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_entity_t last_id;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_entity_t min_id;

        [FieldOffset(24)] // size = 8, padding = 0
        public ecs_entity_t max_id;

        [FieldOffset(32)] // size = 4, padding = 0
        public float delta_time_raw;

        [FieldOffset(36)] // size = 4, padding = 0
        public float delta_time;

        [FieldOffset(40)] // size = 4, padding = 0
        public float time_scale;

        [FieldOffset(44)] // size = 4, padding = 0
        public float target_fps;

        [FieldOffset(48)] // size = 4, padding = 0
        public float frame_time_total;

        [FieldOffset(52)] // size = 4, padding = 0
        public float system_time_total;

        [FieldOffset(56)] // size = 4, padding = 0
        public float merge_time_total;

        [FieldOffset(60)] // size = 4, padding = 0
        public float world_time_total;

        [FieldOffset(64)] // size = 4, padding = 0
        public float world_time_total_raw;

        [FieldOffset(68)] // size = 4, padding = 0
        public int frame_count_total;

        [FieldOffset(72)] // size = 4, padding = 0
        public int merge_count_total;

        [FieldOffset(76)] // size = 4, padding = 0
        public int pipeline_build_count_total;

        [FieldOffset(80)] // size = 4, padding = 4
        public int systems_ran_frame;
    }

    // Struct @ flecs.h:394:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 576, Pack = 8)]
    public struct ecs_entity_desc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(16)] // size = 8, padding = 0
        public CString8U sep;

        [FieldOffset(24)] // size = 8, padding = 0
        public CString8U root_sep;

        [FieldOffset(32)] // size = 8, padding = 0
        public CString8U symbol;

        [FieldOffset(40)] // size = 1, padding = 7
        public CBool use_low_id;

        [FieldOffset(48)] // size = 256, padding = 0
        public fixed ulong _add[256 / 8]; // ecs_id_t[32]

        public Span<ecs_id_t> add
        {
            get
            {
                fixed (ecs_entity_desc_t* @this = &this)
                {
                    var pointer = &@this->_add[0];
                    var span = new Span<ecs_id_t>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(304)] // size = 256, padding = 0
        public fixed ulong _remove[256 / 8]; // ecs_id_t[32]

        public Span<ecs_id_t> remove
        {
            get
            {
                fixed (ecs_entity_desc_t* @this = &this)
                {
                    var pointer = &@this->_remove[0];
                    var span = new Span<ecs_id_t>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(560)] // size = 8, padding = 0
        public CString8U add_expr;

        [FieldOffset(568)] // size = 8, padding = 0
        public CString8U remove_expr;
    }

    // Struct @ flecs.h:402:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 592, Pack = 8)]
    public struct ecs_component_desc_t
    {
        [FieldOffset(0)] // size = 576, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(576)] // size = 8, padding = 0
        public ulong size;

        [FieldOffset(584)] // size = 8, padding = 0
        public ulong alignment;
    }

    // Struct @ flecs.h:410:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 840, Pack = 8)]
    public struct ecs_type_desc_t
    {
        [FieldOffset(0)] // size = 576, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(576)] // size = 256, padding = 0
        public fixed ulong _ids[256 / 8]; // ecs_id_t[32]

        public Span<ecs_id_t> ids
        {
            get
            {
                fixed (ecs_type_desc_t* @this = &this)
                {
                    var pointer = &@this->_ids[0];
                    var span = new Span<ecs_id_t>(pointer, 32);
                    return span;
                }
            }
        }

        [FieldOffset(832)] // size = 8, padding = 0
        public CString8U ids_expr;
    }

    // Struct @ api_types.h:72:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_ids_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t* array;

        [FieldOffset(8)] // size = 4, padding = 4
        public int count;
    }

    // Struct @ flecs.h:263:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 192, Pack = 8)]
    public struct ecs_term_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_id_t id;

        [FieldOffset(8)] // size = 4, padding = 4
        public ecs_inout_kind_t inout;

        [FieldOffset(16)] // size = 48, padding = 0
        public ecs_term_id_t pred;

        [FieldOffset(64)] // size = 96, padding = 0
        public fixed ulong _args[96 / 8]; // ecs_term_id_t[2]

        public Span<ecs_term_id_t> args
        {
            get
            {
                fixed (ecs_term_t* @this = &this)
                {
                    var pointer = &@this->_args[0];
                    var span = new Span<ecs_term_id_t>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(160)] // size = 4, padding = 4
        public ecs_oper_kind_t oper;

        [FieldOffset(168)] // size = 8, padding = 0
        public ecs_id_t role;

        [FieldOffset(176)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(184)] // size = 4, padding = 0
        public int index;

        [FieldOffset(188)] // size = 1, padding = 3
        public CBool move;
    }

    // Struct @ flecs.h:241:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct ecs_term_id_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t entity;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U name;

        [FieldOffset(16)] // size = 4, padding = 4
        public ecs_var_kind_t var;

        [FieldOffset(24)] // size = 24, padding = 0
        public ecs_term_set_t set;
    }

    // Struct @ flecs.h:433:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 3104, Pack = 8)]
    public struct ecs_filter_desc_t
    {
        [FieldOffset(0)] // size = 3072, padding = 0
        public fixed ulong _terms[3072 / 8]; // ecs_term_t[16]

        public Span<ecs_term_t> terms
        {
            get
            {
                fixed (ecs_filter_desc_t* @this = &this)
                {
                    var pointer = &@this->_terms[0];
                    var span = new Span<ecs_term_t>(pointer, 16);
                    return span;
                }
            }
        }

        [FieldOffset(3072)] // size = 8, padding = 0
        public ecs_term_t* terms_buffer;

        [FieldOffset(3080)] // size = 4, padding = 0
        public int terms_buffer_count;

        [FieldOffset(3084)] // size = 1, padding = 3
        public CBool substitute_default;

        [FieldOffset(3088)] // size = 8, padding = 0
        public CString8U expr;

        [FieldOffset(3096)] // size = 8, padding = 0
        public CString8U name;
    }

    // Struct @ flecs.h:478:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 3168, Pack = 8)]
    public struct ecs_query_desc_t
    {
        [FieldOffset(0)] // size = 3104, padding = 0
        public ecs_filter_desc_t filter;

        [FieldOffset(3104)] // size = 8, padding = 0
        public ecs_entity_t order_by_component;

        [FieldOffset(3112)] // size = 8, padding = 0
        public ecs_order_by_action_t order_by;

        [FieldOffset(3120)] // size = 8, padding = 0
        public ecs_id_t group_by_id;

        [FieldOffset(3128)] // size = 8, padding = 0
        public ecs_group_by_action_t group_by;

        [FieldOffset(3136)] // size = 8, padding = 0
        public void* group_by_ctx;

        [FieldOffset(3144)] // size = 8, padding = 0
        public ecs_ctx_free_t group_by_ctx_free;

        [FieldOffset(3152)] // size = 8, padding = 0
        public ecs_query_t* parent;

        [FieldOffset(3160)] // size = 8, padding = 0
        public ecs_entity_t system;
    }

    // Struct @ flecs.h:513:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 888, Pack = 8)]
    public struct ecs_trigger_desc_t
    {
        [FieldOffset(0)] // size = 576, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(576)] // size = 192, padding = 0
        public ecs_term_t term;

        [FieldOffset(768)] // size = 8, padding = 0
        public CString8U expr;

        [FieldOffset(776)] // size = 64, padding = 0
        public fixed ulong _events[64 / 8]; // ecs_entity_t[8]

        public Span<ecs_entity_t> events
        {
            get
            {
                fixed (ecs_trigger_desc_t* @this = &this)
                {
                    var pointer = &@this->_events[0];
                    var span = new Span<ecs_entity_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(840)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(848)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(856)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(864)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(872)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(880)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;
    }

    // Struct @ flecs.h:3458:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct ecs_event_desc_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t @event;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_ids_t* ids;

        [FieldOffset(16)] // size = 4, padding = 4
        public ecs_payload_kind_t payload_kind;

        [FieldOffset(24)] // size = 16, padding = 0
        public ecs_event_desc_t_payload payload;

        [FieldOffset(40)] // size = 8, padding = 0
        public void* param;

        [FieldOffset(48)] // size = 8, padding = 0
        public ecs_object_t* observable;

        // Union @ flecs.h:3444:5 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
        [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
        public struct ecs_event_desc_t_payload
        {
            [FieldOffset(0)] // size = 8, padding = 0
            public ecs_entity_t entity;

            [FieldOffset(0)] // size = 16, padding = 0
            public ecs_event_desc_t_payload_table table;

            // Struct @ flecs.h:3446:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
            [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
            public struct ecs_event_desc_t_payload_table
            {
                [FieldOffset(0)] // size = 8, padding = 0
                public ecs_table_t* table;

                [FieldOffset(8)] // size = 4, padding = 0
                public int offset;

                [FieldOffset(12)] // size = 4, padding = 0
                public int count;
            }
        }
    }

    // Struct @ flecs.h:544:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 3792, Pack = 8)]
    public struct ecs_observer_desc_t
    {
        [FieldOffset(0)] // size = 576, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(576)] // size = 3104, padding = 0
        public ecs_filter_desc_t filter;

        [FieldOffset(3680)] // size = 64, padding = 0
        public fixed ulong _events[64 / 8]; // ecs_entity_t[8]

        public Span<ecs_entity_t> events
        {
            get
            {
                fixed (ecs_observer_desc_t* @this = &this)
                {
                    var pointer = &@this->_events[0];
                    var span = new Span<ecs_entity_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(3744)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(3752)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(3760)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(3768)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(3776)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(3784)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;
    }

    // Struct @ api_types.h:31:29 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_record_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_table_t* table;

        [FieldOffset(8)] // size = 4, padding = 4
        public int row;
    }

    // Struct @ system.h:124:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    [StructLayout(LayoutKind.Explicit, Size = 3832, Pack = 8)]
    public struct ecs_system_desc_t
    {
        [FieldOffset(0)] // size = 576, padding = 0
        public ecs_entity_desc_t entity;

        [FieldOffset(576)] // size = 3168, padding = 0
        public ecs_query_desc_t query;

        [FieldOffset(3744)] // size = 8, padding = 0
        public ecs_iter_action_t callback;

        [FieldOffset(3752)] // size = 8, padding = 0
        public ecs_system_status_action_t status_callback;

        [FieldOffset(3760)] // size = 8, padding = 0
        public ecs_entity_t self;

        [FieldOffset(3768)] // size = 8, padding = 0
        public void* ctx;

        [FieldOffset(3776)] // size = 8, padding = 0
        public void* status_ctx;

        [FieldOffset(3784)] // size = 8, padding = 0
        public void* binding_ctx;

        [FieldOffset(3792)] // size = 8, padding = 0
        public ecs_ctx_free_t ctx_free;

        [FieldOffset(3800)] // size = 8, padding = 0
        public ecs_ctx_free_t status_ctx_free;

        [FieldOffset(3808)] // size = 8, padding = 0
        public ecs_ctx_free_t binding_ctx_free;

        [FieldOffset(3816)] // size = 4, padding = 0
        public float interval;

        [FieldOffset(3820)] // size = 4, padding = 0
        public int rate;

        [FieldOffset(3824)] // size = 8, padding = 0
        public ecs_entity_t tick_source;
    }

    // Struct @ stats.h:78:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 24248, Pack = 4)]
    public struct ecs_world_stats_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int dummy_;

        [FieldOffset(4)] // size = 720, padding = 0
        public ecs_gauge_t entity_count;

        [FieldOffset(724)] // size = 720, padding = 0
        public ecs_gauge_t component_count;

        [FieldOffset(1444)] // size = 720, padding = 0
        public ecs_gauge_t query_count;

        [FieldOffset(2164)] // size = 720, padding = 0
        public ecs_gauge_t system_count;

        [FieldOffset(2884)] // size = 720, padding = 0
        public ecs_gauge_t table_count;

        [FieldOffset(3604)] // size = 720, padding = 0
        public ecs_gauge_t empty_table_count;

        [FieldOffset(4324)] // size = 720, padding = 0
        public ecs_gauge_t singleton_table_count;

        [FieldOffset(5044)] // size = 720, padding = 0
        public ecs_gauge_t matched_entity_count;

        [FieldOffset(5764)] // size = 720, padding = 0
        public ecs_gauge_t matched_table_count;

        [FieldOffset(6484)] // size = 960, padding = 0
        public ecs_counter_t new_count;

        [FieldOffset(7444)] // size = 960, padding = 0
        public ecs_counter_t bulk_new_count;

        [FieldOffset(8404)] // size = 960, padding = 0
        public ecs_counter_t delete_count;

        [FieldOffset(9364)] // size = 960, padding = 0
        public ecs_counter_t clear_count;

        [FieldOffset(10324)] // size = 960, padding = 0
        public ecs_counter_t add_count;

        [FieldOffset(11284)] // size = 960, padding = 0
        public ecs_counter_t remove_count;

        [FieldOffset(12244)] // size = 960, padding = 0
        public ecs_counter_t set_count;

        [FieldOffset(13204)] // size = 960, padding = 0
        public ecs_counter_t discard_count;

        [FieldOffset(14164)] // size = 960, padding = 0
        public ecs_counter_t world_time_total_raw;

        [FieldOffset(15124)] // size = 960, padding = 0
        public ecs_counter_t world_time_total;

        [FieldOffset(16084)] // size = 960, padding = 0
        public ecs_counter_t frame_time_total;

        [FieldOffset(17044)] // size = 960, padding = 0
        public ecs_counter_t system_time_total;

        [FieldOffset(18004)] // size = 960, padding = 0
        public ecs_counter_t merge_time_total;

        [FieldOffset(18964)] // size = 720, padding = 0
        public ecs_gauge_t fps;

        [FieldOffset(19684)] // size = 720, padding = 0
        public ecs_gauge_t delta_time;

        [FieldOffset(20404)] // size = 960, padding = 0
        public ecs_counter_t frame_count_total;

        [FieldOffset(21364)] // size = 960, padding = 0
        public ecs_counter_t merge_count_total;

        [FieldOffset(22324)] // size = 960, padding = 0
        public ecs_counter_t pipeline_build_count_total;

        [FieldOffset(23284)] // size = 960, padding = 0
        public ecs_counter_t systems_ran_frame;

        [FieldOffset(24244)] // size = 4, padding = 0
        public int t;
    }

    // Struct @ stats.h:92:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 2164, Pack = 4)]
    public struct ecs_query_stats_t
    {
        [FieldOffset(0)] // size = 720, padding = 0
        public ecs_gauge_t matched_table_count;

        [FieldOffset(720)] // size = 720, padding = 0
        public ecs_gauge_t matched_empty_table_count;

        [FieldOffset(1440)] // size = 720, padding = 0
        public ecs_gauge_t matched_entity_count;

        [FieldOffset(2160)] // size = 4, padding = 0
        public int t;
    }

    // Struct @ stats.h:101:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 5524, Pack = 4)]
    public struct ecs_system_stats_t
    {
        [FieldOffset(0)] // size = 2164, padding = 0
        public ecs_query_stats_t query_stats;

        [FieldOffset(2164)] // size = 960, padding = 0
        public ecs_counter_t time_spent;

        [FieldOffset(3124)] // size = 960, padding = 0
        public ecs_counter_t invoke_count;

        [FieldOffset(4084)] // size = 720, padding = 0
        public ecs_gauge_t active;

        [FieldOffset(4804)] // size = 720, padding = 0
        public ecs_gauge_t enabled;
    }

    // Struct @ stats.h:112:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_pipeline_stats_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_vector_t* systems;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_map_t* system_stats;
    }

    // Struct @ stats.h:29:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 720, Pack = 4)]
    public struct ecs_gauge_t
    {
        [FieldOffset(0)] // size = 240, padding = 0
        public fixed uint _avg[240 / 4]; // float[60]

        public Span<float> avg
        {
            get
            {
                fixed (ecs_gauge_t* @this = &this)
                {
                    var pointer = &@this->_avg[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }

        [FieldOffset(240)] // size = 240, padding = 0
        public fixed uint _min[240 / 4]; // float[60]

        public Span<float> min
        {
            get
            {
                fixed (ecs_gauge_t* @this = &this)
                {
                    var pointer = &@this->_min[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }

        [FieldOffset(480)] // size = 240, padding = 0
        public fixed uint _max[240 / 4]; // float[60]

        public Span<float> max
        {
            get
            {
                fixed (ecs_gauge_t* @this = &this)
                {
                    var pointer = &@this->_max[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }
    }

    // Struct @ strbuf.h:40:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 536, Pack = 8)]
    public struct ecs_strbuf_element_embedded
    {
        [FieldOffset(0)] // size = 24, padding = 0
        public ecs_strbuf_element super;

        [FieldOffset(24)] // size = 512, padding = 0
        public fixed byte _buf[512 / 1]; // char[512]

        public string buf
        {
            get
            {
                fixed (ecs_strbuf_element_embedded* @this = &this)
                {
                    var pointer = &@this->_buf[0];
                    var cString = new CString8U(pointer);
                    return Runtime.String8U(cString);
                }
            }
        }
    }

    // Struct @ strbuf.h:35:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_strbuf_element
    {
        [FieldOffset(0)] // size = 1, padding = 3
        public CBool buffer_embedded;

        [FieldOffset(4)] // size = 4, padding = 0
        public int pos;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U buf;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_strbuf_element* next;
    }

    // Struct @ api_types.h:166:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 328, Pack = 8)]
    public struct ecs_iter_cache_t
    {
        [FieldOffset(0)] // size = 64, padding = 0
        public fixed ulong _ids[64 / 8]; // ecs_id_t[8]

        public Span<ecs_id_t> ids
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_ids[0];
                    var span = new Span<ecs_id_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(64)] // size = 64, padding = 0
        public fixed ulong _types[64 / 8]; // ecs_type_t[8]

        public Span<ecs_type_t> types
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_types[0];
                    var span = new Span<ecs_type_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(128)] // size = 32, padding = 0
        public fixed uint _columns[32 / 4]; // int32_t[8]

        public Span<int> columns
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_columns[0];
                    var span = new Span<int>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(160)] // size = 64, padding = 0
        public fixed ulong _subjects[64 / 8]; // ecs_entity_t[8]

        public Span<ecs_entity_t> subjects
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_subjects[0];
                    var span = new Span<ecs_entity_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(224)] // size = 32, padding = 0
        public fixed uint _sizes[32 / 4]; // ecs_size_t[8]

        public Span<ecs_size_t> sizes
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_sizes[0];
                    var span = new Span<ecs_size_t>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(256)] // size = 64, padding = 0
        public fixed ulong _ptrs[64 / 8]; // void*[8]

        public Span<IntPtr> ptrs
        {
            get
            {
                fixed (ecs_iter_cache_t* @this = &this)
                {
                    var pointer = &@this->_ptrs[0];
                    var span = new Span<IntPtr>(pointer, 8);
                    return span;
                }
            }
        }

        [FieldOffset(320)] // size = 1, padding = 0
        public CBool ids_alloc;

        [FieldOffset(321)] // size = 1, padding = 0
        public CBool types_alloc;

        [FieldOffset(322)] // size = 1, padding = 0
        public CBool columns_alloc;

        [FieldOffset(323)] // size = 1, padding = 0
        public CBool subjects_alloc;

        [FieldOffset(324)] // size = 1, padding = 0
        public CBool sizes_alloc;

        [FieldOffset(325)] // size = 1, padding = 2
        public CBool ptrs_alloc;
    }

    // Struct @ api_types.h:100:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 1640, Pack = 8)]
    public struct ecs_scope_iter_t
    {
        [FieldOffset(0)] // size = 1600, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(1600)] // size = 32, padding = 0
        public ecs_map_iter_t tables;

        [FieldOffset(1632)] // size = 4, padding = 4
        public int index;
    }

    // Struct @ api_types.h:118:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 112, Pack = 8)]
    public struct ecs_term_iter_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_term_t* term;

        [FieldOffset(8)] // size = 8, padding = 0
        public ecs_id_record_t* self_index;

        [FieldOffset(16)] // size = 8, padding = 0
        public ecs_id_record_t* set_index;

        [FieldOffset(24)] // size = 32, padding = 0
        public ecs_map_iter_t iter;

        [FieldOffset(56)] // size = 1, padding = 7
        public CBool iter_set;

        [FieldOffset(64)] // size = 8, padding = 0
        public ecs_id_t id;

        [FieldOffset(72)] // size = 4, padding = 4
        public int column;

        [FieldOffset(80)] // size = 8, padding = 0
        public ecs_type_t type;

        [FieldOffset(88)] // size = 8, padding = 0
        public ecs_entity_t subject;

        [FieldOffset(96)] // size = 4, padding = 4
        public ecs_size_t size;

        [FieldOffset(104)] // size = 8, padding = 0
        public void* ptr;
    }

    // Struct @ api_types.h:133:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 1728, Pack = 8)]
    public struct ecs_filter_iter_t
    {
        [FieldOffset(0)] // size = 1600, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(1600)] // size = 4, padding = 4
        public ecs_filter_iter_kind_t kind;

        [FieldOffset(1608)] // size = 112, padding = 0
        public ecs_term_iter_t term_iter;

        [FieldOffset(1720)] // size = 4, padding = 4
        public int min_term_index;
    }

    // Struct @ api_types.h:142:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 28, Pack = 4)]
    public struct ecs_query_iter_t
    {
        [FieldOffset(0)] // size = 12, padding = 0
        public ecs_page_iter_t page_iter;

        [FieldOffset(12)] // size = 4, padding = 0
        public int index;

        [FieldOffset(16)] // size = 4, padding = 0
        public int sparse_smallest;

        [FieldOffset(20)] // size = 4, padding = 0
        public int sparse_first;

        [FieldOffset(24)] // size = 4, padding = 0
        public int bitset_first;
    }

    // Struct @ api_types.h:149:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 1616, Pack = 8)]
    public struct ecs_snapshot_iter_t
    {
        [FieldOffset(0)] // size = 1600, padding = 0
        public ecs_filter_t filter;

        [FieldOffset(1600)] // size = 8, padding = 0
        public ecs_vector_t* tables;

        [FieldOffset(1608)] // size = 4, padding = 4
        public int index;
    }

    // Struct @ flecs.h:232:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct ecs_term_set_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_entity_t relation;

        [FieldOffset(8)] // size = 1, padding = 3
        public byte mask;

        [FieldOffset(12)] // size = 4, padding = 0
        public int min_depth;

        [FieldOffset(16)] // size = 4, padding = 4
        public int max_depth;
    }

    // Struct @ stats.h:35:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    [StructLayout(LayoutKind.Explicit, Size = 960, Pack = 4)]
    public struct ecs_counter_t
    {
        [FieldOffset(0)] // size = 720, padding = 0
        public ecs_gauge_t rate;

        [FieldOffset(720)] // size = 240, padding = 0
        public fixed uint _value[240 / 4]; // float[60]

        public Span<float> value
        {
            get
            {
                fixed (ecs_counter_t* @this = &this)
                {
                    var pointer = &@this->_value[0];
                    var span = new Span<float>(pointer, 60);
                    return span;
                }
            }
        }
    }

    // Struct @ strbuf.h:50:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct ecs_strbuf_list_elem
    {
        [FieldOffset(0)] // size = 4, padding = 4
        public int count;

        [FieldOffset(8)] // size = 8, padding = 0
        public CString8U separator;
    }

    // Struct @ api_types.h:83:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct ecs_page_iter_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int offset;

        [FieldOffset(4)] // size = 4, padding = 0
        public int limit;

        [FieldOffset(8)] // size = 4, padding = 0
        public int remaining;
    }

    // OpaqueType @ map.h:36:26 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_map_t
    {
    }

    // OpaqueType @ flecs.h:88:28 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_world_t
    {
    }

    // OpaqueType @ api_types.h:28:28 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_table_t
    {
    }

    // OpaqueType @ flecs.h:91:28 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_query_t
    {
    }

    // OpaqueType @ queue.h:18:28 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/queue.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_queue_t
    {
    }

    // OpaqueType @ snapshot.h:23:31 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/snapshot.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_snapshot_t
    {
    }

    // OpaqueType @ map.h:41:12 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_bucket_t
    {
    }

    // OpaqueType @ api_types.h:37:27 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_data_t
    {
    }

    // OpaqueType @ flecs.h:75:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_object_t
    {
    }

    // OpaqueType @ api_types.h:46:32 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    [StructLayout(LayoutKind.Sequential)]
    public struct ecs_id_record_t
    {
    }

    // Typedef @ api_defines.h:68:17 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct ecs_size_t
    {
        [FieldOffset(0)] // size = 4, padding = 0
        public int Data;

        public static implicit operator int(ecs_size_t data) => data.Data;
        public static implicit operator ecs_size_t(int data) => new() { Data = data };
    }

    // Typedef @ map.h:37:18 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/map.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_map_key_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Data;

        public static implicit operator ulong(ecs_map_key_t data) => data.Data;
        public static implicit operator ecs_map_key_t(ulong data) => new() { Data = data };
    }

    // Typedef @ flecs.h:85:29 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_type_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_vector_t* Data;

        public static implicit operator ecs_vector_t*(ecs_type_t data) => data.Data;
        public static implicit operator ecs_type_t(ecs_vector_t* data) => new() { Data = data };
    }

    // Typedef @ flecs.h:82:18 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_entity_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ecs_id_t Data;

        public static implicit operator ecs_id_t(ecs_entity_t data) => data.Data;
        public static implicit operator ecs_entity_t(ecs_id_t data) => new() { Data = data };
    }

    // Typedef @ flecs.h:79:18 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_id_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public ulong Data;

        public static implicit operator ulong(ecs_id_t data) => data.Data;
        public static implicit operator ecs_id_t(ulong data) => new() { Data = data };
    }

    // Typedef @ os_api.h:53:19 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_thread_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_thread_t data) => data.Data;
        public static implicit operator ecs_os_thread_t(UIntPtr data) => new() { Data = data };
    }

    // Typedef @ os_api.h:55:19 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_mutex_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_mutex_t data) => data.Data;
        public static implicit operator ecs_os_mutex_t(UIntPtr data) => new() { Data = data };
    }

    // Typedef @ os_api.h:54:19 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_cond_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_cond_t data) => data.Data;
        public static implicit operator ecs_os_cond_t(UIntPtr data) => new() { Data = data };
    }

    // Typedef @ os_api.h:56:19 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/os_api.h)
    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct ecs_os_dl_t
    {
        [FieldOffset(0)] // size = 8, padding = 0
        public UIntPtr Data;

        public static implicit operator UIntPtr(ecs_os_dl_t data) => data.Data;
        public static implicit operator ecs_os_dl_t(UIntPtr data) => new() { Data = data };
    }

    // Enum @ flecs.h:271:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_match_kind_t : int
    {
        EcsMatchDefault = 0,
        EcsMatchAll = 1,
        EcsMatchAny = 2,
        EcsMatchExact = 3
    }

    // Enum @ flecs.h:203:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_inout_kind_t : int
    {
        EcsInOutDefault = 0,
        EcsInOut = 1,
        EcsIn = 2,
        EcsOut = 3
    }

    // Enum @ flecs.h:221:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_oper_kind_t : int
    {
        EcsAnd = 0,
        EcsOr = 1,
        EcsNot = 2,
        EcsOptional = 3,
        EcsAndFrom = 4,
        EcsOrFrom = 5,
        EcsNotFrom = 6
    }

    // Enum @ flecs.h:210:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_var_kind_t : int
    {
        EcsVarDefault = 0,
        EcsVarIsEntity = 1,
        EcsVarIsVariable = 2
    }

    // Enum @ flecs.h:3438:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public enum ecs_payload_kind_t : int
    {
        EcsPayloadNone = 0,
        EcsPayloadEntity = 1,
        EcsPayloadTable = 2
    }

    // Enum @ api_types.h:123:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    public enum ecs_filter_iter_kind_t : int
    {
        EcsFilterIterEvalIndex = 0,
        EcsFilterIterEvalNone = 1
    }

    // Enum @ system.h:52:3 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/modules/system.h)
    public enum ecs_system_status_t : int
    {
        EcsSystemStatusNone = 0,
        EcsSystemEnabled = 1,
        EcsSystemDisabled = 2,
        EcsSystemActivated = 3,
        EcsSystemDeactivated = 4
    }

    // Pseudo enum 'EcsMatchFailureReason' @ api_types.h:233:14 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_types.h)
    public const int EcsMatchOk = 0;
    public const int EcsMatchNotASystem = 1;
    public const int EcsMatchSystemIsATask = 2;
    public const int EcsMatchEntityIsDisabled = 3;
    public const int EcsMatchEntityIsPrefab = 4;
    public const int EcsMatchFromSelf = 5;
    public const int EcsMatchFromOwned = 6;
    public const int EcsMatchFromShared = 7;
    public const int EcsMatchFromContainer = 8;
    public const int EcsMatchFromEntity = 9;
    public const int EcsMatchOrFromSelf = 10;
    public const int EcsMatchOrFromOwned = 11;
    public const int EcsMatchOrFromShared = 12;
    public const int EcsMatchOrFromContainer = 13;
    public const int EcsMatchNotFromSelf = 14;
    public const int EcsMatchNotFromOwned = 15;
    public const int EcsMatchNotFromShared = 16;
    public const int EcsMatchNotFromContainer = 17;

    // MacroObjectLike @ api_defines.h:120:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsComponent = 1;

    // MacroObjectLike @ api_defines.h:121:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsComponentLifecycle = 2;

    // MacroObjectLike @ api_defines.h:122:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsType = 3;

    // MacroObjectLike @ api_defines.h:123:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsIdentifier = 4;

    // MacroObjectLike @ api_defines.h:124:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsTrigger = 6;

    // MacroObjectLike @ api_defines.h:125:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsQuery = 7;

    // MacroObjectLike @ api_defines.h:126:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsObserver = 8;

    // MacroObjectLike @ api_defines.h:130:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsSystem = 10;

    // MacroObjectLike @ api_defines.h:131:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsTickSource = 11;

    // MacroObjectLike @ api_defines.h:134:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsPipelineQuery = 12;

    // MacroObjectLike @ api_defines.h:137:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsTimer = 13;

    // MacroObjectLike @ api_defines.h:138:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int FLECS__EEcsRateFilter = 14;

    // MacroObjectLike @ api_defines.h:145:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_ROLE_MASK = 0xFFUL << 56;

    // MacroObjectLike @ api_defines.h:146:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_ENTITY_MASK = 0xFFFFFFFFUL;

    // MacroObjectLike @ api_defines.h:147:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_GENERATION_MASK = 0xFFFFUL << 32;

    // MacroObjectLike @ api_defines.h:150:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const ulong ECS_COMPONENT_MASK = ~ECS_ROLE_MASK;

    // MacroObjectLike @ api_defines.h:336:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_OPERATION = 1;

    // MacroObjectLike @ api_defines.h:337:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_PARAMETER = 2;

    // MacroObjectLike @ api_defines.h:338:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_DELETE = 3;

    // MacroObjectLike @ api_defines.h:339:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_OUT_OF_MEMORY = 4;

    // MacroObjectLike @ api_defines.h:340:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_OUT_OF_RANGE = 5;

    // MacroObjectLike @ api_defines.h:341:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_UNSUPPORTED = 6;

    // MacroObjectLike @ api_defines.h:342:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INTERNAL_ERROR = 7;

    // MacroObjectLike @ api_defines.h:343:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_ALREADY_DEFINED = 8;

    // MacroObjectLike @ api_defines.h:344:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_MISSING_OS_API = 9;

    // MacroObjectLike @ api_defines.h:345:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_THREAD_ERROR = 10;

    // MacroObjectLike @ api_defines.h:346:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_CYCLE_DETECTED = 11;

    // MacroObjectLike @ api_defines.h:348:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INCONSISTENT_NAME = 20;

    // MacroObjectLike @ api_defines.h:349:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_NAME_IN_USE = 21;

    // MacroObjectLike @ api_defines.h:350:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_NOT_A_COMPONENT = 22;

    // MacroObjectLike @ api_defines.h:351:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_COMPONENT_SIZE = 23;

    // MacroObjectLike @ api_defines.h:352:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_COMPONENT_ALIGNMENT = 24;

    // MacroObjectLike @ api_defines.h:353:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COMPONENT_NOT_REGISTERED = 25;

    // MacroObjectLike @ api_defines.h:354:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INCONSISTENT_COMPONENT_ID = 26;

    // MacroObjectLike @ api_defines.h:355:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INCONSISTENT_COMPONENT_ACTION = 27;

    // MacroObjectLike @ api_defines.h:356:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_MODULE_UNDEFINED = 28;

    // MacroObjectLike @ api_defines.h:358:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_ACCESS_VIOLATION = 40;

    // MacroObjectLike @ api_defines.h:359:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_INDEX_OUT_OF_RANGE = 41;

    // MacroObjectLike @ api_defines.h:360:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_IS_NOT_SHARED = 42;

    // MacroObjectLike @ api_defines.h:361:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_IS_SHARED = 43;

    // MacroObjectLike @ api_defines.h:362:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_HAS_NO_DATA = 44;

    // MacroObjectLike @ api_defines.h:363:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_COLUMN_TYPE_MISMATCH = 45;

    // MacroObjectLike @ api_defines.h:364:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_NO_OUT_COLUMNS = 46;

    // MacroObjectLike @ api_defines.h:366:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_TYPE_NOT_AN_ENTITY = 60;

    // MacroObjectLike @ api_defines.h:367:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_TYPE_CONSTRAINT_VIOLATION = 61;

    // MacroObjectLike @ api_defines.h:368:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_TYPE_INVALID_CASE = 62;

    // MacroObjectLike @ api_defines.h:370:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_WHILE_ITERATING = 70;

    // MacroObjectLike @ api_defines.h:371:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_LOCKED_STORAGE = 71;

    // MacroObjectLike @ api_defines.h:372:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_INVALID_FROM_WORKER = 72;

    // MacroObjectLike @ api_defines.h:374:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_defines.h)
    public const int ECS_DESERIALIZE_FORMAT_ERROR = 80;

    // MacroObjectLike @ log.h:20:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_BLACK = "\033[1;30m";

    // MacroObjectLike @ log.h:21:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_RED = "\033[0;31m";

    // MacroObjectLike @ log.h:22:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_GREEN = "\033[0;32m";

    // MacroObjectLike @ log.h:23:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_YELLOW = "\033[0;33m";

    // MacroObjectLike @ log.h:24:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_BLUE = "\033[0;34m";

    // MacroObjectLike @ log.h:25:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_MAGENTA = "\033[0;35m";

    // MacroObjectLike @ log.h:26:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_CYAN = "\033[0;36m";

    // MacroObjectLike @ log.h:27:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_WHITE = "\033[1;37m";

    // MacroObjectLike @ log.h:28:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_GREY = "\033[0;37m";

    // MacroObjectLike @ log.h:29:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_NORMAL = "\033[0;49m";

    // MacroObjectLike @ log.h:30:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/log.h)
    public const string ECS_BOLD = "\033[1;49m";

    // MacroObjectLike @ strbuf.h:27:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    public const int ECS_STRBUF_ELEMENT_SIZE = 511;

    // MacroObjectLike @ strbuf.h:28:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/strbuf.h)
    public const int ECS_STRBUF_MAX_LIST_DEPTH = 32;

    // MacroObjectLike @ flecs.h:118:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_MAX_ADD_REMOVE = 32;

    // MacroObjectLike @ flecs.h:121:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_TERM_CACHE_SIZE = 8;

    // MacroObjectLike @ flecs.h:124:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_TERM_DESC_CACHE_SIZE = 16;

    // MacroObjectLike @ flecs.h:127:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int ECS_TRIGGER_DESC_EVENT_COUNT_MAX = 8;

    // MacroObjectLike @ flecs.h:189:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsDefaultSet = 0;

    // MacroObjectLike @ flecs.h:190:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsSelf = 1;

    // MacroObjectLike @ flecs.h:191:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsSuperSet = 2;

    // MacroObjectLike @ flecs.h:192:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsSubSet = 4;

    // MacroObjectLike @ flecs.h:193:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsCascade = 8;

    // MacroObjectLike @ flecs.h:194:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsAll = 16;

    // MacroObjectLike @ flecs.h:195:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsNothing = 32;

    // MacroObjectLike @ api_support.h:24:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int ECS_HI_COMPONENT_ID = 256;

    // MacroObjectLike @ api_support.h:28:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int ECS_MAX_RECURSION = 512;

    // MacroObjectLike @ api_support.h:43:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int FLECS__TNULL = 0;

    // MacroObjectLike @ api_support.h:44:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int FLECS__T0 = 0;

    // MacroObjectLike @ api_support.h:45:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/private/api_support.h)
    public const int FLECS__E0 = 0;

    // MacroObjectLike @ flecs.h:683:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const ulong ECS_ROLE = 1UL << 63;

    // MacroObjectLike @ flecs.h:868:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsFirstUserComponentId = 32;

    // MacroObjectLike @ flecs.h:872:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs.h)
    public const int EcsFirstUserEntityId = ECS_HI_COMPONENT_ID + 128;

    // MacroObjectLike @ stats.h:22:9 (/Users/lstranks/Programming/flecs-cs/ext/flecs/include/flecs/addons/stats.h)
    public const int ECS_STAT_WINDOW = 60;
}
